name: Style

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-style:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install more recent clang-format from LLVM (match Homebrew v16)
      - name: Install clang-format
        run: |
          wget -O- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-19 main'
          sudo apt-get update -q
          sudo apt-get install -y clang-format-19

      - name: Check style
        run: |
          ./scripts/format-source --clang-format clang-format-19
          if [[ `git status -s | wc -l` -ne 0 ]]; then
            echo 'Error: Commit is not formatted!'
            echo 'Run '\`'./scripts/format-source'\`' in the source root directory'
            echo 'Summary of required changes:'
            echo "`git diff --stat`"
            echo 'Repository status:'
            echo "`git status`"
            exit 1
          else
            echo 'Commit is correctly formatted'
            exit 0
          fi

  cpp-code-style:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Run clang-format with suggestions
      uses: jidicula/clang-format-action@v4.15.0
      with:
        clang-format-version: '20'
        check-path: '.'
        fallback-style: 'none'
        exclude-regex: ''  # Add exclusion patterns if needed
        report-only: true  # This ensures it doesn't fail the check but reports issues

    - name: Suggest changes
      if: failure()
      run: |
        git diff > clang-format-changes.patch
        echo "#### Clang-format suggested changes" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
        cat clang-format-changes.patch >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Comment PR
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const diff = fs.readFileSync('clang-format-changes.patch', 'utf8');
          const body = '### Clang-format suggestions:\n```diff\n' + diff + '\n```';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  julia-code-style:
    runs-on: ubuntu-latest
    steps:
      - uses: julia-actions/julia-format@v4
        with:
          version: '1'

  check-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check JSON Schema
        run: |
          OUTPUT=$(find examples -name *.json -maxdepth 2 -print0 | xargs -0 -n1 ./scripts/validate-config)
          if echo $OUTPUT | grep -q 'Validation failed'; then
            echo 'Error: Configuration file validation failed!'
            echo 'Summary of output:'
            echo $OUTPUT
            exit 1
          else
            echo 'Configuration file validation passed'
            exit 0
          fi

  check-tests-tags:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check test tags
        run: |
          # Find TEST_CASE lines that don't have any of the required tags.
          if grep -r "TEST_CASE(" test/unit | grep -v "\[Serial\]" | grep -v "\[Parallel\]" | grep -v "\[GPU\]" | grep -q "TEST_CASE("; then
            echo "Error: Found TEST_CASE without required execution tags:"
            grep -r "TEST_CASE(" test/unit | grep -v "\[Serial\]" | grep -v "\[Parallel\]" | grep -v "\[GPU\]"
          exit 1
          fi

  check-license:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: viperproject/check-license-header@v2
        with:
          config: .github/license-check/config.json
          strict: false
