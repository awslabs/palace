name: Spack

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SPACK_COLOR: always
  REGISTRY: ghcr.io/awslabs/palace
  SPACK_ROOT: /opt/spack
  SPACK_CACHE: /opt/spack-cache
  tempdir: /opt/spack-cache
  TMP: /opt/spack-cache
  TMPDIR: /opt/spack-cache
  SPACK_ENV: ./spack-env
  USERNAME: palace_bot

jobs:
  build-and-test-spack:
    strategy:
      fail-fast: false
      matrix:
        include: # Include GPU build tests
          - compiler: gcc
            mpi: openmpi
            gpu: none
            blas: intel-oneapi-mkl

          # - compiler: gcc
          #   mpi: mpich
          #   gpu: cuda

          # - compiler: gcc
          #   mpi: mpich
          #   gpu: rocm

    runs-on: palace_ubuntu-latest_16-core
    steps:
      - uses: actions/checkout@v4

      - name: Configure Clang compiler
        if: matrix.compiler == 'clang'
        run: sudo apt-get install -y clang lld

      - name: Configure Intel oneAPI compiler
        if: matrix.compiler == 'intel'
        run:
          sudo apt-get install -y intel-oneapi-compiler-dpcpp-cpp=2024.2.1-1079 \
          intel-oneapi-compiler-fortran=2024.2.1-1079

      - name: Setup Spack
        run: |
          # We need to pin this version to get effective re-use of our local cache
          git clone -c feature.manyFiles=true --depth=2 --branch v1.0.0-alpha.4 https://github.com/spack/spack.git ${SPACK_ROOT}
          echo "${SPACK_ROOT}/bin" >> "$GITHUB_PATH"

          # Clean up Android SDK install (confuses Spack MKL link line?)
          sudo rm -rf $ANDROID_HOME

      - name: Setup Environment
        run: |
          # Configure GPU variant
          if [[ "${{ matrix.gpu }}" == 'cuda' ]]; then
            GPU_VARIANT="+cuda cuda_arch=70"
          elif [[ "${{ matrix.gpu }}" == 'rocm' ]]; then
            GPU_VARIANT="+rocm amdgpu_target=gfx900"
          else
            GPU_VARIANT=""
          fi

          mkdir -p ${SPACK_ENV}
          # I don't know why spack struggles so much with the environment creation...
          cd ${SPACK_ENV}
          # We could configure settings here, but that's done through CLI later
          # We at least want our core spec to be here or else env looks empty...
          cat << EOF > spack.yaml
          spack:
            specs: 
              - local.palace@develop $GPU_VARIANT ^${{ matrix.mpi }} ^${{ matrix.blas }} ^${{ matrix.compiler }}
              - libceed
            view: false
            concretizer:
              unify: true
          EOF
          cd -

          # Set up Spack to use external packages (MPI, etc.) and local Palace package
          # recipe
          spack -e ${SPACK_ENV} repo add spack/local

          # Using `spack develop` in order to have an in-source build
          # Can use this build directory later for testing
          # NOTE: Compiler spec must be last here due to spack updates
          spack -e ${SPACK_ENV} develop --path=$(pwd) \
            local.palace@git."${{ github.head_ref || github.ref_name }}"=develop \
            $GPU_VARIANT ^${{ matrix.mpi }} ^${{ matrix.blas }} ^${{ matrix.compiler }}

      - name: Configure Spack settings
        run: |
          # Views are only for environments being used in-situ
          spack -e ${SPACK_ENV} config add view:false
          # We want to re-use externals/buildcache
          spack -e ${SPACK_ENV} config add concretizer:reuse:false
          # Unify doesn't really apply until you have more than one core spec
          spack -e ${SPACK_ENV} config add concretizer:unify:true
          # Allow splicing of MPI / Compilers from build cache for faster builds
          spack -e ${SPACK_ENV} config add concretizer:splice:automatic:false
          # Try to prevent duplcate packages in concretization
          spack -e ${SPACK_ENV} config add concretizer:duplicates:strategy:none
          # Target the most generic microarch to encourage re-use
          spack -e ${SPACK_ENV} config add concretizer:targets:granularity:generic
          # Lets make sure that spack uses our tmp directories
          spack -e ${SPACK_ENV} config add config:source_cache:${SPACK_CACHE}
          spack -e ${SPACK_ENV} config add config:misc_cache:${SPACK_CACHE}
          spack -e ${SPACK_ENV} config add config:build_stage:${SPACK_CACHE}
          # We have some requirements for other package variants
          spack -e ${SPACK_ENV} config add packages:petsc:require:~hdf5

      - name: Configure Binary Mirrors / External Packages
        run: |
          # Find all externals to reduce build times
          # OpenSSL and Python are particularly annoying
          # Curl seems unecessary...
          spack -e ${SPACK_ENV} external find --all \
            --exclude openssl \
            --exclude python \
            --exclude ncurses \
            --exclude curl
          # Add access to our GitHub Container Registry cache
          # Order of being added determines order in which spack looks to reuse.
          spack -e ${SPACK_ENV} mirror add local-buildcache oci://${{ env.REGISTRY }}
          # Secrets are auto-configured by GitHub pipelines / permissions
          spack -e ${SPACK_ENV} mirror set --oci-username ${{ env.USERNAME }} --oci-password ${{ secrets.GITHUB_TOKEN }} local-buildcache
          # Install using the public buildcache as well
          # Normally we want to install everything ourself the first time anyway
          # spack -e ${SPACK_ENV} mirror add spack https://binaries.spack.io/develop
          # If we cached these, that would be faster and safer
          # spack -e ${SPACK_ENV} buildcache keys --install --trust

      - name: Concretize
        # In theory we can re-use a concretization and pin a spack to speed this up.
        # Unfortunately it then becomes difficult to know when to re-concretize.
        run: spack -e ${SPACK_ENV} concretize -f

      - name: Build Dependencies
        run: spack -e ${SPACK_ENV} install --only-concrete --no-check-signature --fail-fast --show-log-on-error --only dependencies

      - name: Push Dependencies
        # Sometimes a dependency will fail to build
        # We should still push any new dependencies we built successfully
        if: "!cancelled()"
        # We should sign our pushes here if we want to make these publically accessible
        run: spack -e ${SPACK_ENV} buildcache push --only dependencies --with-build-dependencies --unsigned --update-index local-buildcache

      - name: Build Palace
        # Build palace from source using this current directory
        run: spack -e ${SPACK_ENV} install --verbose --only-concrete --keep-stage --show-log-on-error --only package --no-cache

      - name: Run Unit Tests
        # Since we ran `spack develop` here, we have the build dir ready to run tests in
        run: |
          # Need to load the MPI built by spack
          spack -e ${SPACK_ENV} --sh load ${{ matrix.mpi }} > env.txt
          source env.txt
          cd $(spack -e ${SPACK_ENV} location --build-dir local.palace@develop)
          ls -al
          cd ./test/unit
          mpirun -np 2 ./unit-tests --skip-benchmarks
          cd -

      - name: Run Integration Tests
        if: matrix.gpu == 'none' # Skip tests for GPU builds
        env:
          NUM_PROC_TEST_MAX: "8"
        run: |
          # Configure environment
          export NUM_PROC_TEST=$(nproc 2> /dev/null || sysctl -n hw.ncpu)
          if [[ "$NUM_PROC_TEST" -gt "$NUM_PROC_TEST_MAX" ]]; then
            NUM_PROC_TEST=$NUM_PROC_TEST_MAX
          fi

          spack load palace

          # Run tests
          julia --project=test/examples -e 'using Pkg; Pkg.instantiate()'
          julia --project=test/examples --color=yes test/examples/runtests.jl

      - name: Push Palace
        # Should also sign here...
        # --force here since we want the latest version in the buildcache...
        run: spack -e ${SPACK_ENV} buildcache push --force --only package --with-build-dependencies --unsigned --update-index local-buildcache
