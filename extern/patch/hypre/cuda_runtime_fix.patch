# Fix HYPRE CUDA runtime linkage issue
# This patch replaces -lcuda_runtime with -lcudart
# This is PR https://github.com/hypre-space/hypre/pull/1380
# Code by victorapm at LLNL.

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index b8bd82095..4e3b840dc 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -188,6 +188,7 @@ set_hypre_option(SYCL HYPRE_ENABLE_ONEMKLBLAS           "Use oneMKL blas" ON)
 set_hypre_option(SYCL HYPRE_ENABLE_ONEMKLRAND           "Use oneMKL rand" ON)
 
 # TPL options
+set_hypre_option(TPL  HYPRE_BUILD_UMPIRE                "Automatically download, build, and install Umpire before hypre" OFF)
 set_hypre_option(TPL  HYPRE_ENABLE_UMPIRE               "Use Umpire Allocator for device and unified memory" OFF)
 set_hypre_option(TPL  HYPRE_ENABLE_UMPIRE_HOST          "Use Umpire Allocator for host memory" OFF)
 set_hypre_option(TPL  HYPRE_ENABLE_UMPIRE_PINNED        "Use Umpire Allocator for pinned memory" OFF)
@@ -216,6 +217,7 @@ set(HYPRE_WITH_EXTRA_CFLAGS "" CACHE STRING             "Define extra C compile
 set(HYPRE_WITH_EXTRA_CXXFLAGS "" CACHE STRING           "Define extra CXX compile flags")
 set(HYPRE_SYCL_TARGET "" CACHE STRING                   "Target SYCL architecture, e.g. 'spir64_gen'.")
 set(HYPRE_SYCL_TARGET_BACKEND "" CACHE STRING           "Additional SYCL backend options, e.g. '-device 12.1.0,12.4.0'.")
+set(HYPRE_UMPIRE_VERSION "latest" CACHE STRING          "Umpire version/tag to build (e.g., v2024.07.1 or latest)")
 
 # Set possible values for the Fortran name mangling schemes
 set(HYPRE_ENABLE_FMANGLE "UNSPECIFIED" CACHE STRING         "Set the Fortran name mangling scheme")
@@ -434,6 +436,11 @@ set_target_properties(${PROJECT_NAME} PROPERTIES
   RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
 )
 
+# Ensure installed shared library can locate dependency shared libs (e.g., umpire) at runtime
+if(BUILD_SHARED_LIBS)
+  set_target_properties(${PROJECT_NAME} PROPERTIES INSTALL_RPATH "$ORIGIN")
+endif()
+
 # Set headers
 set(HYPRE_MAIN_HEADERS
   ${CMAKE_CURRENT_BINARY_DIR}/HYPRE_config.h
@@ -586,11 +593,15 @@ install(EXPORT HYPRETargets
   DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/HYPRE"
 )
 
-# Export from build tree
-export(EXPORT HYPRETargets
-  FILE "${CMAKE_CURRENT_BINARY_DIR}/HYPRETargets.cmake"
-  NAMESPACE HYPRE::
-)
+# Export from build tree (skip when auto-building Umpire to avoid exporting private subproject deps)
+if(NOT (HYPRE_BUILD_UMPIRE AND TARGET umpire))
+  export(EXPORT HYPRETargets
+    FILE "${CMAKE_CURRENT_BINARY_DIR}/HYPRETargets.cmake"
+    NAMESPACE HYPRE::
+  )
+else()
+  message(STATUS "Skipping build-tree export of HYPRETargets due to auto-built Umpire dependency")
+endif()
 
 # Declare an alias so that consumers can depend on HYPRE::HYPRE target
 # also when using HYPRE via add_directory or FetchContent
diff --git a/src/config/cmake/HYPRE_CMakeUtilities.cmake b/src/config/cmake/HYPRE_CMakeUtilities.cmake
index 8c4525bbd..a46643cb2 100644
--- a/src/config/cmake/HYPRE_CMakeUtilities.cmake
+++ b/src/config/cmake/HYPRE_CMakeUtilities.cmake
@@ -287,6 +287,51 @@ function(setup_tpl LIBNAME)
   # Note we need to check for "USING" instead of "WITH" because
   # we want to allow for post-processing of build options via cmake
   if(HYPRE_USING_${LIBNAME_UPPER})
+    # If the TPL was already added as a subproject, prefer using the existing target
+    if(${LIBNAME_UPPER} STREQUAL "UMPIRE")
+      # Check if we are auto-fetching Umpire
+      maybe_build_umpire()
+
+      if(TARGET umpire::umpire)
+        # Link privately but propagate include directories so dependents see headers
+        target_link_libraries(${PROJECT_NAME} PRIVATE umpire::umpire)
+        get_target_property(_UMPIRE_INCLUDES umpire::umpire INTERFACE_INCLUDE_DIRECTORIES)
+        if(_UMPIRE_INCLUDES)
+          target_include_directories(${PROJECT_NAME} PUBLIC ${_UMPIRE_INCLUDES})
+        endif()
+        # Ensure C++ standard library is linked for non-MSVC toolchains
+        if(UNIX)
+          target_link_libraries(${PROJECT_NAME} PUBLIC stdc++)
+        endif()
+        fixup_umpire_cuda_runtime()
+        message(STATUS "Found existing Umpire target: umpire::umpire")
+        set(${LIBNAME_UPPER}_FOUND TRUE PARENT_SCOPE)
+        set(HYPRE_NEEDS_CXX TRUE PARENT_SCOPE)
+        message(STATUS "Enabled support for using ${LIBNAME_UPPER}")
+        # Verify C interface headers are present
+        check_umpire_c_interface()
+        return()
+      elseif(TARGET umpire)
+        # Provide the standardized namespace alias if missing
+        add_library(umpire::umpire ALIAS umpire)
+        target_link_libraries(${PROJECT_NAME} PRIVATE umpire::umpire)
+        get_target_property(_UMPIRE_INCLUDES umpire INTERFACE_INCLUDE_DIRECTORIES)
+        if(_UMPIRE_INCLUDES)
+          target_include_directories(${PROJECT_NAME} PUBLIC ${_UMPIRE_INCLUDES})
+        endif()
+        if(UNIX)
+          target_link_libraries(${PROJECT_NAME} PUBLIC stdc++)
+        endif()
+        fixup_umpire_cuda_runtime()
+        message(STATUS "Found existing Umpire target: umpire")
+        set(${LIBNAME_UPPER}_FOUND TRUE PARENT_SCOPE)
+        set(HYPRE_NEEDS_CXX TRUE PARENT_SCOPE)
+        message(STATUS "Enabled support for using ${LIBNAME_UPPER}")
+        # Verify C interface headers are present
+        check_umpire_c_interface()
+        return()
+      endif()
+    endif()
     if(TPL_${LIBNAME_UPPER}_LIBRARIES AND TPL_${LIBNAME_UPPER}_INCLUDE_DIRS)
       # Use specified TPL libraries and include dirs
       foreach(dir ${TPL_${LIBNAME_UPPER}_INCLUDE_DIRS})
@@ -308,6 +353,10 @@ function(setup_tpl LIBNAME)
 
       target_link_libraries(${PROJECT_NAME} PUBLIC ${TPL_${LIBNAME_UPPER}_LIBRARIES})
       target_include_directories(${PROJECT_NAME} PUBLIC ${TPL_${LIBNAME_UPPER}_INCLUDE_DIRS})
+      if(${LIBNAME_UPPER} STREQUAL "UMPIRE")
+        fixup_umpire_cuda_runtime()
+        check_umpire_c_interface()
+      endif()
     else()
       # Use find_package (prefer CONFIG). Provide clearer error for libraries when missing.
       find_package(${LIBNAME} CONFIG)
@@ -317,20 +366,55 @@ function(setup_tpl LIBNAME)
 
         if(${LIBNAME} STREQUAL "caliper")
           set(HYPRE_NEEDS_CXX TRUE PARENT_SCOPE)
+        elseif(${LIBNAME} STREQUAL "umpire")
+          set(HYPRE_NEEDS_CXX TRUE PARENT_SCOPE)
         endif()
 
         if(TARGET ${LIBNAME}::${LIBNAME})
-          target_link_libraries(${PROJECT_NAME} PUBLIC ${LIBNAME}::${LIBNAME})
+          if(${LIBNAME_UPPER} STREQUAL "UMPIRE")
+            target_link_libraries(${PROJECT_NAME} PRIVATE ${LIBNAME}::${LIBNAME})
+            get_target_property(_UMPIRE_INCLUDES ${LIBNAME}::${LIBNAME} INTERFACE_INCLUDE_DIRECTORIES)
+            if(_UMPIRE_INCLUDES)
+              target_include_directories(${PROJECT_NAME} PUBLIC ${_UMPIRE_INCLUDES})
+            endif()
+            fixup_umpire_cuda_runtime()
+          else()
+            target_link_libraries(${PROJECT_NAME} PUBLIC ${LIBNAME}::${LIBNAME})
+          endif()
           message(STATUS "Found ${LIBNAME} target: ${LIBNAME}::${LIBNAME}")
         elseif(TARGET ${LIBNAME})
-          target_link_libraries(${PROJECT_NAME} PUBLIC ${LIBNAME})
+          if(${LIBNAME_UPPER} STREQUAL "UMPIRE")
+            target_link_libraries(${PROJECT_NAME} PRIVATE ${LIBNAME})
+            get_target_property(_UMPIRE_INCLUDES ${LIBNAME} INTERFACE_INCLUDE_DIRECTORIES)
+            if(_UMPIRE_INCLUDES)
+              target_include_directories(${PROJECT_NAME} PUBLIC ${_UMPIRE_INCLUDES})
+            endif()
+            fixup_umpire_cuda_runtime()
+          else()
+            target_link_libraries(${PROJECT_NAME} PUBLIC ${LIBNAME})
+          endif()
           message(STATUS "Found ${LIBNAME} target: ${LIBNAME}")
         else()
           message(FATAL_ERROR "${LIBNAME} target not found. Please check your ${LIBNAME} installation")
         endif()
       else()
         if(${LIBNAME_UPPER} STREQUAL "UMPIRE")
-          message(FATAL_ERROR "\n===============================================================\nUmpire has been enabled for GPU builds to improve performance; However, it could not be found by CMake.\nEnsure Umpire provides a CMake package config so find_package(umpire) succeeds via ONE of the following:\n -Dumpire_ROOT=\"/path-to-umpire-install\" or\n -Dumpire_DIR=\"/path-to-umpire-install/lib/cmake/umpire/\".\nOr provide both options below:\n -DTPL_UMPIRE_INCLUDE_DIRS=\"/path-to-umpire-install/include\"\n -DTPL_UMPIRE_LIBRARIES=\"/path-to-umpire-install/lib/libumpire.so;...\"\nTo opt out (strongly not recommended), set -DHYPRE_ENABLE_UMPIRE=OFF.\n===============================================================")
+          message(FATAL_ERROR
+            "===============================================================\n"
+            "Umpire was requested but could not be found by CMake.\n"
+            "Try one of the following options (in this order):\n"
+            "  1) Auto-build Umpire (recommended):\n"
+            "     -DHYPRE_BUILD_UMPIRE=ON\n\n"
+            "  2) Provide a CMake package config for Umpire:\n"
+            "     -Dumpire_ROOT=\"/path-to-umpire-install\"   (or)\n"
+            "     -Dumpire_DIR=\"/path-to-umpire-install/lib/cmake/umpire\"\n\n"
+            "  3) Provide explicit include and library paths:\n"
+            "     -DTPL_UMPIRE_INCLUDE_DIRS=\"/path-to-umpire-install/include\"\n"
+            "     -DTPL_UMPIRE_LIBRARIES=\"/path-to-umpire-install/lib/libumpire.so;...\"\n\n"
+            "To opt out (not recommended for GPU builds), set:\n"
+            "  -DHYPRE_ENABLE_UMPIRE=OFF\n"
+            "==============================================================="
+          )
         else()
           message(FATAL_ERROR "${LIBNAME_UPPER} target not found. Please check your ${LIBNAME_UPPER} installation")
         endif()
@@ -350,6 +434,11 @@ function(setup_tpl LIBNAME)
     endif()
 
     set(${LIBNAME_UPPER}_FOUND TRUE PARENT_SCOPE)
+
+    # Run C interface check when Umpire is enabled and found via any path
+    if(${LIBNAME_UPPER} STREQUAL "UMPIRE")
+      check_umpire_c_interface()
+    endif()
   endif()
 endfunction()
 
@@ -395,6 +484,247 @@ function(setup_tpl_or_internal LIB_NAME)
   endif()
 endfunction()
 
+# Verify that Umpire provides the C interface headers by compiling a tiny C program
+function(check_umpire_c_interface)
+  if(NOT HYPRE_ENABLE_UMPIRE)
+    return()
+  endif()
+
+  # Gather include directories for Umpire
+  set(_umpire_includes)
+  if(TARGET umpire::umpire)
+    get_target_property(_umpire_includes umpire::umpire INTERFACE_INCLUDE_DIRECTORIES)
+  elseif(TARGET umpire)
+    get_target_property(_umpire_includes umpire INTERFACE_INCLUDE_DIRECTORIES)
+  elseif(TPL_UMPIRE_INCLUDE_DIRS)
+    set(_umpire_includes ${TPL_UMPIRE_INCLUDE_DIRS})
+  endif()
+
+  if(NOT _umpire_includes)
+    # Try to locate the header path as a last resort
+    find_path(_umpire_hdr_dir
+      NAMES umpire/interface/c_fortran/umpire.h
+      HINTS ${HYPRE_DEPENDENCY_DIRS}
+    )
+    if(_umpire_hdr_dir)
+      list(APPEND _umpire_includes ${_umpire_hdr_dir})
+    endif()
+
+  endif()
+
+
+  include(CheckCSourceCompiles)
+
+  # Preserve and set required includes for the compile test
+  set(_old_required_includes "${CMAKE_REQUIRED_INCLUDES}")
+  set(CMAKE_REQUIRED_INCLUDES ${_umpire_includes})
+
+  set(_code "#include \"umpire/interface/c_fortran/umpire.h\"\nint main(void) { umpire_resourcemanager rm; (void)rm; return 0; }")
+  check_c_source_compiles("${_code}" UMPIRE_HAS_C_INTERFACE)
+
+  # Restore CMAKE_REQUIRED_INCLUDES
+  set(CMAKE_REQUIRED_INCLUDES "${_old_required_includes}")
+
+  if(NOT UMPIRE_HAS_C_INTERFACE)
+    message(FATAL_ERROR
+      "Umpire does not appear to provide the C interface headers.\n"
+      "Failed to compile a test including 'umpire/interface/c_fortran/umpire.h'.\n"
+      "Ensure Umpire is built with its C interface enabled (e.g., -DUMPIRE_ENABLE_C=ON) and that headers are visible in the include path.\n"
+      "For auto-build, try enabling the hypre build option -DHYPRE_BUILD_UMPIRE=ON.\n"
+      "For manual Umpire builds, see https://hypre.readthedocs.io/en/latest/ch-misc.html#building-umpire\n")
+  else()
+    message(STATUS "Verified Umpire C interface headers are available.")
+  endif()
+endfunction()
+
+# Fix up BLT/Umpire CUDA runtime linkage to use CUDA::cudart instead of legacy cuda_runtime
+function(fixup_umpire_cuda_runtime)
+  # Ensure BLT 'cuda_runtime' interface resolves to CUDA::cudart so shared links do not emit legacy -lcuda_runtime
+  if(HYPRE_ENABLE_CUDA)
+    find_package(CUDAToolkit REQUIRED)
+    if(TARGET cuda_runtime)
+      get_target_property(_iface cuda_runtime INTERFACE_LINK_LIBRARIES)
+      if(_iface)
+        set(_fixed_iface)
+        foreach(_lib IN LISTS _iface)
+          if(_lib STREQUAL "cuda_runtime")
+            list(APPEND _fixed_iface CUDA::cudart)
+          else()
+            list(APPEND _fixed_iface ${_lib})
+          endif()
+        endforeach()
+        set_target_properties(cuda_runtime PROPERTIES INTERFACE_LINK_LIBRARIES "${_fixed_iface}")
+      else()
+        target_link_libraries(cuda_runtime INTERFACE CUDA::cudart)
+      endif()
+      if(NOT TARGET blt::cuda_runtime)
+        add_library(blt::cuda_runtime ALIAS cuda_runtime)
+      endif()
+    else()
+      add_library(cuda_runtime INTERFACE IMPORTED)
+      target_link_libraries(cuda_runtime INTERFACE CUDA::cudart)
+      add_library(blt::cuda_runtime ALIAS cuda_runtime)
+    endif()
+
+    # Replace any legacy 'cuda_runtime' link items on umpire/camp targets with CUDA::cudart
+    foreach(_tgt IN ITEMS camp umpire umpire_resource umpire_strategy umpire_op umpire_event umpire_util umpire_interface)
+      if(TARGET ${_tgt})
+        get_target_property(_ll ${_tgt} LINK_LIBRARIES)
+        if(_ll)
+          set(_new_ll)
+          foreach(_l IN LISTS _ll)
+            if(_l STREQUAL "cuda_runtime")
+              list(APPEND _new_ll CUDA::cudart)
+            else()
+              list(APPEND _new_ll ${_l})
+            endif()
+          endforeach()
+          set_target_properties(${_tgt} PROPERTIES LINK_LIBRARIES "${_new_ll}")
+        endif()
+
+        get_target_property(_ill ${_tgt} INTERFACE_LINK_LIBRARIES)
+        if(_ill)
+          set(_new_ill)
+          foreach(_l IN LISTS _ill)
+            if(_l STREQUAL "cuda_runtime")
+              list(APPEND _new_ill CUDA::cudart)
+            else()
+              list(APPEND _new_ill ${_l})
+            endif()
+          endforeach()
+          set_target_properties(${_tgt} PROPERTIES INTERFACE_LINK_LIBRARIES "${_new_ill}")
+        endif()
+      endif()
+    endforeach()
+  endif()
+endfunction()
+
+# Optionally fetch and build Umpire prior to configuring hypre's TPLs
+function(maybe_build_umpire)
+  if(NOT HYPRE_BUILD_UMPIRE)
+    return()
+  endif()
+
+  # Only auto-build Umpire when a GPU backend is enabled, unless the user explicitly enabled it
+  if(NOT (HYPRE_ENABLE_CUDA OR HYPRE_ENABLE_HIP OR HYPRE_ENABLE_SYCL))
+    if(NOT HYPRE_ENABLE_UMPIRE)
+      message(STATUS "Skipping Umpire auto-build: GPU backend is not enabled and HYPRE_ENABLE_UMPIRE is OFF")
+      return()
+    endif()
+  endif()
+
+  # If user already provided Umpire or it was added, skip
+  if(TPL_UMPIRE_LIBRARIES OR TPL_UMPIRE_INCLUDE_DIRS OR TARGET umpire::umpire OR TARGET umpire)
+    message(STATUS "Umpire already provided. Skipping auto-build.")
+    return()
+  endif()
+
+  # Respect explicit user disabling of Umpire; otherwise enable it for GPU builds only
+  if(NOT HYPRE_ENABLE_UMPIRE)
+    if(HYPRE_ENABLE_CUDA OR HYPRE_ENABLE_HIP OR HYPRE_ENABLE_SYCL)
+      if(NOT HYPRE_USER_SET_HYPRE_ENABLE_UMPIRE)
+        set(HYPRE_ENABLE_UMPIRE ON CACHE BOOL "Use Umpire Allocator" FORCE)
+        set(HYPRE_USING_UMPIRE ON CACHE INTERNAL "")
+      else()
+        message(WARNING "HYPRE_BUILD_UMPIRE=ON but HYPRE_ENABLE_UMPIRE was explicitly set by user to OFF. Proceeding will enable it due to GPU build.")
+        set(HYPRE_ENABLE_UMPIRE ON CACHE BOOL "Use Umpire Allocator" FORCE)
+        set(HYPRE_USING_UMPIRE ON CACHE INTERNAL "")
+      endif()
+    endif()
+  endif()
+
+  include(FetchContent)
+
+  # Determine version/tag for Umpire
+  set(_umpire_tag "${HYPRE_UMPIRE_VERSION}")
+  if(_umpire_tag STREQUAL "latest")
+    # Default to a recent release if auto-detection is not desired here
+    set(_umpire_tag "v2025.09.0")
+  endif()
+
+  # Configure Umpire build options according to hypre needs (one canonical block)
+  set(UMPIRE_ENABLE_C              ON  CACHE BOOL "Enable C interface in Umpire" FORCE)
+  set(UMPIRE_ENABLE_TOOLS          OFF CACHE BOOL "Disable Umpire tools" FORCE)
+  set(ENABLE_BENCHMARKS            OFF CACHE BOOL "Disable Umpire benchmarks" FORCE)
+  set(ENABLE_EXAMPLES              OFF CACHE BOOL "Disable Umpire examples" FORCE)
+  set(ENABLE_DOCS                  OFF CACHE BOOL "Disable Umpire docs" FORCE)
+  set(ENABLE_TESTS                 OFF CACHE BOOL "Disable Umpire tests" FORCE)
+  set(ENABLE_CUDA ${HYPRE_ENABLE_CUDA} CACHE BOOL "Enable CUDA in Umpire" FORCE)
+  set(ENABLE_HIP  ${HYPRE_ENABLE_HIP}  CACHE BOOL "Enable HIP in Umpire" FORCE)
+  set(ENABLE_SYCL ${HYPRE_ENABLE_SYCL} CACHE BOOL "Enable SYCL in Umpire" FORCE)
+
+  # Ensure Umpire installs to the same prefix as hypre
+  set(CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}" CACHE PATH "Install prefix" FORCE)
+
+  # Ensure CUDA version is visible to BLT/camp in the subproject when CUDA is enabled
+  if(HYPRE_ENABLE_CUDA)
+    if(DEFINED CUDAToolkit_VERSION)
+      set(CUDA_VERSION "${CUDAToolkit_VERSION}" CACHE STRING "CUDA toolkit version for subprojects" FORCE)
+      set(CUDA_VERSION_STRING "${CUDAToolkit_VERSION}" CACHE STRING "CUDA toolkit version string for subprojects" FORCE)
+    elseif(DEFINED CMAKE_CUDA_COMPILER_VERSION)
+      set(CUDA_VERSION "${CMAKE_CUDA_COMPILER_VERSION}" CACHE STRING "CUDA toolkit version for subprojects" FORCE)
+      set(CUDA_VERSION_STRING "${CMAKE_CUDA_COMPILER_VERSION}" CACHE STRING "CUDA toolkit version string for subprojects" FORCE)
+    endif()
+    # Also ensure CUDA include dirs are visible to subprojects that compile host C++ with CUDA headers
+    if(DEFINED CUDAToolkit_INCLUDE_DIRS)
+      include_directories(BEFORE SYSTEM ${CUDAToolkit_INCLUDE_DIRS})
+    endif()
+  endif()
+
+  # Fetch Umpire with its submodules using FetchContent (populate only)
+  set(FETCHCONTENT_QUIET OFF)
+  FetchContent_Declare(
+    umpire
+    GIT_REPOSITORY https://github.com/LLNL/Umpire.git
+    GIT_TAG        ${_umpire_tag}
+    GIT_SHALLOW    TRUE
+    GIT_SUBMODULES blt;src/tpl/umpire/camp;src/tpl/umpire/fmt
+    GIT_PROGRESS   TRUE
+  )
+  FetchContent_Populate(umpire)
+
+  # Sanitize version placeholders in config.hpp.in to avoid leading-zero octal (e.g., 09)
+  set(_src_dir "${umpire_SOURCE_DIR}")
+  set(_bld_dir "${CMAKE_BINARY_DIR}/_deps/umpire-build")
+  file(MAKE_DIRECTORY "${_bld_dir}")
+  set(_umpire_cfg_in "${_src_dir}/src/umpire/config.hpp.in")
+  if(EXISTS "${_umpire_cfg_in}")
+    string(REGEX MATCH "^v?([0-9]+)\.([0-9]+)\.([0-9]+)" _ver_match "${_umpire_tag}")
+    if(CMAKE_MATCH_COUNT GREATER 0)
+      set(_umaj "${CMAKE_MATCH_1}")
+      set(_umin "${CMAKE_MATCH_2}")
+      set(_upat "${CMAKE_MATCH_3}")
+      string(REGEX REPLACE "^0+" "" _umin "${_umin}")
+      if(_umin STREQUAL "")
+        set(_umin "0")
+      endif()
+      string(REGEX REPLACE "^0+" "" _upat "${_upat}")
+      if(_upat STREQUAL "")
+        set(_upat "0")
+      endif()
+      file(READ "${_umpire_cfg_in}" _cfg_content)
+      string(REPLACE "@Umpire_VERSION_MAJOR@" "${_umaj}" _cfg_content "${_cfg_content}")
+      string(REPLACE "@Umpire_VERSION_MINOR@" "${_umin}" _cfg_content "${_cfg_content}")
+      string(REPLACE "@Umpire_VERSION_PATCH@" "${_upat}" _cfg_content "${_cfg_content}")
+      file(WRITE "${_umpire_cfg_in}" "${_cfg_content}")
+      message(STATUS "Sanitized Umpire config.hpp.in version placeholders: ${_umaj}.${_umin}.${_upat}")
+    endif()
+  endif()
+
+  # Add Umpire as a subproject now that sources are sanitized
+  add_subdirectory("${_src_dir}" "${_bld_dir}")
+
+  # Fix up CUDA runtime linkage to use CUDA::cudart instead of legacy cuda_runtime
+  fixup_umpire_cuda_runtime()
+
+  # Create the namespaced alias if necessary for consistent linkage
+  if(TARGET umpire AND NOT TARGET umpire::umpire)
+    add_library(umpire::umpire ALIAS umpire)
+  endif()
+
+  message(STATUS "Umpire will be built from sources (tag: ${_umpire_tag}) and installed into: ${CMAKE_INSTALL_PREFIX}")
+endfunction()
+
 # Function to setup FEI (to be phased out)
 function(setup_fei)
   if (HYPRE_USING_FEI)
@@ -442,11 +772,17 @@ function(add_hypre_executable SRC_FILE DEP_SRC_FILE)
     get_filename_component(DEP_SRC_FILENAME ${DEP_SRC_FILE} NAME)
   endif ()
 
-  # If CUDA is enabled, tag source files to be compiled with nvcc.
+  # If CUDA is enabled, only tag sources with .cu extension to be compiled with nvcc.
   if (HYPRE_USING_CUDA)
-    set_source_files_properties(${SRC_FILENAME} PROPERTIES LANGUAGE CUDA)
+    get_filename_component(SRC_EXT ${SRC_FILENAME} EXT)
+    if (SRC_EXT STREQUAL ".cu")
+      set_source_files_properties(${SRC_FILENAME} PROPERTIES LANGUAGE CUDA)
+    endif ()
     if (DEP_SRC_FILE)
-       set_source_files_properties(${DEP_SRC_FILENAME} PROPERTIES LANGUAGE CUDA)
+      get_filename_component(DEP_SRC_EXT ${DEP_SRC_FILENAME} EXT)
+      if (DEP_SRC_EXT STREQUAL ".cu")
+        set_source_files_properties(${DEP_SRC_FILENAME} PROPERTIES LANGUAGE CUDA)
+      endif ()
     endif ()
   endif ()
 
@@ -738,3 +1074,4 @@ macro(setup_mixed_precision_compilation module_name)
     $<TARGET_OBJECTS:${module_name}_ldbl>
   )
 endmacro()
+
diff --git a/src/config/configure.in b/src/config/configure.in
index 93778d4fb..5d5e35bea 100644
--- a/src/config/configure.in
+++ b/src/config/configure.in
@@ -768,7 +768,7 @@ AS_HELP_STRING([--with-MPI-libs=LIBS],
                 --with-MPI-include --with-MPI-libs and --with-MPI-lib-dirs
                 must be used together.]),
 [for mpi_lib in $withval; do
-    MPILIBS+=" -l$mpi_lib"
+    MPILIBS="$MPILIBS -l$mpi_lib"
  done;
  hypre_user_chose_mpi=yes]
 )
@@ -781,7 +781,7 @@ AS_HELP_STRING([--with-MPI-lib-dirs=DIRS],
                 The options --with-MPI-include --with-MPI-libs and
                 --with-MPI-lib-dirs must be used together.]),
 [for mpi_lib_dir in $withval; do
-    MPILIBDIRS+=" -L$mpi_lib_dir"
+    MPILIBDIRS="-L$mpi_lib_dir $MPILIBDIRS"
  done;
  hypre_user_chose_mpi=yes]
 )
@@ -859,7 +859,7 @@ dnl    if test $libprefix = "-L"
 dnl    then
 dnl       BLASLIBDIRS="$blas_lib $BLASLIBDIRS"
 dnl    else
-       BLASLIBS+=" $blas_lib"
+       BLASLIBS="$BLASLIBS $blas_lib"
 dnl    fi
  done;
  hypre_user_chose_blas=yes]
@@ -871,7 +871,7 @@ AS_HELP_STRING([--with-blas-libs=LIBS],
                 needed for BLAS (base name only). The options --with-blas-libs and
                 --with-blas-lib-dirs must be used together.]),
 [for blas_lib in $withval; do
-    BLASLIBS+=" -l$blas_lib"
+    BLASLIBS="$BLASLIBS -l$blas_lib"
  done;
  hypre_user_chose_blas=yes
  hypre_blas_lib_old_style=yes]
@@ -885,7 +885,7 @@ AS_HELP_STRING([--with-blas-lib-dirs=DIRS],
                 The  options --with-blas-libs and --with-blas-lib-dirs
                 must be used together.]),
 [for blas_lib_dir in $withval; do
-    BLASLIBDIRS+=" -L$blas_lib_dir"
+    BLASLIBDIRS="-L$blas_lib_dir $BLASLIBDIRS"
  done;
  hypre_user_chose_blas=yes
  hypre_blas_lib_dir_old_style=yes]
@@ -903,7 +903,7 @@ dnl    if test $libprefix = "-L"
 dnl    then
 dnl       LAPACKLIBDIRS="$lapack_lib $LAPACKLIBDIRS"
 dnl    else
-       LAPACKLIBS+=" $lapack_lib"
+       LAPACKLIBS="$LAPACKLIBS $lapack_lib"
 dnl    fi
  done;
  hypre_user_chose_lapack=yes]
@@ -915,7 +915,7 @@ AS_HELP_STRING([--with-lapack-libs=LIBS],
                 needed for LAPACK (base name only). The options --with-lapack-libs and
                 --with-lapack-lib-dirs must be used together.]),
 [for lapack_lib in $withval; do
-    LAPACKLIBS+=" -l$lapack_lib"
+    LAPACKLIBS="$LAPACKLIBS -l$lapack_lib"
  done;
  hypre_user_chose_lapack=yes
  hypre_lapack_lib_old_style=yes]
@@ -929,7 +929,7 @@ AS_HELP_STRING([--with-lapack-lib-dirs=DIRS],
                 The options --with-lapack-libs and --with-lapack-lib-dirs
                 must be used together.]),
 [for lapack_lib_dir in $withval; do
-    LAPACKLIBDIRS+=" -L$lapack_lib_dir"
+    LAPACKLIBDIRS="-L$lapack_lib_dir $LAPACKLIBDIRS"
  done;
  hypre_user_chose_lapack=yes
  hypre_lapack_lib_dir_old_style=yes]
@@ -1077,7 +1077,7 @@ AS_HELP_STRING([--with-superlu-lib=LIBS],
                [LIBS is space-separated linkable list (enclosed in quotes) of libraries
                 needed for SuperLU. OK to use -L and -l flags in the list]),
 [for superlu_lib in $withval; do
-    SUPERLU_LIBS+=" $superlu_lib"
+    SUPERLU_LIBS="$SUPERLU_LIBS $superlu_lib"
  done]
 )
 
@@ -1109,7 +1109,7 @@ AS_HELP_STRING([--with-dsuperlu-lib=LIBS],
                [LIBS is space-separated linkable list (enclosed in quotes) of libraries
                 needed for DSuperLU. OK to use -L and -l flags in the list]),
 [for dsuperlu_lib in $withval; do
-    DSUPERLU_LIBS+=" $dsuperlu_lib"
+    DSUPERLU_LIBS="$DSUPERLU_LIBS $dsuperlu_lib"
  done]
 )
 
@@ -1433,7 +1433,7 @@ AS_HELP_STRING([--with-raja-lib=LIBS],
                [LIBS is space-separated linkable list (enclosed in quotes) of libraries
                 needed for RAJA. OK to use -L and -l flags in the list]),
 [for raja_lib in $withval; do
-       HYPRE_RAJA_LIB+=" $raja_lib"
+       HYPRE_RAJA_LIB="$raja_lib $HYPRE_RAJA_LIB"
  done;
 hypre_user_chose_raja=yes]
 )
@@ -1444,7 +1444,7 @@ AS_HELP_STRING([--with-raja-libs=LIBS],
                 needed for RAJA (base name only). The options --with-raja-libs and
                 --with-raja-lib-dirs must be used together.]),
 [for raja_lib in $withval; do
-    HYPRE_RAJA_LIB+=" -l$raja_lib"
+    HYPRE_RAJA_LIB="-l$raja_lib $HYPRE_RAJA_LIB"
  done;
 hypre_user_chose_raja=yes]
 )
@@ -1457,7 +1457,7 @@ AS_HELP_STRING([--with-raja-lib-dirs=DIRS],
                 The  options --with-raja-libs and --raja-blas-lib-dirs
                 must be used together.]),
 [for raja_lib_dir in $withval; do
-    HYPRE_RAJA_LIB_DIR+=" -L$raja_lib_dir"
+    HYPRE_RAJA_LIB_DIR="-L$raja_lib_dir $HYPRE_RAJA_LIB_DIR"
  done;
  hypre_user_chose_raja=yes]
 )
@@ -1491,7 +1491,7 @@ AS_HELP_STRING([--with-kokkos-lib=LIBS],
                [LIBS is space-separated linkable list (enclosed in quotes) of libraries
                 needed for KOKKOS. OK to use -L and -l flags in the list]),
 [for kokkos_lib in $withval; do
-       HYPRE_KOKKOS_LIB+=" $kokkos_lib"
+       HYPRE_KOKKOS_LIB="$kokkos_lib $HYPRE_KOKKOS_LIB"
  done;
 hypre_user_chose_kokkos=yes]
 )
@@ -1502,7 +1502,7 @@ AS_HELP_STRING([--with-kokkos-libs=LIBS],
                 needed for KOKKOS (base name only). The options --with-kokkos-libs and
                 --with-kokkos-dirs must be used together.]),
 [for kokkos_lib in $withval; do
-    HYPRE_KOKKOS_LIB+=" -l$kokkos_lib"
+    HYPRE_KOKKOS_LIB="-l$kokkos_lib $HYPRE_KOKKOS_LIB"
  done;
 hypre_user_chose_kokkos=yes]
 )
@@ -1515,7 +1515,7 @@ AS_HELP_STRING([--with-kokkos-lib-dirs=DIRS],
                 The  options --with-kokkos-libs and --with-kokkos-dirs
                 must be used together.]),
 [for kokkos_lib_dir in $withval; do
-    HYPRE_KOKKOS_LIB_DIR+=" -L$kokkos_lib_dir"
+    HYPRE_KOKKOS_LIB_DIR="-L$kokkos_lib_dir $HYPRE_KOKKOS_LIB_DIR"
  done;
 hypre_user_chose_kokkos=yes]
 )
@@ -1596,7 +1596,7 @@ AS_HELP_STRING([--with-umpire-lib=LIBS],
                [LIBS is space-separated linkable list (enclosed in quotes) of libraries
                 needed for UMPIRE. OK to use -L and -l flags in the list]),
 [for umpire_lib in $withval; do
-       HYPRE_UMPIRE_LIB+=" $umpire_lib"
+       HYPRE_UMPIRE_LIB="$umpire_lib $HYPRE_UMPIRE_LIB"
  done;
  hypre_user_gave_umpire_lib=yes]
 )
@@ -1607,7 +1607,7 @@ AS_HELP_STRING([--with-umpire-libs=LIBS],
                 needed for UMPIRE (base name only). The options --with-umpire-libs and
                 --with-umpire-dirs must be used together.]),
 [for umpire_lib in $withval; do
-    HYPRE_UMPIRE_LIB+=" -l$umpire_lib"
+    HYPRE_UMPIRE_LIB="-l$umpire_lib $HYPRE_UMPIRE_LIB"
  done;
  hypre_user_gave_umpire_libs=yes]
 )
@@ -1620,8 +1620,8 @@ AS_HELP_STRING([--with-umpire-lib-dirs=DIRS],
                 The  options --with-umpire-libs and --with-umpire-dirs
                 must be used together.]),
 [for umpire_lib_dir in $withval; do
-    HYPRE_UMPIRE_LIB_DIR+=" -L$umpire_lib_dir"
-    HYPRE_UMPIRE_RPATH+=" -Wl,-rpath,${umpire_lib_dir}"
+    HYPRE_UMPIRE_LIB_DIR="-L$umpire_lib_dir $HYPRE_UMPIRE_LIB_DIR"
+    HYPRE_UMPIRE_RPATH="${HYPRE_UMPIRE_RPATH} -Wl,-rpath,${umpire_lib_dir}"
  done;
  hypre_user_gave_umpire_lib_dirs=yes]
 )
@@ -1659,7 +1659,7 @@ AS_HELP_STRING([--with-magma-lib=LIBS],
                [LIBS is space-separated linkable list (enclosed in quotes) of libraries
                 needed for MAGMA. OK to use -L and -l flags in the list]),
 [for magma_lib in $withval; do
-    HYPRE_MAGMA_LIB+=" $magma_lib"
+    HYPRE_MAGMA_LIB="$magma_lib $HYPRE_MAGMA_LIB"
  done;
 hypre_user_gave_magma_lib=yes]
 )
@@ -1670,7 +1670,7 @@ AS_HELP_STRING([--with-magma-libs=LIBS],
                 needed for MAGMA (base name only). The options --with-magma-libs and
                 --with-magma-lib-dirs must be used together.]),
 [for magma_lib in $withval; do
-    HYPRE_MAGMA_LIB+=" -l$magma_lib"
+    HYPRE_MAGMA_LIB="-l$magma_lib $HYPRE_MAGMA_LIB"
  done;
 hypre_user_gave_magma_libs=yes]
 )
@@ -1683,7 +1683,7 @@ AS_HELP_STRING([--with-magma-lib-dirs=DIRS],
                 The  options --with-magma-libs and --with-magma-lib-dirs
                 must be used together.]),
 [for magma_lib_dir in $withval; do
-    HYPRE_MAGMA_LIB_DIR+=" -L$magma_lib_dir"
+    HYPRE_MAGMA_LIB_DIR="-L$magma_lib_dir $HYPRE_MAGMA_LIB_DIR"
  done;
 hypre_user_gave_magma_lib_dirs=yes]
 )
@@ -1717,7 +1717,7 @@ AS_HELP_STRING([--with-caliper-lib=LIBS],
                [LIBS is space-separated linkable list (enclosed in quotes) of libraries
                 needed for Caliper. OK to use -L and -l flags in the list]),
 [for caliper_lib in $withval; do
-    CALIPER_LIBS+=" $caliper_lib"
+    CALIPER_LIBS="$CALIPER_LIBS $caliper_lib"
  done;
  hypre_user_gave_caliper_lib=yes]
 )
@@ -1906,7 +1906,7 @@ if test "$hypre_using_mpi" = "no"
 then
    AC_DEFINE(HYPRE_SEQUENTIAL, 1, [Disable MPI, enable serial codes.])
 else
-   AC_HYPRE_CHECK_MPI([LIBS+=" $MPILIBS"])
+   AC_HYPRE_CHECK_MPI([LIBS="$LIBS $MPILIBS"])
    AC_CHECK_FUNCS([MPI_Comm_f2c])
    AC_CACHE_CHECK([whether MPI_Comm_f2c is a macro],
      hypre_cv_func_MPI_Comm_f2c_macro,
@@ -2048,7 +2048,7 @@ then
          AC_DEFINE(HAVE_MLI, 1, [Define to 1 if using MLI])
       fi
    fi
-   AC_CHECK_LIB(stdc++, __gxx_personality_v0, LIBS+=" -lstdc++")
+   AC_CHECK_LIB(stdc++, __gxx_personality_v0, LIBS="$LIBS -lstdc++")
 else
    HYPRE_FEI_SRC_DIR=
    HYPRE_FEI_BASE_DIR=
@@ -2124,7 +2124,7 @@ fi
 dnl *********************************************************************
 dnl * FIND libraries needed to link with hypre
 dnl *********************************************************************
-AC_CHECK_LIB(m, cabs, LIBS+=" -lm")
+AC_CHECK_LIB(m, cabs, LIBS="$LIBS -lm")
 dnl * Commenting this out because it doesn't really behave correctly.
 dnl * This should probably be deleted altogether at some point. (RDF)
 dnl AC_HYPRE_FIND_G2C
@@ -2538,8 +2538,6 @@ then
     if test "x$hypre_using_cuda" = "xyes" || test "x$hypre_using_hip" = "xyes"
     then
       hypre_using_umpire=yes
-      hypre_using_umpire_device=yes
-      hypre_using_umpire_um=yes
       AC_MSG_NOTICE([Enabling Umpire automatically for GPU build (CUDA/HIP) for performance and allocator features. Use --without-umpire to opt out.])
     fi
   fi
@@ -2605,7 +2603,7 @@ However, Umpire include and/or library paths were not provided.
 Provide the following flags as appropriate:
   --with-umpire-include="/path-to-umpire-install/include"
   --with-umpire-lib-dirs="/path-to-umpire-install/lib"
-  --with-umpire-libs="umpire camp"
+  --with-umpire-libs="umpire"  or  --with-umpire-lib="-lumpire"
 
 To opt out (not recommended), configure with --without-umpire.
 ===============================================================])
@@ -2877,8 +2875,8 @@ AS_IF([test x"$hypre_using_sycl" == x"yes"],
               [AC_CHECK_HEADER(["${MKLROOT}/include/mkl.h"],
                                [hypre_found_mkl=yes],
                                AC_MSG_ERROR([unable to find oneMKL ... Ensure that MKLROOT is set]))
-               HYPRE_SYCL_LIBS+=" -qmkl -Wl,-export-dynamic -Wl,--start-group -Wl,--end-group -lsycl -lOpenCL -lpthread -lm -ldl"
-               HYPRE_SYCL_INCL+=" -qmkl -I${DPLROOT}/include -DMKL_ILP64 -I${MKLROOT}/include"
+               HYPRE_SYCL_LIBS="${HYPRE_SYCL_LIBS} -qmkl -Wl,-export-dynamic -Wl,--start-group -Wl,--end-group -lsycl -lOpenCL -lpthread -lm -ldl"
+               HYPRE_SYCL_INCL="${HYPRE_SYCL_INCL} -qmkl -I${DPLROOT}/include -DMKL_ILP64 -I${MKLROOT}/include"
                ])
 
         AS_IF([test x"$hypre_using_onemklsparse" == x"yes"], [AC_DEFINE(HYPRE_USING_ONEMKLSPARSE, 1, [onemkl::SPARSE being used])])
diff --git a/src/configure b/src/configure
index 8f9849e93..e5833b056 100755
--- a/src/configure
+++ b/src/configure
@@ -4207,7 +4207,7 @@ fi
 if test ${with_MPI_libs+y}
 then :
   withval=$with_MPI_libs; for mpi_lib in $withval; do
-    MPILIBS+=" -l$mpi_lib"
+    MPILIBS="$MPILIBS -l$mpi_lib"
  done;
  hypre_user_chose_mpi=yes
 
@@ -4219,7 +4219,7 @@ fi
 if test ${with_MPI_lib_dirs+y}
 then :
   withval=$with_MPI_lib_dirs; for mpi_lib_dir in $withval; do
-    MPILIBDIRS+=" -L$mpi_lib_dir"
+    MPILIBDIRS="-L$mpi_lib_dir $MPILIBDIRS"
  done;
  hypre_user_chose_mpi=yes
 
@@ -4304,7 +4304,7 @@ fi
 if test ${with_blas_lib+y}
 then :
   withval=$with_blas_lib; for blas_lib in $withval; do
-       BLASLIBS+=" $blas_lib"
+       BLASLIBS="$BLASLIBS $blas_lib"
  done;
  hypre_user_chose_blas=yes
 
@@ -4316,7 +4316,7 @@ fi
 if test ${with_blas_libs+y}
 then :
   withval=$with_blas_libs; for blas_lib in $withval; do
-    BLASLIBS+=" -l$blas_lib"
+    BLASLIBS="$BLASLIBS -l$blas_lib"
  done;
  hypre_user_chose_blas=yes
  hypre_blas_lib_old_style=yes
@@ -4329,7 +4329,7 @@ fi
 if test ${with_blas_lib_dirs+y}
 then :
   withval=$with_blas_lib_dirs; for blas_lib_dir in $withval; do
-    BLASLIBDIRS+=" -L$blas_lib_dir"
+    BLASLIBDIRS="-L$blas_lib_dir $BLASLIBDIRS"
  done;
  hypre_user_chose_blas=yes
  hypre_blas_lib_dir_old_style=yes
@@ -4343,7 +4343,7 @@ fi
 if test ${with_lapack_lib+y}
 then :
   withval=$with_lapack_lib; for lapack_lib in $withval; do
-       LAPACKLIBS+=" $lapack_lib"
+       LAPACKLIBS="$LAPACKLIBS $lapack_lib"
  done;
  hypre_user_chose_lapack=yes
 
@@ -4355,7 +4355,7 @@ fi
 if test ${with_lapack_libs+y}
 then :
   withval=$with_lapack_libs; for lapack_lib in $withval; do
-    LAPACKLIBS+=" -l$lapack_lib"
+    LAPACKLIBS="$LAPACKLIBS -l$lapack_lib"
  done;
  hypre_user_chose_lapack=yes
  hypre_lapack_lib_old_style=yes
@@ -4368,7 +4368,7 @@ fi
 if test ${with_lapack_lib_dirs+y}
 then :
   withval=$with_lapack_lib_dirs; for lapack_lib_dir in $withval; do
-    LAPACKLIBDIRS+=" -L$lapack_lib_dir"
+    LAPACKLIBDIRS="-L$lapack_lib_dir $LAPACKLIBDIRS"
  done;
  hypre_user_chose_lapack=yes
  hypre_lapack_lib_dir_old_style=yes
@@ -4540,7 +4540,7 @@ fi
 if test ${with_superlu_lib+y}
 then :
   withval=$with_superlu_lib; for superlu_lib in $withval; do
-    SUPERLU_LIBS+=" $superlu_lib"
+    SUPERLU_LIBS="$SUPERLU_LIBS $superlu_lib"
  done
 
 fi
@@ -4582,7 +4582,7 @@ fi
 if test ${with_dsuperlu_lib+y}
 then :
   withval=$with_dsuperlu_lib; for dsuperlu_lib in $withval; do
-    DSUPERLU_LIBS+=" $dsuperlu_lib"
+    DSUPERLU_LIBS="$DSUPERLU_LIBS $dsuperlu_lib"
  done
 
 fi
@@ -4970,7 +4970,7 @@ fi
 if test ${with_raja_lib+y}
 then :
   withval=$with_raja_lib; for raja_lib in $withval; do
-       HYPRE_RAJA_LIB+=" $raja_lib"
+       HYPRE_RAJA_LIB="$raja_lib $HYPRE_RAJA_LIB"
  done;
 hypre_user_chose_raja=yes
 
@@ -4982,7 +4982,7 @@ fi
 if test ${with_raja_libs+y}
 then :
   withval=$with_raja_libs; for raja_lib in $withval; do
-    HYPRE_RAJA_LIB+=" -l$raja_lib"
+    HYPRE_RAJA_LIB="-l$raja_lib $HYPRE_RAJA_LIB"
  done;
 hypre_user_chose_raja=yes
 
@@ -4994,7 +4994,7 @@ fi
 if test ${with_raja_lib_dirs+y}
 then :
   withval=$with_raja_lib_dirs; for raja_lib_dir in $withval; do
-    HYPRE_RAJA_LIB_DIR+=" -L$raja_lib_dir"
+    HYPRE_RAJA_LIB_DIR="-L$raja_lib_dir $HYPRE_RAJA_LIB_DIR"
  done;
  hypre_user_chose_raja=yes
 
@@ -5034,7 +5034,7 @@ fi
 if test ${with_kokkos_lib+y}
 then :
   withval=$with_kokkos_lib; for kokkos_lib in $withval; do
-       HYPRE_KOKKOS_LIB+=" $kokkos_lib"
+       HYPRE_KOKKOS_LIB="$kokkos_lib $HYPRE_KOKKOS_LIB"
  done;
 hypre_user_chose_kokkos=yes
 
@@ -5046,7 +5046,7 @@ fi
 if test ${with_kokkos_libs+y}
 then :
   withval=$with_kokkos_libs; for kokkos_lib in $withval; do
-    HYPRE_KOKKOS_LIB+=" -l$kokkos_lib"
+    HYPRE_KOKKOS_LIB="-l$kokkos_lib $HYPRE_KOKKOS_LIB"
  done;
 hypre_user_chose_kokkos=yes
 
@@ -5058,7 +5058,7 @@ fi
 if test ${with_kokkos_lib_dirs+y}
 then :
   withval=$with_kokkos_lib_dirs; for kokkos_lib_dir in $withval; do
-    HYPRE_KOKKOS_LIB_DIR+=" -L$kokkos_lib_dir"
+    HYPRE_KOKKOS_LIB_DIR="-L$kokkos_lib_dir $HYPRE_KOKKOS_LIB_DIR"
  done;
 hypre_user_chose_kokkos=yes
 
@@ -5157,7 +5157,7 @@ fi
 if test ${with_umpire_lib+y}
 then :
   withval=$with_umpire_lib; for umpire_lib in $withval; do
-       HYPRE_UMPIRE_LIB+=" $umpire_lib"
+       HYPRE_UMPIRE_LIB="$umpire_lib $HYPRE_UMPIRE_LIB"
  done;
  hypre_user_gave_umpire_lib=yes
 
@@ -5169,7 +5169,7 @@ fi
 if test ${with_umpire_libs+y}
 then :
   withval=$with_umpire_libs; for umpire_lib in $withval; do
-    HYPRE_UMPIRE_LIB+=" -l$umpire_lib"
+    HYPRE_UMPIRE_LIB="-l$umpire_lib $HYPRE_UMPIRE_LIB"
  done;
  hypre_user_gave_umpire_libs=yes
 
@@ -5181,8 +5181,8 @@ fi
 if test ${with_umpire_lib_dirs+y}
 then :
   withval=$with_umpire_lib_dirs; for umpire_lib_dir in $withval; do
-    HYPRE_UMPIRE_LIB_DIR+=" -L$umpire_lib_dir"
-    HYPRE_UMPIRE_RPATH+=" -Wl,-rpath,${umpire_lib_dir}"
+    HYPRE_UMPIRE_LIB_DIR="-L$umpire_lib_dir $HYPRE_UMPIRE_LIB_DIR"
+    HYPRE_UMPIRE_RPATH="${HYPRE_UMPIRE_RPATH} -Wl,-rpath,${umpire_lib_dir}"
  done;
  hypre_user_gave_umpire_lib_dirs=yes
 
@@ -5229,7 +5229,7 @@ fi
 if test ${with_magma_lib+y}
 then :
   withval=$with_magma_lib; for magma_lib in $withval; do
-    HYPRE_MAGMA_LIB+=" $magma_lib"
+    HYPRE_MAGMA_LIB="$magma_lib $HYPRE_MAGMA_LIB"
  done;
 hypre_user_gave_magma_lib=yes
 
@@ -5241,7 +5241,7 @@ fi
 if test ${with_magma_libs+y}
 then :
   withval=$with_magma_libs; for magma_lib in $withval; do
-    HYPRE_MAGMA_LIB+=" -l$magma_lib"
+    HYPRE_MAGMA_LIB="-l$magma_lib $HYPRE_MAGMA_LIB"
  done;
 hypre_user_gave_magma_libs=yes
 
@@ -5253,7 +5253,7 @@ fi
 if test ${with_magma_lib_dirs+y}
 then :
   withval=$with_magma_lib_dirs; for magma_lib_dir in $withval; do
-    HYPRE_MAGMA_LIB_DIR+=" -L$magma_lib_dir"
+    HYPRE_MAGMA_LIB_DIR="-L$magma_lib_dir $HYPRE_MAGMA_LIB_DIR"
  done;
 hypre_user_gave_magma_lib_dirs=yes
 
@@ -5298,7 +5298,7 @@ fi
 if test ${with_caliper_lib+y}
 then :
   withval=$with_caliper_lib; for caliper_lib in $withval; do
-    CALIPER_LIBS+=" $caliper_lib"
+    CALIPER_LIBS="$CALIPER_LIBS $caliper_lib"
  done;
  hypre_user_gave_caliper_lib=yes
 
@@ -8940,7 +8940,7 @@ else
 
 printf "%s\n" "#define HYPRE_HAVE_MPI 1" >>confdefs.h
 
-  LIBS+=" $MPILIBS"
+  LIBS="$LIBS $MPILIBS"
   :
 fi
 
@@ -9753,7 +9753,7 @@ fi
 printf "%s\n" "$ac_cv_lib_stdcpp___gxx_personality_v0" >&6; }
 if test "x$ac_cv_lib_stdcpp___gxx_personality_v0" = xyes
 then :
-  LIBS+=" -lstdc++"
+  LIBS="$LIBS -lstdc++"
 fi
 
 else
@@ -10084,7 +10084,7 @@ fi
 printf "%s\n" "$ac_cv_lib_m_cabs" >&6; }
 if test "x$ac_cv_lib_m_cabs" = xyes
 then :
-  LIBS+=" -lm"
+  LIBS="$LIBS -lm"
 fi
 
 
@@ -10759,8 +10759,6 @@ then
     if test "x$hypre_using_cuda" = "xyes" || test "x$hypre_using_hip" = "xyes"
     then
       hypre_using_umpire=yes
-      hypre_using_umpire_device=yes
-      hypre_using_umpire_um=yes
       { printf "%s\n" "$as_me:${as_lineno-$LINENO}: Enabling Umpire automatically for GPU build (CUDA/HIP) for performance and allocator features. Use --without-umpire to opt out." >&5
 printf "%s\n" "$as_me: Enabling Umpire automatically for GPU build (CUDA/HIP) for performance and allocator features. Use --without-umpire to opt out." >&6;}
     fi
@@ -10839,7 +10837,7 @@ However, Umpire include and/or library paths were not provided.
 Provide the following flags as appropriate:
   --with-umpire-include=\"/path-to-umpire-install/include\"
   --with-umpire-lib-dirs=\"/path-to-umpire-install/lib\"
-  --with-umpire-libs=\"umpire camp\"
+  --with-umpire-libs=\"umpire\"  or  --with-umpire-lib=\"-lumpire\"
 
 To opt out (not recommended), configure with --without-umpire.
 ===============================================================" "$LINENO" 5
@@ -11123,8 +11121,8 @@ else $as_nop
   as_fn_error $? "unable to find oneMKL ... Ensure that MKLROOT is set" "$LINENO" 5
 fi
 
-               HYPRE_SYCL_LIBS+=" -qmkl -Wl,-export-dynamic -Wl,--start-group -Wl,--end-group -lsycl -lOpenCL -lpthread -lm -ldl"
-               HYPRE_SYCL_INCL+=" -qmkl -I${DPLROOT}/include -DMKL_ILP64 -I${MKLROOT}/include"
+               HYPRE_SYCL_LIBS="${HYPRE_SYCL_LIBS} -qmkl -Wl,-export-dynamic -Wl,--start-group -Wl,--end-group -lsycl -lOpenCL -lpthread -lm -ldl"
+               HYPRE_SYCL_INCL="${HYPRE_SYCL_INCL} -qmkl -I${DPLROOT}/include -DMKL_ILP64 -I${MKLROOT}/include"
 
 fi
 
diff --git a/src/docs/usr-manual/ch-misc.rst b/src/docs/usr-manual/ch-misc.rst
index 2b9e0a3bd..44bec7cf7 100644
--- a/src/docs/usr-manual/ch-misc.rst
+++ b/src/docs/usr-manual/ch-misc.rst
@@ -499,9 +499,10 @@ follow these steps:
 
 .. code-block:: bash
 
-   git clone --recursive https://github.com/LLNL/Umpire.git
-
+   git clone https://github.com/LLNL/Umpire.git
    cd Umpire
+   git submodule update --init
+
    cmake -S . -B build \
      -DUMPIRE_ENABLE_C=ON \
      -DUMPIRE_ENABLE_TOOLS=OFF \
@@ -529,7 +530,7 @@ or provide it to hypre at configure time. For example:
 
    ./configure --with-umpire-include=/path-to-umpire-install/include \
                --with-umpire-lib-dirs=/path-to-umpire-install/lib \
-               --with-umpire-libs="umpire camp" \
+               --with-umpire-libs="camp umpire" \
 
 or with CMake:
 
diff --git a/src/parcsr_ls/par_mgr_device.c b/src/parcsr_ls/par_mgr_device.c
index c8e5b6580..99ffe1872 100644
--- a/src/parcsr_ls/par_mgr_device.c
+++ b/src/parcsr_ls/par_mgr_device.c
@@ -460,7 +460,7 @@ hypreGPUKernel_CSRMatrixExtractBlockDiagMarked( hypre_DeviceItem  &item,
    HYPRE_Int   lane = hypre_gpu_get_lane_id<1>(item);
    HYPRE_Int   bidx;
    HYPRE_Int   lidx;
-   HYPRE_Int   i, ii, j, pj, qj;
+   HYPRE_Int   i, ii, j, pj, qj, k;
    HYPRE_Int   col;
 
    /* Grid-stride loop over block matrix rows */
@@ -486,16 +486,17 @@ hypreGPUKernel_CSRMatrixExtractBlockDiagMarked( hypre_DeviceItem  &item,
             /* Loop over columns */
             for (j = pj + lane; j < qj; j += HYPRE_WARP_SIZE)
             {
-               col = read_only_load(A_j + j);
+               k = read_only_load(A_j + j);
+               col = A_j[k];
 
                if (marker[col] == marker_val)
                {
                   if ((col >= ii) &&
                       (col <  ii + blk_size) &&
-                      (fabs(A_a[j]) > HYPRE_REAL_MIN))
+                      (fabs(A_a[k]) > HYPRE_REAL_MIN))
                   {
                      /* batch offset + column offset + row offset */
-                     B_a[marker_indices[ii] * blk_size + (col - ii) * blk_size + lidx] = A_a[j];
+                     B_a[marker_indices[ii] * blk_size + (col - ii) * blk_size + lidx] = A_a[k];
                   }
                }
             }
@@ -661,7 +662,6 @@ hypre_ParCSRMatrixExtractBlockDiagDevice( hypre_ParCSRMatrix   *A,
    if (num_points % blk_size)
    {
       hypre_error_w_msg(HYPRE_ERROR_GENERIC, "TODO! num_points % blk_size != 0");
-      hypre_TFree(blk_row_indices, HYPRE_MEMORY_DEVICE);
       hypre_GpuProfilingPopRange();
 
       return hypre_error_flag;
@@ -702,9 +702,9 @@ hypre_ParCSRMatrixExtractBlockDiagDevice( hypre_ParCSRMatrix   *A,
       tmpdiag     = hypre_TAlloc(HYPRE_Complex, bdiag_size, HYPRE_MEMORY_DEVICE);
       diag_aop    = hypre_TAlloc(HYPRE_Complex *, num_blocks, HYPRE_MEMORY_DEVICE);
 #if defined(HYPRE_USING_ONEMKLBLAS)
-      pivots      = hypre_CTAlloc(std::int64_t, num_blocks * blk_size, HYPRE_MEMORY_DEVICE);
+      pivots      = hypre_CTAlloc(std::int64_t, num_rows * blk_size, HYPRE_MEMORY_DEVICE);
 #else
-      pivots      = hypre_CTAlloc(HYPRE_Int, num_blocks * blk_size, HYPRE_MEMORY_DEVICE);
+      pivots      = hypre_CTAlloc(HYPRE_Int, num_rows * blk_size, HYPRE_MEMORY_DEVICE);
       tmpdiag_aop = hypre_TAlloc(HYPRE_Complex *, num_blocks, HYPRE_MEMORY_DEVICE);
       info        = hypre_CTAlloc(HYPRE_Int, num_blocks, HYPRE_MEMORY_DEVICE);
 #if defined (HYPRE_DEBUG)
@@ -732,11 +732,10 @@ hypre_ParCSRMatrixExtractBlockDiagDevice( hypre_ParCSRMatrix   *A,
                                                   info,
                                                   num_blocks));
 #elif defined(HYPRE_USING_ROCSOLVER)
-      /* Use diag_aop to store factors in B_diag_data. This is necessary for subsequent in-place call to getri. */
       HYPRE_ROCSOLVER_CALL(hypre_rocsolver_getrf_batched(hypre_HandleVendorSolverHandle(hypre_handle()),
                                                          blk_size,
                                                          blk_size,
-                                                         diag_aop,
+                                                         tmpdiag_aop,
                                                          blk_size,
                                                          pivots,
                                                          blk_size,
@@ -766,11 +765,10 @@ hypre_ParCSRMatrixExtractBlockDiagDevice( hypre_ParCSRMatrix   *A,
       work_size  = hypre_max(work_sizes[0], work_sizes[1]);
       scratchpad = hypre_TAlloc(HYPRE_Complex, work_size, HYPRE_MEMORY_DEVICE);
 
-      /* NOTE: This call uses the strided version here so we use B_diag_data directly instead of *diag_aop. -DOK*/ 
       HYPRE_ONEMKL_CALL( oneapi::mkl::lapack::getrf_batch( *hypre_HandleComputeStream(hypre_handle()),
                                                            (std::int64_t) blk_size, // std::int64_t m,
                                                            (std::int64_t) blk_size, // std::int64_t n,
-                                                           B_diag_data, // T *a,
+                                                           *diag_aop, // T *a,
                                                            (std::int64_t) blk_size, // std::int64_t lda,
                                                            (std::int64_t) bs2, // std::int64_t stride_a,
                                                            pivots, // std::int64_t *ipiv,
@@ -816,20 +814,18 @@ hypre_ParCSRMatrixExtractBlockDiagDevice( hypre_ParCSRMatrix   *A,
                                                   info,
                                                   num_blocks));
 #elif defined(HYPRE_USING_ROCSOLVER)
-      /* Note: This is an in-place operation and overwrites factorization with batched inverses. -DOK */
       HYPRE_ROCSOLVER_CALL(hypre_rocsolver_getri_batched(hypre_HandleVendorSolverHandle(hypre_handle()),
                                                          blk_size,
-                                                         diag_aop,
+                                                         tmpdiag_aop,
                                                          blk_size,
                                                          pivots,
                                                          blk_size,
                                                          info,
                                                          num_blocks));
 #elif defined(HYPRE_USING_ONEMKLBLAS)
-      /* NOTE: This call uses the strided version here so we use B_diag_data directly instead of *diag_aop. -DOK*/ 
       HYPRE_ONEMKL_CALL( oneapi::mkl::lapack::getri_batch( *hypre_HandleComputeStream(hypre_handle()),
                                                            (std::int64_t) blk_size, // std::int64_t n,
-                                                           B_diag_data, // T *a,
+                                                           *diag_aop, // T *a,
                                                            (std::int64_t) blk_size, // std::int64_t lda,
                                                            (std::int64_t) bs2, // std::int64_t stride_a,
                                                            pivots, // std::int64_t *ipiv,
diff --git a/src/parcsr_ls/par_mgr_setup.c b/src/parcsr_ls/par_mgr_setup.c
index 5ae76deba..fdbff2161 100644
--- a/src/parcsr_ls/par_mgr_setup.c
+++ b/src/parcsr_ls/par_mgr_setup.c
@@ -310,6 +310,7 @@ hypre_MGRSetup( void               *mgr_vdata,
             if (isCpoint)
             {
                level_coarse_indexes[i][final_coarse_size++] = row;
+               //printf("%d\n",row);
             }
          }
       }
@@ -538,7 +539,7 @@ hypre_MGRSetup( void               *mgr_vdata,
       {
          if ((mgr_data -> l1_norms)[j])
          {
-            hypre_SeqVectorDestroy((mgr_data -> l1_norms)[j]);
+            hypre_SeqVectorDestroy((mgr_data -> l1_norms)[i]);
             (mgr_data -> l1_norms)[j] = NULL;
          }
       }
diff --git a/src/parcsr_ls/par_mgr_stats.c b/src/parcsr_ls/par_mgr_stats.c
index a8eccaf28..3f3314692 100644
--- a/src/parcsr_ls/par_mgr_stats.c
+++ b/src/parcsr_ls/par_mgr_stats.c
@@ -388,12 +388,6 @@ hypre_MGRSetupStats(void *mgr_vdata)
    }
    num_levels_total = num_levels_mgr + num_sublevels_amg[coarsest_mgr_level];
 
-   /* Compute global number of nonzeros if not done before */
-   if (!hypre_ParCSRMatrixDNumNonzeros(A_finest))
-   {
-      hypre_ParCSRMatrixSetDNumNonzeros(A_finest);
-   }
-
    /* Compute number of AMG sublevels at each MGR level */
    max_levels = num_levels_total;
    for (i = 0; i < num_levels_mgr; i++)
@@ -659,34 +653,20 @@ hypre_MGRSetupStats(void *mgr_vdata)
             RT_array[k] = (k < (num_sublevels_amg[i] - 1)) ?
                           hypre_ParAMGDataRArray(amg_solver)[k] : NULL;
 
-            /* Compute global number of nonzeros if not done before */
-            if (!hypre_ParCSRMatrixDNumNonzeros(A_array[k]))
-            {
-               hypre_ParCSRMatrixSetDNumNonzeros(A_array[k]);
-            }
-            if (k < (num_sublevels_amg[i] - 1) && !hypre_ParCSRMatrixDNumNonzeros(P_array[k]))
-            {
-               hypre_ParCSRMatrixSetDNumNonzeros(P_array[k]);
-            }
-            if (k < (num_sublevels_amg[i] - 1) && !hypre_ParCSRMatrixDNumNonzeros(RT_array[k]))
-            {
-               hypre_ParCSRMatrixSetDNumNonzeros(RT_array[k]);
-            }
-
             gridcomp[i] += (HYPRE_Real) hypre_ParCSRMatrixGlobalNumRows(A_array[k]);
-            opcomp[i]   += hypre_ParCSRMatrixDNumNonzeros(A_array[k]);
-            memcomp[i]  += hypre_ParCSRMatrixDNumNonzeros(A_array[k]);
+            opcomp[i]   += (HYPRE_Real) hypre_ParCSRMatrixNumNonzeros(A_array[k]);
             if (k < (num_sublevels_amg[i] - 1))
             {
-               memcomp[i] += hypre_ParCSRMatrixDNumNonzeros(P_array[k]) +
-                             hypre_ParCSRMatrixDNumNonzeros(RT_array[k]);
+               memcomp[i] += (HYPRE_Real) hypre_ParCSRMatrixNumNonzeros(A_array[k]) +
+                             (HYPRE_Real) hypre_ParCSRMatrixNumNonzeros(P_array[k]) +
+                             (HYPRE_Real) hypre_ParCSRMatrixNumNonzeros(RT_array[k]);
             }
          }
          gridcomp[num_levels_mgr + 1] += gridcomp[i];
          opcomp[num_levels_mgr + 1]   += opcomp[i] /
-                                         hypre_ParCSRMatrixDNumNonzeros(A_finest);
+                                         hypre_ParCSRMatrixNumNonzeros(A_finest);
          memcomp[num_levels_mgr + 1]  += memcomp[i] /
-                                         hypre_ParCSRMatrixDNumNonzeros(A_finest);
+                                         hypre_ParCSRMatrixNumNonzeros(A_finest);
 
          gridcomp[i] /= (HYPRE_Real) hypre_ParCSRMatrixGlobalNumRows(A_array[0]);
          opcomp[i]   /= hypre_ParCSRMatrixDNumNonzeros(A_array[0]);
@@ -702,9 +682,9 @@ hypre_MGRSetupStats(void *mgr_vdata)
          A_array[i] = hypre_ParMGRDataA(mgr_data, i);
          gridcomp[num_levels_mgr + 1] += hypre_ParCSRMatrixGlobalNumRows(A_array[i]);
          opcomp[num_levels_mgr + 1]   += hypre_ParCSRMatrixDNumNonzeros(A_array[i]) /
-                                         hypre_ParCSRMatrixDNumNonzeros(A_finest);
+                                         hypre_ParCSRMatrixNumNonzeros(A_finest);
          memcomp[num_levels_mgr + 1]  += hypre_ParCSRMatrixDNumNonzeros(A_array[i]) /
-                                         hypre_ParCSRMatrixDNumNonzeros(A_finest);
+                                         hypre_ParCSRMatrixNumNonzeros(A_finest);
       }
    }
    gridcomp[num_levels_mgr + 1] /= (HYPRE_Real) hypre_ParCSRMatrixGlobalNumRows(A_finest);
diff --git a/src/parcsr_mv/par_csr_matop.c b/src/parcsr_mv/par_csr_matop.c
index 5406541a9..25003a759 100644
--- a/src/parcsr_mv/par_csr_matop.c
+++ b/src/parcsr_mv/par_csr_matop.c
@@ -6778,6 +6778,7 @@ hypre_ParCSRMatrixBlockColSum( hypre_ParCSRMatrix      *A,
                                HYPRE_Int                num_cols_block,
                                hypre_DenseBlockMatrix **B_ptr )
 {
+   HYPRE_MemoryLocation     memory_location = hypre_ParCSRMatrixMemoryLocation(A);
    HYPRE_BigInt             num_rows_A      = hypre_ParCSRMatrixGlobalNumRows(A);
    HYPRE_BigInt             num_cols_A      = hypre_ParCSRMatrixGlobalNumCols(A);
 
@@ -6827,11 +6828,10 @@ hypre_ParCSRMatrixBlockColSum( hypre_ParCSRMatrix      *A,
                                     num_rows_block, num_cols_block);
 
    /* Initialize the output matrix */
-   /* TODO: Change back to memory_location after implementing hypre_ParCSRMatrixBlockColSumDevice */
-   hypre_DenseBlockMatrixInitializeOn(B, HYPRE_MEMORY_HOST);
+   hypre_DenseBlockMatrixInitializeOn(B, memory_location);
 
 #if defined(HYPRE_USING_GPU)
-   HYPRE_ExecutionPolicy exec = hypre_GetExecPolicy1(hypre_ParCSRMatrixMemoryLocation(A));
+   HYPRE_ExecutionPolicy exec = hypre_GetExecPolicy1(memory_location);
 
    if (exec == HYPRE_EXEC_DEVICE)
    {
diff --git a/src/test/CMakeLists.txt b/src/test/CMakeLists.txt
index dfa40dfd3..4125dd032 100644
--- a/src/test/CMakeLists.txt
+++ b/src/test/CMakeLists.txt
@@ -37,9 +37,25 @@ endif()
 # Build each executable
 add_hypre_executables("${TEST_SRCS}")
 
+# Ensure test executables land in the top-level build bin directory
+set_target_properties(ij sstruct struct structmat ams_driver struct_migrate ij_assembly
+  PROPERTIES
+    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
+)
+
 # Special treatment for sstructmat as it depends on sstruct_helpers (not an executable)
 add_hypre_executable("sstructmat.c" "sstruct_helpers.c")
 
+# Link CUDA runtime transitively for tests when CUDA is enabled
+if(HYPRE_ENABLE_CUDA)
+  find_package(CUDAToolkit REQUIRED)
+  foreach(t ij sstruct struct structmat ams_driver struct_migrate ij_assembly)
+    if(TARGET ${t})
+      target_link_libraries(${t} PRIVATE CUDA::cudart)
+    endif()
+  endforeach()
+endif()
+
 # Copy test input files
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/TEST_sstruct/sstruct.in.default
                ${CMAKE_CURRENT_BINARY_DIR}/sstruct.in.default COPYONLY)
@@ -69,7 +85,12 @@ endif()
 find_program(BASH_PROGRAM bash)
 
 # Run check target
-add_custom_target(check
+# Avoid name collision if a parent/subproject already defined a 'check' target (e.g., Umpire)
+set(HYPRE_CHECK_TARGET_NAME check)
+if(TARGET check)
+  set(HYPRE_CHECK_TARGET_NAME hypre_check)
+endif()
+add_custom_target(${HYPRE_CHECK_TARGET_NAME}
   COMMAND ${CMAKE_COMMAND} -E echo "Checking the library..."
   COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 1 $<TARGET_FILE:ij> 2> ij.err
   COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 1 $<TARGET_FILE:struct> 2> struct.err
