diff --git a/CMakeLists.txt b/CMakeLists.txt
index 79fc863..a4f02a7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -42,17 +42,9 @@ include(cmake/lapack.cmake)
 
 if(parallel)
   find_package(MPI COMPONENTS C Fortran REQUIRED)
-  include(cmake/scalapack.cmake)
 
   set(NUMERIC_LIBS ${SCALAPACK_LIBRARIES} ${LAPACK_LIBRARIES})
 
-  if(find_static AND NOT WIN32 AND
-    MKL IN_LIST LAPACK_COMPONENTS AND
-    CMAKE_VERSION VERSION_GREATER_EQUAL 3.24
-    )
-    set(NUMERIC_LIBS $<LINK_GROUP:RESCAN,${NUMERIC_LIBS}>)
-  endif()
-
   # avoid MPICH -fallow flag leakage
   set(NUMERIC_INC ${SCALAPACK_INCLUDE_DIRS} ${LAPACK_INCLUDE_DIRS} ${MPI_Fortran_INCLUDE_DIRS})
   list(APPEND NUMERIC_LIBS ${MPI_Fortran_LIBRARIES} MPI::MPI_C)
@@ -79,15 +71,6 @@ if(metis)
 endif()
 list(APPEND ORDERING_LIBS pord)
 
-install(FILES
-${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindLAPACK.cmake
-${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindSCALAPACK.cmake
-${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindMETIS.cmake
-${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindScotch.cmake
-${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindMUMPS.cmake
-DESTINATION cmake
-)
-
 message(STATUS "MUMPS ORDERING_DEFS: ${ORDERING_DEFS}")
 message(STATUS "MUMPS ORDERING_LIBS: ${ORDERING_LIBS}")
 
@@ -127,8 +110,6 @@ message(STATUS "Configured MUMPS ${MUMPS_UPSTREAM_VERSION} source in ${mumps_SOU
 
 include(cmake/summary.cmake)
 
-include(cmake/install.cmake)
-
 if(NOT PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)
   file(GENERATE OUTPUT .gitignore CONTENT "*")
 endif()
diff --git a/cmake/FindLAPACK.cmake b/cmake/FindLAPACK.cmake
deleted file mode 100644
index 35395c6..0000000
--- a/cmake/FindLAPACK.cmake
+++ /dev/null
@@ -1,591 +0,0 @@
-# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
-# file Copyright.txt or https://cmake.org/licensing for details.
-
-#[=======================================================================[.rst:
-
-FindLapack
-----------
-
-* Michael Hirsch, Ph.D. www.scivision.dev
-* David Eklund
-
-Let Michael know if there are more MKL / Lapack / compiler combination you want.
-Refer to https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor
-
-Finds LAPACK libraries for C / C++ / Fortran.
-Works with Netlib Lapack / LapackE, Atlas and Intel MKL.
-Intel MKL relies on having environment variable MKLROOT set, typically by sourcing
-mklvars.sh beforehand.
-
-Why not the FindLapack.cmake built into CMake? It has a lot of old code for
-infrequently used Lapack libraries and is unreliable for me.
-
-Tested on Linux, MacOS and Windows with:
-* GCC / Gfortran
-* Clang / Flang
-* Intel (icc, ifort)
-* Cray
-
-
-Parameters
-^^^^^^^^^^
-
-COMPONENTS default to Netlib LAPACK / LapackE, otherwise:
-
-``MKL``
-  Intel MKL -- sequential by default, or add TBB or MPI as well
-``MKL64``
-  MKL only: 64-bit integers  (default is 32-bit integers)
-``OpenMP``
-  Intel MPI with OpenMP threading addition to MKL
-``TBB``
-  Intel MPI + TBB for MKL
-``AOCL``
-  AMD Optimizing CPU Libraries
-
-``LAPACKE``
-  Netlib LapackE for C / C++
-``Netlib``
-  Netlib Lapack for Fortran
-``OpenBLAS``
-  OpenBLAS Lapack for Fortran
-
-``LAPACK95``
-  get Lapack95 interfaces for MKL or Netlib (must also specify one of MKL, Netlib)
-
-``STATIC``
-  Library search default on non-Windows is shared then static. On Windows default search is static only.
-  Specifying STATIC component searches for static libraries only.
-
-
-Result Variables
-^^^^^^^^^^^^^^^^
-
-``LAPACK_FOUND``
-  Lapack libraries were found
-``LAPACK_<component>_FOUND``
-  LAPACK <component> specified was found
-``LAPACK_LIBRARIES``
-  Lapack library files (including BLAS
-``LAPACK_INCLUDE_DIRS``
-  Lapack include directories (for C/C++)
-
-
-References
-^^^^^^^^^^
-
-* Pkg-Config and MKL:  https://software.intel.com/en-us/articles/intel-math-kernel-library-intel-mkl-and-pkg-config-tool
-* MKL for Windows: https://software.intel.com/en-us/mkl-windows-developer-guide-static-libraries-in-the-lib-intel64-win-directory
-* MKL Windows directories: https://software.intel.com/en-us/mkl-windows-developer-guide-high-level-directory-structure
-* Atlas http://math-atlas.sourceforge.net/errata.html#LINK
-* MKL LAPACKE (C, C++): https://software.intel.com/en-us/mkl-linux-developer-guide-calling-lapack-blas-and-cblas-routines-from-c-c-language-environments
-#]=======================================================================]
-
-include(CheckFortranSourceCompiles)
-
-# clear to avoid endless appending on subsequent calls
-set(LAPACK_LIBRARY)
-unset(LAPACK_INCLUDE_DIR)
-
-# ===== functions ==========
-
-function(atlas_libs)
-
-find_library(ATLAS_LIB
-NAMES atlas
-PATH_SUFFIXES atlas
-DOC "ATLAS library"
-)
-
-find_library(LAPACK_ATLAS
-NAMES ptlapack lapack_atlas lapack
-NAMES_PER_DIR
-PATH_SUFFIXES atlas
-DOC "LAPACK ATLAS library"
-)
-
-find_library(BLAS_LIBRARY
-NAMES ptf77blas f77blas blas
-NAMES_PER_DIR
-PATH_SUFFIXES atlas
-DOC "BLAS ATLAS library"
-)
-
-# === C ===
-find_library(BLAS_C_ATLAS
-NAMES ptcblas cblas
-NAMES_PER_DIR
-PATH_SUFFIXES atlas
-DOC "BLAS C ATLAS library"
-)
-
-find_path(LAPACK_INCLUDE_DIR
-NAMES cblas-atlas.h cblas.h clapack.h
-DOC "ATLAS headers"
-)
-
-#===========
-if(LAPACK_ATLAS AND BLAS_C_ATLAS AND BLAS_LIBRARY AND ATLAS_LIB)
-  set(LAPACK_Atlas_FOUND true PARENT_SCOPE)
-  set(LAPACK_LIBRARY ${LAPACK_ATLAS} ${BLAS_C_ATLAS} ${BLAS_LIBRARY} ${ATLAS_LIB})
-  list(APPEND LAPACK_LIBRARY ${CMAKE_THREAD_LIBS_INIT})
-endif()
-
-set(LAPACK_LIBRARY ${LAPACK_LIBRARY} PARENT_SCOPE)
-
-endfunction(atlas_libs)
-
-#=======================
-
-function(netlib_libs)
-
-if(LAPACK95 IN_LIST LAPACK_FIND_COMPONENTS)
-  find_path(LAPACK95_INCLUDE_DIR
-  NAMES f95_lapack.mod
-  HINTS ${LAPACK95_ROOT} ENV LAPACK95_ROOT
-  PATH_SUFFIXES include
-  DOC "LAPACK95 Fortran module"
-  )
-
-  find_library(LAPACK95_LIBRARY
-  NAMES lapack95
-  HINTS ${LAPACK95_ROOT} ENV LAPACK95_ROOT
-  DOC "LAPACK95 library"
-  )
-
-  if(NOT (LAPACK95_LIBRARY AND LAPACK95_INCLUDE_DIR))
-    return()
-  endif()
-
-  set(LAPACK95_LIBRARY ${LAPACK95_LIBRARY} PARENT_SCOPE)
-  set(LAPACK_LAPACK95_FOUND true PARENT_SCOPE)
-endif(LAPACK95 IN_LIST LAPACK_FIND_COMPONENTS)
-
-find_library(LAPACK_LIBRARY
-NAMES lapack
-PATH_SUFFIXES lapack lapack/lib
-DOC "LAPACK library"
-)
-if(NOT LAPACK_LIBRARY)
-  return()
-endif()
-
-if(LAPACKE IN_LIST LAPACK_FIND_COMPONENTS)
-
-  find_library(LAPACKE_LIBRARY
-  NAMES lapacke
-  PATH_SUFFIXES lapack lapack/lib
-  DOC "LAPACKE library"
-  )
-
-  # lapack/include for Homebrew
-  find_path(LAPACKE_INCLUDE_DIR
-  NAMES lapacke.h
-  PATH_SUFFIXES lapack lapack/include
-  DOC "LAPACKE include directory"
-  )
-  if(NOT (LAPACKE_LIBRARY AND LAPACKE_INCLUDE_DIR))
-    return()
-  endif()
-
-  set(LAPACK_LAPACKE_FOUND true PARENT_SCOPE)
-  list(APPEND LAPACK_INCLUDE_DIR ${LAPACKE_INCLUDE_DIR})
-  list(APPEND LAPACK_LIBRARY ${LAPACKE_LIBRARY})
-  mark_as_advanced(LAPACKE_LIBRARY LAPACKE_INCLUDE_DIR)
-endif(LAPACKE IN_LIST LAPACK_FIND_COMPONENTS)
-
-# Netlib on Cygwin and others
-
-find_library(BLAS_LIBRARY
-NAMES refblas blas
-NAMES_PER_DIR
-PATH_SUFFIXES lapack lapack/lib blas
-DOC "BLAS library"
-)
-
-if(NOT BLAS_LIBRARY)
-  return()
-endif()
-
-list(APPEND LAPACK_LIBRARY ${BLAS_LIBRARY})
-set(LAPACK_Netlib_FOUND true PARENT_SCOPE)
-
-list(APPEND LAPACK_LIBRARY ${CMAKE_THREAD_LIBS_INIT})
-
-set(LAPACK_LIBRARY ${LAPACK_LIBRARY} PARENT_SCOPE)
-
-endfunction(netlib_libs)
-
-#===============================
-function(openblas_libs)
-
-find_library(LAPACK_LIBRARY
-NAMES lapack
-PATH_SUFFIXES openblas
-DOC "LAPACK library"
-)
-
-find_library(BLAS_LIBRARY
-NAMES openblas blas
-NAMES_PER_DIR
-PATH_SUFFIXES openblas
-DOC "BLAS library"
-)
-
-find_path(LAPACK_INCLUDE_DIR
-NAMES cblas-openblas.h cblas.h f77blas.h openblas_config.h
-DOC "LAPACK include directory"
-)
-
-if(NOT (LAPACK_LIBRARY AND BLAS_LIBRARY))
-  return()
-endif()
-
-list(APPEND LAPACK_LIBRARY ${BLAS_LIBRARY})
-set(LAPACK_OpenBLAS_FOUND true PARENT_SCOPE)
-
-list(APPEND LAPACK_LIBRARY ${CMAKE_THREAD_LIBS_INIT})
-
-set(LAPACK_LIBRARY ${LAPACK_LIBRARY} PARENT_SCOPE)
-
-endfunction(openblas_libs)
-
-
-function(aocl_libs)
-
-set(_names flame)
-if(WIN32)
-  if(BUILD_SHARED_LIBS)
-    list(APPEND _names AOCL-LibFlame-Win-MT-dll AOCL-LibFlame-Win-dll)
-  else()
-    list(APPEND _names AOCL-LibFlame-Win-MT AOCL-LibFlame-Win)
-  endif()
-endif()
-
-find_library(LAPACK_LIBRARY
-NAMES ${_names}
-NAMES_PER_DIR
-PATH_SUFFIXES LP64
-DOC "LAPACK Flame library"
-)
-
-set(_names blis-mt blis)
-if(WIN32)
-  if(BUILD_SHARED_LIBS)
-    list(APPEND _names AOCL-LibBlis-Win-MT-dll AOCL-LibBlis-Win-dll)
-  else()
-    list(APPEND _names AOCL-LibBlis-Win-MT AOCL-LibBlis-Win)
-  endif()
-endif()
-
-find_library(BLAS_LIBRARY
-NAMES ${_names}
-NAMES_PER_DIR
-PATH_SUFFIXES LP64
-DOC "BLAS Blis library"
-)
-
-if(NOT (LAPACK_LIBRARY AND BLAS_LIBRARY))
-  return()
-endif()
-
-find_path(LAPACK_INCLUDE_DIR
-NAMES FLAME.h
-PATH_SUFFIXES LP64
-DOC "Flame header"
-)
-
-find_path(BLAS_INCLUDE_DIR
-NAMES blis.h
-PATH_SUFFIXES LP64
-DOC "Blis header"
-)
-
-if(NOT (LAPACK_INCLUDE_DIR AND BLAS_INCLUDE_DIR))
-  return()
-endif()
-
-
-set(LAPACK_AOCL_FOUND true PARENT_SCOPE)
-set(LAPACK_LIBRARY ${LAPACK_LIBRARY} ${BLAS_LIBRARY} ${CMAKE_THREAD_LIBS_INIT} PARENT_SCOPE)
-set(LAPACK_INCLUDE_DIR ${LAPACK_INCLUDE_DIR} ${BLAS_INCLUDE_DIR} PARENT_SCOPE)
-
-endfunction(aocl_libs)
-
-#===============================
-
-function(find_mkl_libs)
-# https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor
-
-set(_mkl_libs ${ARGV})
-if(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND
-  CMAKE_Fortran_COMPILER_ID STREQUAL "GNU"
-)
-  list(INSERT _mkl_libs 0 mkl_gf_${_mkl_bitflag}lp64)
-else()
-  if(WIN32 AND BUILD_SHARED_LIBS)
-    list(INSERT _mkl_libs 0 mkl_intel_${_mkl_bitflag}lp64_dll)
-  else()
-    list(INSERT _mkl_libs 0 mkl_intel_${_mkl_bitflag}lp64)
-  endif()
-endif()
-
-foreach(s ${_mkl_libs})
-  find_library(LAPACK_${s}_LIBRARY
-  NAMES ${s}
-  PATHS ${MKLROOT}/lib ${MKLROOT}/lib/intel64 ${oneapi_libdir}
-  NO_DEFAULT_PATH
-  DOC "Intel MKL ${s} library"
-  )
-  # ${MKLROOT}/[lib[/intel64]]: general MKL libraries
-  # oneapi_libdir: openmp library
-
-  if(NOT LAPACK_${s}_LIBRARY)
-    return()
-  endif()
-
-  list(APPEND LAPACK_LIBRARY ${LAPACK_${s}_LIBRARY})
-endforeach()
-
-find_path(LAPACK_INCLUDE_DIR
-NAMES mkl_lapack.h
-HINTS ${MKLROOT}
-PATH_SUFFIXES include
-NO_DEFAULT_PATH
-DOC "Intel MKL header"
-)
-
-if(NOT LAPACK_INCLUDE_DIR)
-  return()
-endif()
-
-set(LAPACK_LIBRARY ${LAPACK_LIBRARY} PARENT_SCOPE)
-
-endfunction(find_mkl_libs)
-
-# ========== main program
-
-set(lapack_cray false)
-if(DEFINED ENV{CRAYPE_VERSION})
-  set(lapack_cray true)
-endif()
-
-if(NOT (lapack_cray
-  OR OpenBLAS IN_LIST LAPACK_FIND_COMPONENTS
-  OR Netlib IN_LIST LAPACK_FIND_COMPONENTS
-  OR Atlas IN_LIST LAPACK_FIND_COMPONENTS
-  OR MKL IN_LIST LAPACK_FIND_COMPONENTS
-  OR AOCL IN_LIST LAPACK_FIND_COMPONENTS))
-  if(DEFINED ENV{MKLROOT})
-    list(APPEND LAPACK_FIND_COMPONENTS MKL)
-  else()
-    list(APPEND LAPACK_FIND_COMPONENTS Netlib)
-  endif()
-endif()
-
-find_package(Threads)
-
-if(STATIC IN_LIST LAPACK_FIND_COMPONENTS)
-  set(_orig_suff ${CMAKE_FIND_LIBRARY_SUFFIXES})
-  set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
-endif()
-
-# ==== generic MKL variables ====
-
-if(MKL IN_LIST LAPACK_FIND_COMPONENTS OR MKL64 IN_LIST LAPACK_FIND_COMPONENTS)
-  # we have to sanitize MKLROOT if it has Windows backslashes (\) otherwise it will break at build time
-  # double-quotes are necessary per CMake to_cmake_path docs.
-  file(TO_CMAKE_PATH "$ENV{MKLROOT}" MKLROOT)
-
-  file(TO_CMAKE_PATH "$ENV{ONEAPI_ROOT}" ONEAPI_ROOT)
-  # oneapi_libdir is where iomp5 is located
-  set(oneapi_libdir ${ONEAPI_ROOT}/compiler/latest/)
-  if(WIN32)
-    string(APPEND oneapi_libdir "windows/compiler/lib/intel64_win")
-  elseif(APPLE)
-    string(APPEND oneapi_libdir "mac/compiler/lib")
-  elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
-    string(APPEND oneapi_libdir "linux/compiler/lib/intel64_lin")
-  endif()
-
-  if(MKL64 IN_LIST LAPACK_FIND_COMPONENTS)
-    set(_mkl_bitflag i)
-  else()
-    set(_mkl_bitflag)
-  endif()
-
-  set(_mkl_libs)
-  if(LAPACK95 IN_LIST LAPACK_FIND_COMPONENTS)
-    find_mkl_libs(mkl_blas95_${_mkl_bitflag}lp64 mkl_lapack95_${_mkl_bitflag}lp64)
-    if(LAPACK_LIBRARY)
-      set(LAPACK95_LIBRARY ${LAPACK_LIBRARY})
-      set(LAPACK_LIBRARY)
-      set(LAPACK95_INCLUDE_DIR ${LAPACK_INCLUDE_DIR})
-      set(LAPACK_LAPACK95_FOUND true)
-    endif()
-  endif()
-
-  set(_tbb)
-  if(TBB IN_LIST LAPACK_FIND_COMPONENTS)
-    list(APPEND _mkl_libs mkl_tbb_thread mkl_core)
-    set(_tbb tbb stdc++)
-  elseif(OpenMP IN_LIST LAPACK_FIND_COMPONENTS)
-    if(WIN32)
-      set(_mp libiomp5md)
-    else()
-      set(_mp iomp5)
-    endif()
-    if(WIN32 AND BUILD_SHARED_LIBS)
-      list(APPEND _mkl_libs mkl_intel_thread_dll mkl_core_dll ${_mp})
-    else()
-      list(APPEND _mkl_libs mkl_intel_thread mkl_core ${_mp})
-    endif()
-  else()
-    if(WIN32 AND BUILD_SHARED_LIBS)
-      list(APPEND _mkl_libs mkl_sequential_dll mkl_core_dll)
-    else()
-      list(APPEND _mkl_libs mkl_sequential mkl_core)
-    endif()
-  endif()
-
-  find_mkl_libs(${_mkl_libs})
-
-  if(LAPACK_LIBRARY)
-
-    if(NOT WIN32)
-      list(APPEND LAPACK_LIBRARY ${_tbb} ${CMAKE_THREAD_LIBS_INIT} ${CMAKE_DL_LIBS} m)
-    endif()
-
-    set(LAPACK_MKL_FOUND true)
-
-    if(MKL64 IN_LIST LAPACK_FIND_COMPONENTS)
-      set(LAPACK_MKL64_FOUND true)
-    endif()
-
-    if(OpenMP IN_LIST LAPACK_FIND_COMPONENTS)
-      set(LAPACK_OpenMP_FOUND true)
-    endif()
-
-    if(TBB IN_LIST LAPACK_FIND_COMPONENTS)
-      set(LAPACK_TBB_FOUND true)
-    endif()
-  endif()
-
-elseif(Atlas IN_LIST LAPACK_FIND_COMPONENTS)
-  atlas_libs()
-elseif(Netlib IN_LIST LAPACK_FIND_COMPONENTS)
-  netlib_libs()
-elseif(OpenBLAS IN_LIST LAPACK_FIND_COMPONENTS)
-  openblas_libs()
-elseif(AOCL IN_LIST LAPACK_FIND_COMPONENTS)
-  aocl_libs()
-elseif(lapack_cray)
-  # LAPACK is implicitly part of Cray PE LibSci, use Cray compiler wrapper.
-endif()
-
-if(STATIC IN_LIST LAPACK_FIND_COMPONENTS)
-  if(LAPACK_LIBRARY)
-    set(LAPACK_STATIC_FOUND true)
-  endif()
-  set(CMAKE_FIND_LIBRARY_SUFFIXES ${_orig_suff})
-endif()
-
-# -- verify library works
-
-function(lapack_check)
-
-get_property(enabled_langs GLOBAL PROPERTY ENABLED_LANGUAGES)
-if(NOT Fortran IN_LIST enabled_langs)
-  set(LAPACK_links true PARENT_SCOPE)
-  return()
-endif()
-
-set(CMAKE_REQUIRED_FLAGS)
-set(CMAKE_REQUIRED_LINK_OPTIONS)
-set(CMAKE_REQUIRED_INCLUDES ${LAPACK_INCLUDE_DIR})
-set(CMAKE_REQUIRED_LIBRARIES ${LAPACK_LIBRARY})
-
-check_fortran_source_compiles(
-"program check_lapack
-use, intrinsic :: iso_fortran_env, only : real32
-implicit none
-real(real32), external :: snrm2
-print *, snrm2(1, [0._real32], 1)
-end program"
-LAPACK_s_FOUND
-SRC_EXT f90
-)
-
-check_fortran_source_compiles(
-"program check_lapack
-use, intrinsic :: iso_fortran_env, only : real64
-implicit none
-real(real64), external :: dnrm2
-print *, dnrm2(1, [0._real64], 1)
-end program"
-LAPACK_d_FOUND
-SRC_EXT f90
-)
-
-if(LAPACK_s_FOUND OR LAPACK_d_FOUND)
-  set(LAPACK_links true PARENT_SCOPE)
-endif()
-
-endfunction(lapack_check)
-
-# --- Check that Scalapack links
-
-if(lapack_cray OR LAPACK_LIBRARY)
-  lapack_check()
-endif()
-
-
-include(FindPackageHandleStandardArgs)
-
-if(lapack_cray)
-  find_package_handle_standard_args(LAPACK HANDLE_COMPONENTS
-  REQUIRED_VARS LAPACK_links
-  )
-else()
-  find_package_handle_standard_args(LAPACK HANDLE_COMPONENTS
-  REQUIRED_VARS LAPACK_LIBRARY LAPACK_links
-  )
-endif()
-
-
-set(BLAS_LIBRARIES ${BLAS_LIBRARY})
-set(LAPACK_LIBRARIES ${LAPACK_LIBRARY})
-set(LAPACK_INCLUDE_DIRS ${LAPACK_INCLUDE_DIR})
-
-if(LAPACK_FOUND)
-# need if _FOUND guard as can't overwrite imported target even if bad
-
-
-message(VERBOSE "Lapack libraries: ${LAPACK_LIBRARIES}
-Lapack include directories: ${LAPACK_INCLUDE_DIRS}")
-
-if(NOT TARGET BLAS::BLAS)
-  add_library(BLAS::BLAS INTERFACE IMPORTED)
-  set_property(TARGET BLAS::BLAS PROPERTY INTERFACE_LINK_LIBRARIES "${BLAS_LIBRARY}")
-endif()
-
-if(NOT TARGET LAPACK::LAPACK)
-  add_library(LAPACK::LAPACK INTERFACE IMPORTED)
-  set_property(TARGET LAPACK::LAPACK PROPERTY INTERFACE_LINK_LIBRARIES "${LAPACK_LIBRARY}")
-  set_property(TARGET LAPACK::LAPACK PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${LAPACK_INCLUDE_DIR}")
-endif()
-
-if(LAPACK_LAPACK95_FOUND)
-  set(LAPACK95_LIBRARIES ${LAPACK95_LIBRARY})
-  set(LAPACK95_INCLUDE_DIRS ${LAPACK95_INCLUDE_DIR})
-
-  if(NOT TARGET LAPACK::LAPACK95)
-    add_library(LAPACK::LAPACK95 INTERFACE IMPORTED)
-    set_property(TARGET LAPACK::LAPACK95 PROPERTY INTERFACE_LINK_LIBRARIES "${LAPACK95_LIBRARY}")
-    set_property(TARGET LAPACK::LAPACK95 PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${LAPACK95_INCLUDE_DIR}")
-  endif()
-endif()
-
-endif(LAPACK_FOUND)
-
-mark_as_advanced(LAPACK_LIBRARY LAPACK_INCLUDE_DIR)
diff --git a/cmake/FindSCALAPACK.cmake b/cmake/FindSCALAPACK.cmake
deleted file mode 100644
index e93337f..0000000
--- a/cmake/FindSCALAPACK.cmake
+++ /dev/null
@@ -1,315 +0,0 @@
-# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
-# file Copyright.txt or https://cmake.org/licensing for details.
-
-#[=======================================================================[.rst:
-
-FindSCALAPACK
--------------
-
-authored by SciVision: www.scivision.dev
-
-Finds SCALAPACK libraries for MKL, OpenMPI and MPICH.
-Intel MKL relies on having environment variable MKLROOT set, typically by sourcing
-mklvars.sh beforehand.
-
-This module does NOT find LAPACK.
-
-COMPONENTS
-^^^^^^^^^^
-
-``MKL``
-  Intel MKL for MSVC, oneAPI, GCC.
-  Working with IntelMPI (default Window, Linux), MPICH (default Mac) or OpenMPI (Linux only).
-
-``MKL64``
-  MKL only: 64-bit integers  (default is 32-bit integers)
-
-``STATIC``
-  Library search default on non-Windows is shared then static. On Windows default search is static only.
-  Specifying STATIC component searches for static libraries only.
-
-Result Variables
-^^^^^^^^^^^^^^^^
-
-``SCALAPACK_FOUND``
-  SCALapack libraries were found
-``SCALAPACK_<component>_FOUND``
-  SCALAPACK <component> specified was found
-``SCALAPACK_LIBRARIES``
-  SCALapack library files
-``SCALAPACK_INCLUDE_DIRS``
-  SCALapack include directories
-
-
-References
-^^^^^^^^^^
-
-* Pkg-Config and MKL:  https://software.intel.com/en-us/articles/intel-math-kernel-library-intel-mkl-and-pkg-config-tool
-* MKL for Windows: https://software.intel.com/en-us/mkl-windows-developer-guide-static-libraries-in-the-lib-intel64-win-directory
-* MKL Windows directories: https://software.intel.com/en-us/mkl-windows-developer-guide-high-level-directory-structure
-* MKL link-line advisor: https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor
-#]=======================================================================]
-
-include(CheckFortranSourceCompiles)
-
-set(SCALAPACK_LIBRARY)  # avoids appending to prior FindScalapack
-
-#===== functions
-
-function(scalapack_check)
-
-if(NOT (MPI_C_FOUND AND MPI_Fortran_FOUND))
-  find_package(MPI COMPONENTS C Fortran)
-endif()
-
-if(NOT LAPACK_FOUND)
-  # otherwise can cause 32-bit lapack when 64-bit wanted
-  find_package(LAPACK)
-endif()
-if(NOT (MPI_Fortran_FOUND AND LAPACK_FOUND))
-  return()
-endif()
-
-# some OpenMPI builds need -pthread
-find_package(Threads)
-
-
-set(CMAKE_REQUIRED_FLAGS)
-set(CMAKE_REQUIRED_LINK_OPTIONS)
-set(CMAKE_REQUIRED_INCLUDES ${SCALAPACK_INCLUDE_DIR} ${LAPACK_INCLUDE_DIRS} ${MPI_Fortran_INCLUDE_DIRS})
-set(CMAKE_REQUIRED_LIBRARIES ${SCALAPACK_LIBRARY})
-if(BLACS_LIBRARY)
-  list(APPEND CMAKE_REQUIRED_LIBRARIES ${BLACS_LIBRARY})
-endif()
-list(APPEND CMAKE_REQUIRED_LIBRARIES ${LAPACK_LIBRARIES} ${MPI_Fortran_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
-
-if(STATIC IN_LIST SCALAPACK_FIND_COMPONENTS AND
-  NOT WIN32 AND
-  MKL IN_LIST SCALAPACK_FIND_COMPONENTS AND
-  CMAKE_VERSION VERSION_GREATER_EQUAL 3.24
-  )
-  set(CMAKE_REQUIRED_LIBRARIES $<LINK_GROUP:RESCAN,${CMAKE_REQUIRED_LIBRARIES}>)
-endif()
-# MPI needed for IntelLLVM
-
-check_fortran_source_compiles(
-"program test
-use, intrinsic :: iso_fortran_env, only : real64
-implicit none
-real(real64), external :: pdlamch
-integer :: ictxt
-print *, pdlamch(ictxt, 'E')
-end program"
-SCALAPACK_d_FOUND
-SRC_EXT f90
-)
-
-check_fortran_source_compiles(
-"program test
-use, intrinsic :: iso_fortran_env, only : real32
-implicit none
-real(real32), external :: pslamch
-integer :: ictxt
-print *, pslamch(ictxt, 'E')
-end program"
-SCALAPACK_s_FOUND
-SRC_EXT f90
-)
-
-if(SCALAPACK_s_FOUND OR SCALAPACK_d_FOUND)
-  set(SCALAPACK_links true PARENT_SCOPE)
-endif()
-
-endfunction(scalapack_check)
-
-
-function(scalapack_mkl scalapack_name blacs_name)
-
-find_library(SCALAPACK_LIBRARY
-NAMES ${scalapack_name}
-HINTS ${MKLROOT}
-PATH_SUFFIXES lib lib/intel64
-NO_DEFAULT_PATH
-DOC "SCALAPACK library"
-)
-
-find_library(BLACS_LIBRARY
-NAMES ${blacs_name}
-HINTS ${MKLROOT}
-PATH_SUFFIXES lib lib/intel64
-NO_DEFAULT_PATH
-DOCS "BLACS library"
-)
-
-find_path(SCALAPACK_INCLUDE_DIR
-NAMES mkl_scalapack.h
-HINTS ${MKLROOT}
-PATH_SUFFIXES include
-NO_DEFAULT_PATH
-DOC "SCALAPACK include directory"
-)
-
-# pc_mkl_INCLUDE_DIRS on Windows injects breaking garbage
-
-if(SCALAPACK_LIBRARY AND BLACS_LIBRARY AND SCALAPACK_INCLUDE_DIR)
-  set(SCALAPACK_MKL_FOUND true)
-endif()
-
-if(MKL64 IN_LIST SCALAPACK_FIND_COMPONENTS)
-  set(SCALAPACK_MKL64_FOUND ${SCALAPACK_MKL_FOUND})
-
-  if(DEFINED ENV{I_MPI_ROOT})
-    file(TO_CMAKE_PATH "$ENV{I_MPI_ROOT}" I_MPI_ROOT)
-
-    if(MSVC)
-      set(CMAKE_FIND_LIBRARY_PREFIXES lib)
-    endif()
-
-    find_library(SCALAPACK_MPI_LIB64
-    NAMES mpi_ilp64
-    HINTS ${I_MPI_ROOT}
-    NO_DEFAULT_PATH
-    PATH_SUFFIXES lib lib/release
-    DOC "MPI 64-bit library"
-    )
-
-    if(NOT SCALAPACK_MPI_LIB64)
-      set(SCALAPACK_MKL64_FOUND false)
-    endif()
-  endif()
-endif()
-
-set(SCALAPACK_MKL_FOUND ${SCALAPACK_MKL_FOUND} PARENT_SCOPE)
-set(SCALAPACK_MKL64_FOUND ${SCALAPACK_MKL64_FOUND} PARENT_SCOPE)
-
-endfunction(scalapack_mkl)
-
-
-function(scalapack_lib)
-
-if(BUILD_SHARED_LIBS)
-  set(_s shared)
-else()
-  set(_s static)
-endif()
-list(APPEND _s openmpi/lib mpich/lib)
-
-find_library(SCALAPACK_LIBRARY
-NAMES scalapack scalapack-openmpi scalapack-mpich
-NAMES_PER_DIR
-PATH_SUFFIXES ${_s}
-DOC "SCALAPACK library"
-)
-
-# some systems have libblacs as a separate file, instead of being subsumed in libscalapack.
-if(NOT DEFINED BLACS_ROOT)
-  get_filename_component(BLACS_ROOT ${SCALAPACK_LIBRARY} DIRECTORY)
-endif()
-
-find_library(BLACS_LIBRARY
-NAMES blacs
-NO_DEFAULT_PATH
-HINTS ${BLACS_ROOT}
-DOC "BLACS library"
-)
-
-endfunction(scalapack_lib)
-
-# === main
-
-set(scalapack_cray false)
-if(DEFINED ENV{CRAYPE_VERSION})
-  set(scalapack_cray true)
-endif()
-
-if(NOT scalapack_cray)
-  if(NOT MKL IN_LIST SCALAPACK_FIND_COMPONENTS AND DEFINED ENV{MKLROOT})
-    list(APPEND SCALAPACK_FIND_COMPONENTS MKL)
-  endif()
-endif()
-
-if(STATIC IN_LIST SCALAPACK_FIND_COMPONENTS)
-  set(_orig_suff ${CMAKE_FIND_LIBRARY_SUFFIXES})
-  set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
-endif()
-
-if(MKL IN_LIST SCALAPACK_FIND_COMPONENTS OR MKL64 IN_LIST SCALAPACK_FIND_COMPONENTS)
-  # we have to sanitize MKLROOT if it has Windows backslashes (\) otherwise it will break at build time
-  # double-quotes are necessary per CMake to_cmake_path docs.
-  file(TO_CMAKE_PATH "$ENV{MKLROOT}" MKLROOT)
-
-  if(MKL64 IN_LIST SCALAPACK_FIND_COMPONENTS)
-    set(_mkl_bitflag i)
-  else()
-    set(_mkl_bitflag)
-  endif()
-
-  # find MKL MPI binding
-  if(WIN32)
-    if(BUILD_SHARED_LIBS)
-      scalapack_mkl(mkl_scalapack_${_mkl_bitflag}lp64_dll mkl_blacs_${_mkl_bitflag}lp64_dll)
-    else()
-      scalapack_mkl(mkl_scalapack_${_mkl_bitflag}lp64 mkl_blacs_intelmpi_${_mkl_bitflag}lp64)
-    endif()
-  elseif(APPLE)
-    scalapack_mkl(mkl_scalapack_${_mkl_bitflag}lp64 mkl_blacs_mpich_${_mkl_bitflag}lp64)
-  else()
-    scalapack_mkl(mkl_scalapack_${_mkl_bitflag}lp64 mkl_blacs_intelmpi_${_mkl_bitflag}lp64)
-  endif()
-
-elseif(scalapack_cray)
-  # Cray PE has Scalapack build into LibSci. Use Cray compiler wrapper.
-else()
-  scalapack_lib()
-endif()
-
-if(STATIC IN_LIST SCALAPACK_FIND_COMPONENTS)
-  if(SCALAPACK_LIBRARY)
-    set(SCALAPACK_STATIC_FOUND true)
-  endif()
-  set(CMAKE_FIND_LIBRARY_SUFFIXES ${_orig_suff})
-endif()
-
-# --- Check that Scalapack links
-
-if(scalapack_cray OR SCALAPACK_LIBRARY)
-  scalapack_check()
-endif()
-
-# --- Finalize
-
-include(FindPackageHandleStandardArgs)
-
-if(scalapack_cray)
-  find_package_handle_standard_args(SCALAPACK HANDLE_COMPONENTS
-  REQUIRED_VARS SCALAPACK_links
-  )
-else()
-  find_package_handle_standard_args(SCALAPACK HANDLE_COMPONENTS
-  REQUIRED_VARS SCALAPACK_LIBRARY SCALAPACK_links
-  )
-endif()
-
-if(SCALAPACK_FOUND)
-  # need if _FOUND guard as can't overwrite imported target even if bad
-  set(SCALAPACK_LIBRARIES ${SCALAPACK_LIBRARY})
-  if(BLACS_LIBRARY)
-    list(APPEND SCALAPACK_LIBRARIES ${BLACS_LIBRARY})
-  endif()
-  if(SCALAPACK_MPI_LIB64)
-    list(APPEND SCALAPACK_LIBRARIES ${SCALAPACK_MPI_LIB64})
-  endif()
-
-  set(SCALAPACK_INCLUDE_DIRS ${SCALAPACK_INCLUDE_DIR})
-
-  message(VERBOSE "Scalapack libraries: ${SCALAPACK_LIBRARIES}
-Scalapack include directories: ${SCALAPACK_INCLUDE_DIRS}")
-
-  if(NOT TARGET SCALAPACK::SCALAPACK)
-    add_library(SCALAPACK::SCALAPACK INTERFACE IMPORTED)
-    set_property(TARGET SCALAPACK::SCALAPACK PROPERTY INTERFACE_LINK_LIBRARIES "${SCALAPACK_LIBRARIES}")
-    set_property(TARGET SCALAPACK::SCALAPACK PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${SCALAPACK_INCLUDE_DIR}")
-  endif()
-endif()
-
-mark_as_advanced(SCALAPACK_LIBRARY SCALAPACK_INCLUDE_DIR)
diff --git a/cmake/compilers.cmake b/cmake/compilers.cmake
index c1cc549..b0dd3ab 100644
--- a/cmake/compilers.cmake
+++ b/cmake/compilers.cmake
@@ -107,7 +107,3 @@ set(CMAKE_INSTALL_RPATH_USE_LINK_PATH true)
 # Necessary for shared library with Visual Studio / Windows oneAPI
 set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS true)
 
-# allow CMAKE_PREFIX_PATH with ~ expand
-if(CMAKE_PREFIX_PATH)
-  get_filename_component(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ABSOLUTE)
-endif()
diff --git a/cmake/lapack.cmake b/cmake/lapack.cmake
index d4e6336..e565d0e 100644
--- a/cmake/lapack.cmake
+++ b/cmake/lapack.cmake
@@ -2,38 +2,13 @@
 
 include(CheckFortranSourceCompiles)
 
-if(NOT DEFINED LAPACK_COMPONENTS AND DEFINED ENV{MKLROOT})
-  set(LAPACK_COMPONENTS MKL)
-endif()
-
-if(MKL IN_LIST LAPACK_COMPONENTS)
-  if(intsize64)
-    list(APPEND LAPACK_COMPONENTS MKL64)
-  endif()
-  if(openmp)
-    list(APPEND LAPACK_COMPONENTS OpenMP)
-  endif()
-endif()
-
-if(find_static)
-  list(APPEND LAPACK_COMPONENTS STATIC)
-endif()
-
-find_package(LAPACK REQUIRED COMPONENTS ${LAPACK_COMPONENTS})
+find_package(LAPACK REQUIRED)
 
 # GEMMT is recommeded in MUMPS User Manual if available
 if(gemmt)
 
 set(CMAKE_REQUIRED_INCLUDES ${LAPACK_INCLUDE_DIRS})
-
-if(find_static AND NOT WIN32 AND
-  MKL IN_LIST LAPACK_COMPONENTS AND
-  CMAKE_VERSION VERSION_GREATER_EQUAL 3.24
-  )
-  set(CMAKE_REQUIRED_LIBRARIES $<LINK_GROUP:RESCAN,${LAPACK_LIBRARIES}>)
-else()
-  set(CMAKE_REQUIRED_LIBRARIES ${LAPACK_LIBRARIES})
-endif()
+set(CMAKE_REQUIRED_LIBRARIES ${LAPACK_LIBRARIES})
 
 if(BUILD_DOUBLE)
 check_fortran_source_compiles(
diff --git a/cmake/scalapack.cmake b/cmake/scalapack.cmake
deleted file mode 100644
index a9e9311..0000000
--- a/cmake/scalapack.cmake
+++ /dev/null
@@ -1,15 +0,0 @@
-if(NOT DEFINED SCALAPACK_COMPONENTS AND DEFINED ENV{MKLROOT})
-  set(SCALAPACK_COMPONENTS MKL)
-endif()
-
-if(MKL IN_LIST SCALAPACK_COMPONENTS)
-  if(intsize64)
-    list(APPEND SCALAPACK_COMPONENTS MKL64)
-  endif()
-endif()
-
-if(find_static)
-  list(APPEND SCALAPACK_COMPONENTS STATIC)
-endif()
-
-find_package(SCALAPACK REQUIRED COMPONENTS ${SCALAPACK_COMPONENTS})
diff --git a/cmake/summary.cmake b/cmake/summary.cmake
index 3c14760..74db3a8 100644
--- a/cmake/summary.cmake
+++ b/cmake/summary.cmake
@@ -4,6 +4,7 @@ add_feature_info(64-bit-integer intsize64 "use 64-bit integers in C and Fortran"
 add_feature_info(GEMMT BLAS_HAVE_GEMMT "use GEMMT for symmetric matrix-matrix multiplication")
 
 add_feature_info(Scotch scotch "Scotch graph partitioning https://www.labri.fr/perso/pelegrin/scotch/")
+add_feature_info(METIS metis "METIS graph partitioning http://glaros.dtc.umn.edu/gkhome/metis/metis/overview")
 add_feature_info(Openmp openmp "OpenMP API https://www.openmp.org/")
 
 add_feature_info(real32 ${BUILD_SINGLE} "Build with single precision")
diff --git a/options.cmake b/options.cmake
index 7031669..6f7e19f 100644
--- a/options.cmake
+++ b/options.cmake
@@ -2,16 +2,6 @@ include(GNUInstallDirs)
 
 message(STATUS "${PROJECT_NAME} ${PROJECT_VERSION}  CMake ${CMAKE_VERSION}  Toolchain ${CMAKE_TOOLCHAIN_FILE}")
 
-option(find_static "Find static libraries for Lapack and Scalapack (default shared then static search)")
-
-if(local)
-  get_filename_component(local ${local} ABSOLUTE)
-
-  if(NOT IS_DIRECTORY ${local})
-    message(FATAL_ERROR "Local directory ${local} does not exist")
-  endif()
-endif()
-
 if(MUMPS_UPSTREAM_VERSION VERSION_GREATER_EQUAL 5.2)
   option(gemmt "GEMMT is recommended in User Manual if available" ON)
 endif()
