diff --git a/CMakeLists.txt b/CMakeLists.txt
index a15d19a..e1f1731 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,22 +1,26 @@
-cmake_minimum_required(VERSION 2.8)
-project(METIS C)
+cmake_minimum_required(VERSION 3.13)
 
-set(SHARED FALSE CACHE BOOL "build a shared library")
+project(metis VERSION 0.0.1 LANGUAGES C)
 
-if(MSVC)
-  set(METIS_INSTALL FALSE)
-else()
-  set(METIS_INSTALL TRUE)
+set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
+
+if(NOT CMAKE_BUILD_TYPE)
+  set(CMAKE_BUILD_TYPE Release)
 endif()
 
-# Configure libmetis library.
-if(SHARED)
-  set(METIS_LIBRARY_TYPE SHARED)
-else()
-  set(METIS_LIBRARY_TYPE STATIC)
-endif(SHARED)
+# -----------------------------------------------------------------------------
+include(GNUInstallDirs)
+
+find_package(GKlib REQUIRED)
+
+if(GPROF)
+  check_c_compiler_flag("-pg" HAVE_GPROF_SUPPORT)
+  if(NOT HAVE_GPROF_SUPPORT)
+    message(WARNING "GPROF support was requested, but is not available")
+  endif()
+endif()
 
-include(./conf/gkbuild.cmake)
+# -----------------------------------------------------------------------------
 
 # METIS' custom options
 #option(IDX64 "enable 64 bit ints" OFF)
@@ -34,19 +38,5 @@ include(./conf/gkbuild.cmake)
 #
 #set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${METIS_COPTIONS}")
 
-
-# Add include directories.
-# i.e., the -I equivalent
-include_directories(build/xinclude)
-include_directories(${GKLIB_PATH}/include)
-include_directories(${CMAKE_INSTALL_PREFIX}/include)
-
-# List of paths that the compiler will search for library files.
-# i.e., the -L equivalent
-link_directories(${GKLIB_PATH}/lib)
-link_directories(${CMAKE_INSTALL_PREFIX}/lib)
-
-# Recursively look for CMakeLists.txt in subdirs.
-add_subdirectory("build/xinclude")
-add_subdirectory("libmetis")
-add_subdirectory("programs")
+add_subdirectory(libmetis)
+add_subdirectory(programs)
diff --git a/conf/check_thread_storage.c b/conf/check_thread_storage.c
deleted file mode 100644
index e6e1e98..0000000
--- a/conf/check_thread_storage.c
+++ /dev/null
@@ -1,5 +0,0 @@
-extern __thread int x;
-
-int main(int argc, char **argv) {
-  return 0;
-}
diff --git a/conf/gkbuild.cmake b/conf/gkbuild.cmake
deleted file mode 100644
index 591ece4..0000000
--- a/conf/gkbuild.cmake
+++ /dev/null
@@ -1,148 +0,0 @@
-# Helper modules.
-include(CheckFunctionExists)
-include(CheckIncludeFile)
-
-# Setup options.
-option(GDB "enable use of GDB" OFF)
-option(ASSERT "turn asserts on" OFF)
-option(ASSERT2 "additional assertions" OFF)
-option(DEBUG "add debugging support" OFF)
-option(GPROF "add gprof support" OFF)
-option(VALGRIND "add valgrind support" OFF)
-option(OPENMP "enable OpenMP support" OFF)
-option(PCRE "enable PCRE support" OFF)
-option(GKREGEX "enable GKREGEX support" OFF)
-option(GKRAND "enable GKRAND support" OFF)
-
-# Add compiler flags.
-if(MSVC)
-  set(GK_COPTS "/Ox")
-  set(GK_COPTIONS "-DWIN32 -DMSC -D_CRT_SECURE_NO_DEPRECATE -DUSE_GKREGEX")
-elseif(MINGW)
-  set(GK_COPTS "-DUSE_GKREGEX")
-else()
-  set(GK_COPTIONS "-DLINUX -D_FILE_OFFSET_BITS=64")
-endif(MSVC)
-if(CYGWIN)
-  set(GK_COPTIONS "${GK_COPTIONS} -DCYGWIN")
-endif(CYGWIN)
-if(CMAKE_COMPILER_IS_GNUCC)
-# GCC opts.
-  set(GK_COPTIONS "${GK_COPTIONS} -std=c99 -fno-strict-aliasing")
-if(VALGRIND)
-  set(GK_COPTIONS "${GK_COPTIONS} -march=x86-64 -mtune=generic")
-else()
-# -march=native is not a valid flag on PPC:
-if(CMAKE_SYSTEM_PROCESSOR MATCHES "power|ppc|powerpc|ppc64|powerpc64" OR (APPLE AND CMAKE_OSX_ARCHITECTURES MATCHES "ppc|ppc64"))
-  set(GK_COPTIONS "${GK_COPTIONS} -mtune=native")
-else()
-  set(GK_COPTIONS "${GK_COPTIONS} -march=native")
-endif()
-endif(VALGRIND)
-  if(NOT MINGW)
-      set(GK_COPTIONS "${GK_COPTIONS} -fPIC")
-  endif(NOT MINGW)
-# GCC warnings.
-  set(GK_COPTIONS "${GK_COPTIONS} -Werror -Wall -pedantic -Wno-unused-function -Wno-unused-but-set-variable -Wno-unused-variable -Wno-unknown-pragmas -Wno-unused-label")
-elseif(${CMAKE_C_COMPILER_ID} MATCHES "Sun")
-# Sun insists on -xc99.
-  set(GK_COPTIONS "${GK_COPTIONS} -xc99")
-endif(CMAKE_COMPILER_IS_GNUCC)
-
-if(${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
-  set(GK_COPTIONS "${GK_COPTIONS} -xHost")
-  #  set(GK_COPTIONS "${GK_COPTIONS} -fast")
-endif()
-
-# Add support for MacOS items 
-if(APPLE)
-  set(GK_COPTIONS "${GK_COPTIONS} -DMACOS")
-endif(APPLE)
-
-# Find OpenMP if it is requested.
-if(OPENMP)
-  include(FindOpenMP)
-  if(OPENMP_FOUND)
-    set(GK_COPTIONS "${GK_COPTIONS} -D__OPENMP__ ${OpenMP_C_FLAGS}")
-  else()
-    message(WARNING "OpenMP was requested but support was not found")
-  endif(OPENMP_FOUND)
-endif(OPENMP)
-
-
-# Add various definitions.
-if(GDB)
-  set(GK_COPTS "${GK_COPTS} -g")
-  set(GK_COPTIONS "${GK_COPTIONS} -Werror")
-else()
-  set(GK_COPTS "-O3")
-endif(GDB)
-
-
-if(DEBUG)
-  set(GK_COPTS "-Og")
-  set(GK_COPTIONS "${GK_COPTIONS} -DDEBUG")
-endif(DEBUG)
-
-if(GPROF)
-  set(GK_COPTS "-pg")
-endif(GPROF)
-
-if(NOT ASSERT)
-  set(GK_COPTIONS "${GK_COPTIONS} -DNDEBUG")
-endif(NOT ASSERT)
-
-if(NOT ASSERT2)
-  set(GK_COPTIONS "${GK_COPTIONS} -DNDEBUG2")
-endif(NOT ASSERT2)
-
-
-# Add various options
-if(PCRE)
-  set(GK_COPTIONS "${GK_COPTIONS} -D__WITHPCRE__")
-endif(PCRE)
-
-if(GKREGEX)
-  set(GK_COPTIONS "${GK_COPTIONS} -DUSE_GKREGEX")
-endif(GKREGEX)
-
-if(GKRAND)
-  set(GK_COPTIONS "${GK_COPTIONS} -DUSE_GKRAND")
-endif(GKRAND)
-
-
-# Check for features.
-check_include_file(execinfo.h HAVE_EXECINFO_H)
-if(HAVE_EXECINFO_H)
-  set(GK_COPTIONS "${GK_COPTIONS} -DHAVE_EXECINFO_H")
-endif(HAVE_EXECINFO_H)
-
-check_function_exists(getline HAVE_GETLINE)
-if(HAVE_GETLINE)
-  set(GK_COPTIONS "${GK_COPTIONS} -DHAVE_GETLINE")
-endif(HAVE_GETLINE)
-
-
-# Custom check for TLS.
-if(MSVC)
-  set(GK_COPTIONS "${GK_COPTIONS} -D__thread=__declspec(thread)")
-
-  # This if checks if that value is cached or not.
-  if("${HAVE_THREADLOCALSTORAGE}" MATCHES "^${HAVE_THREADLOCALSTORAGE}$")
-    try_compile(HAVE_THREADLOCALSTORAGE
-      ${CMAKE_BINARY_DIR}
-      ${CMAKE_SOURCE_DIR}/conf/check_thread_storage.c)
-    if(HAVE_THREADLOCALSTORAGE)
-      message(STATUS "checking for thread-local storage - found")
-    else()
-      message(STATUS "checking for thread-local storage - not found")
-    endif()
-  endif()
-  if(NOT HAVE_THREADLOCALSTORAGE)
-    set(GK_COPTIONS "${GK_COPTIONS} -D__thread=")
-  endif()
-endif()
-
-# Finally set the official C flags.
-set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GK_COPTIONS} ${GK_COPTS}")
-
diff --git a/conf/metisConfig.cmake.in b/conf/metisConfig.cmake.in
new file mode 100644
index 0000000..3caad46
--- /dev/null
+++ b/conf/metisConfig.cmake.in
@@ -0,0 +1,13 @@
+if(NOT metis_FOUND)
+set(metis_FOUND True)
+
+@PACKAGE_INIT@
+
+include(CMakeFindDependencyMacro)
+find_dependency(GKlib)
+
+include(${CMAKE_CURRENT_LIST_DIR}/metisTargets.cmake)
+
+check_required_components(metis)
+
+endif()
\ No newline at end of file
diff --git a/include/CMakeLists.txt b/include/CMakeLists.txt
deleted file mode 100644
index 9515a51..0000000
--- a/include/CMakeLists.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-if(METIS_INSTALL)
-  install(FILES metis.h DESTINATION include)
-endif()
diff --git a/libmetis/CMakeLists.txt b/libmetis/CMakeLists.txt
index fc6cec6..0d0e7b4 100644
--- a/libmetis/CMakeLists.txt
+++ b/libmetis/CMakeLists.txt
@@ -1,15 +1,52 @@
-# Add this directory for internal users.
-include_directories(.)
-
 # Find sources.
-file(GLOB metis_sources *.c)
+file(GLOB metis_sources ${CMAKE_CURRENT_SOURCE_DIR}/*.c)
+file(GLOB metis_headers ${CMAKE_CURRENT_SOURCE_DIR}/*.h)
+
+add_library(${PROJECT_NAME})
+add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
+
+target_compile_features(${PROJECT_NAME} PUBLIC c_std_99)
+set_property(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE True)
+
+target_sources(${PROJECT_NAME} PRIVATE ${metis_sources} ${metis_headers} ${PROJECT_SOURCE_DIR}/include/metis.h)
+
+target_include_directories(${PROJECT_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}> $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
+                                                  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
+
+target_link_libraries(${PROJECT_NAME}
+  PUBLIC GKlib::GKlib
+  PRIVATE GKlib::GKlib_compile_definitions)
+
+target_compile_options(${PROJECT_NAME} PUBLIC $<$<AND:$<BOOL:${GPROF}>,$<BOOL:${HAVE_GPROF_SUPPORT}>>:-pg>)
+
+# -----------------------------------------------------------------------------
+# Configure and Install
+include(CMakePackageConfigHelpers)
+
+configure_package_config_file(${PROJECT_SOURCE_DIR}/conf/metisConfig.cmake.in cmake/metisConfig.cmake
+                              INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/metis)
+
+write_basic_package_version_file(
+  cmake/metisConfigVersion.cmake
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY SameMajorVersion)
+
+# ---------------------------
+install(
+  TARGETS ${PROJECT_NAME}
+  EXPORT metisTargets
+  RUNTIME   DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY   DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE   DESTINATION ${CMAKE_INSTALL_LIBDIR}
+)
+
+install(
+  FILES ${PROJECT_SOURCE_DIR}/include/metis.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
 
-# Build libmetis.
-add_library(metis ${METIS_LIBRARY_TYPE} ${metis_sources})
+install(EXPORT metisTargets FILE metisTargets.cmake NAMESPACE metis:: DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/metis)
 
-if(METIS_INSTALL)
-  install(TARGETS metis
-    LIBRARY DESTINATION lib
-    RUNTIME DESTINATION lib
-    ARCHIVE DESTINATION lib)
-endif()
+install(
+  FILES ${CMAKE_CURRENT_BINARY_DIR}/cmake/metisConfig.cmake
+        ${CMAKE_CURRENT_BINARY_DIR}/cmake/metisConfigVersion.cmake
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/metis)
\ No newline at end of file
diff --git a/programs/CMakeLists.txt b/programs/CMakeLists.txt
index baf40ad..cab3078 100644
--- a/programs/CMakeLists.txt
+++ b/programs/CMakeLists.txt
@@ -1,6 +1,3 @@
-# These programs use internal metis data structures.
-include_directories(../libmetis)
-
 # Build program.
 add_executable(gpmetis gpmetis.c cmdline_gpmetis.c io.c stat.c)
 add_executable(ndmetis ndmetis.c cmdline_ndmetis.c io.c smbfactor.c)
@@ -11,10 +8,8 @@ add_executable(cmpfillin cmpfillin.c io.c smbfactor.c)
 
 # Link with the required libraries
 foreach(prog gpmetis ndmetis mpmetis m2gmetis graphchk cmpfillin)
-  target_link_libraries(${prog} metis GKlib m)
+  target_link_libraries(${prog} PRIVATE metis::metis)
 endforeach(prog)
 
-if(METIS_INSTALL)
-  install(TARGETS gpmetis ndmetis mpmetis m2gmetis graphchk cmpfillin
-    RUNTIME DESTINATION bin)
-endif()
+install(TARGETS gpmetis ndmetis mpmetis m2gmetis graphchk cmpfillin
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
diff --git a/programs/gpmetis.c b/programs/gpmetis.c
index 4b7e0b5..b57914f 100644
--- a/programs/gpmetis.c
+++ b/programs/gpmetis.c
@@ -239,14 +239,5 @@ void GPReportResults(params_t *params, graph_t *graph, idx_t *part, idx_t objval
   printf("\nMemory Information ----------------------------------------------------------\n");
   printf("  Max memory used:\t\t %7.3"PRREAL" MB\n", (real_t)(params->maxmemory/(1024.0*1024.0)));
 
-#ifndef MACOS
-  {
-    struct rusage usage;
-    getrusage(RUSAGE_SELF, &usage);
-    printf("  rusage.ru_maxrss:\t\t %7.3"PRREAL" MB\n", (real_t)(usage.ru_maxrss/(1024.0)));
-  }
-  printf("  proc/self/stat/VmPeak:\t %7.3"PRREAL" MB\n", (real_t)gk_GetProcVmPeak()/(1024.0*1024.0));
-#endif
-
   printf("******************************************************************************\n");
 }
diff --git a/programs/mpmetis.c b/programs/mpmetis.c
index 04a6a1b..a604864 100644
--- a/programs/mpmetis.c
+++ b/programs/mpmetis.c
@@ -188,15 +188,6 @@ void MPReportResults(params_t *params, mesh_t *mesh, idx_t *epart, idx_t *npart,
   printf("\nMemory Information ----------------------------------------------------------\n");
   printf("  Max memory used:\t\t %7.3"PRREAL" MB\n", (real_t)(params->maxmemory/(1024.0*1024.0)));
 
-#ifndef MACOS
-  {
-    struct rusage usage;
-    getrusage(RUSAGE_SELF, &usage);
-    printf("  rusage.ru_maxrss:\t\t %7.3"PRREAL" MB\n", (real_t)(usage.ru_maxrss/(1024.0)));
-  }
-  printf("  proc/self/stat/VmPeak:\t %7.3"PRREAL" MB\n", (real_t)gk_GetProcVmPeak()/(1024.0*1024.0));
-#endif
-
   printf("******************************************************************************\n");
 
 }
diff --git a/programs/ndmetis.c b/programs/ndmetis.c
index 5991f0c..c6ed1b5 100644
--- a/programs/ndmetis.c
+++ b/programs/ndmetis.c
@@ -172,15 +172,6 @@ void NDReportResults(params_t *params, graph_t *graph, idx_t *perm,
   printf("\nMemory Information ----------------------------------------------------------\n");
   printf("  Max memory used:\t\t %7.3"PRREAL" MB\n", (real_t)(params->maxmemory/(1024.0*1024.0)));
 
-#ifndef MACOS
-  {
-    struct rusage usage;
-    getrusage(RUSAGE_SELF, &usage);
-    printf("  rusage.ru_maxrss:\t\t %7.3"PRREAL" MB\n", (real_t)(usage.ru_maxrss/(1024.0)));
-  }
-  printf("  proc/self/stat/VmPeak:\t %7.3"PRREAL" MB\n", (real_t)gk_GetProcVmPeak()/(1024.0*1024.0));
-#endif
-
   printf("******************************************************************************\n");
 
 }

