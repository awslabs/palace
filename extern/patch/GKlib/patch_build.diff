diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9cd1b4b..8bac52d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,31 +1,185 @@
-cmake_minimum_required(VERSION 2.8)
-project(GKlib C)
+cmake_minimum_required(VERSION 3.13)
 
-option(BUILD_SHARED_LIBS "Build shared libraries (.dll/.so) instead of static ones (.lib/.a)" OFF)
+project(GKlib VERSION 0.0.1 LANGUAGES C)
 
-get_filename_component(abs "." ABSOLUTE)
-set(GKLIB_PATH ${abs})
-unset(abs)
-include(GKlibSystem.cmake)
+set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 
-include_directories(".")
-if(MSVC)
-  include_directories("win32")
-  file(GLOB win32_sources RELATIVE "win32" "*.c")
-else(MSVC)
-  set(win32_sources, "")
-endif(MSVC)
+if(NOT CMAKE_BUILD_TYPE)
+  set(CMAKE_BUILD_TYPE Release)
+endif()
 
-add_library(GKlib ${GKlib_sources} ${win32_sources})
+# -----------------------------------------------------------------------------
+include(CheckCCompilerFlag)
+include(CheckCSourceCompiles)
+include(CheckFunctionExists)
+include(CheckIncludeFile)
+include(CMakePackageConfigHelpers)
+include(GNUInstallDirs)
 
-if(UNIX)
-  target_link_libraries(GKlib m)
-endif(UNIX)
+# -----------------------------------------------------------------------------
+# User Options
+option(ASSERT "turn asserts on" OFF)
+option(ASSERT2 "additional assertions" OFF)
+option(DEBUG "add debugging support" OFF)
+option(GPROF "add gprof support" OFF)
+option(OPENMP "enable OpenMP support" OFF)
+option(PCRE "enable PCRE support" OFF)
+option(GKREGEX "enable GKREGEX support" OFF)
+option(GKRAND "enable GKRAND support" OFF)
+
+if(NOT MSVC)
+  find_library(CMATH_LIB m REQUIRED)
+endif()
+
+# -----------------------------------------------------------------------------
+# This section from unmerged issue: https://github.com/KarypisLab/GKlib/pull/8
+check_include_file(execinfo.h HAVE_EXECINFO_H)
+check_function_exists(getline HAVE_GETLINE)
+
+if(PCRE)
+  check_include_file(pcreposix.h HAVE_PCREPOSIX_H)
+  if(NOT HAVE_PCREPOSIX_H)
+    message(WARNING "PCRE was requested, but is not available")
+  endif()
+endif()
+
+if(NOT HAVE_PCREPOSIX_H)
+  check_include_file(regex.h HAVE_REGEX_H)
+  if(NOT HAVE_REGEX_H)
+    set(USE_GKREGEX ON)
+  endif()
+endif()
+
+# Windows (Is this needed?)
+if(MSVC OR MINGW)
+  set(USE_GKREGEX ON)
+endif()
+
+if(GPROF)
+  check_c_compiler_flag("-pg" HAVE_GPROF_SUPPORT)
+  if(NOT HAVE_GPROF_SUPPORT)
+    message(WARNING "GPROF support was requested, but is not available")
+  endif()
+endif()
+
+if(OPENMP)
+  find_package(OpenMP)
+  if(NOT OpenMP_C_FOUND)
+    message(WARNING "OpenMP was requested, but is not available")
+  endif()
+endif()
+
+# thread local storage
+if(NOT DEFINED HAVE_TLS)
+  set(TLS_NAME
+      ""
+      CACHE INTERNAL "Thread local keyword")
+  foreach(tls_name "__thread" "__declspec(thread)")
+    unset(HAVE_TLS CACHE)
+    check_c_source_compiles("${tls_name} int x; int main(void) { return 0; }" HAVE_TLS)
+    if(HAVE_TLS)
+      set(TLS_NAME
+          ${tls_name}
+          CACHE INTERNAL "Thread local keyword")
+      break()
+    else()
+
+    endif()
+  endforeach()
+endif()
+
+
+add_library(${PROJECT_NAME}_compile_definitions INTERFACE)
+
+target_compile_definitions(
+  ${PROJECT_NAME}_compile_definitions
+  INTERFACE $<$<PLATFORM_ID:Linux>:LINUX>
+            $<$<NOT:$<BOOL:${ASSERT}>>:NDEBUG>
+            $<$<NOT:$<BOOL:${ASSERT2}>>:NDEBUG2>
+            $<$<OR:$<BOOL:${DEBUG}>,$<CONFIG:Debug>>:DEBUG>
+            $<$<BOOL:${GKRAND}>:GKRAND>
+            $<$<BOOL:${HAVE_EXECINFO_H}>:HAVE_EXEC_INFO_H>
+            $<$<BOOL:${PCRE}>:USE_PCRE>
+            $<$<AND:$<BOOL:${PCRE}>,$<BOOL:${HAVE_PCREPOSIX_H}>>:HAVE_PCREPOSIX_H>
+            $<$<BOOL:${HAVE_REGEX_H}>:HAVE_REGEX_H>
+            $<$<BOOL:${USE_GKREGEX}>:USE_GKREGEX>
+            $<$<BOOL:${HAVE_GETLINE}>:HAVE_GETLINE>
+            __thread=${TLS_NAME}
+            $<$<NOT:$<C_COMPILER_ID:MSVC>>:_FILE_OFFSET_BITS=64>
+            $<$<C_COMPILER_ID:MSVC>:WIN32>
+            $<$<C_COMPILER_ID:MSVC>:MSC>
+            $<$<C_COMPILER_ID:MSVC>:_CRT_SECURE_NO_DEPRECATE>)
+
+# -----------------------------------------------------------------------------
+
+add_library(${PROJECT_NAME})
+add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
+
+target_compile_features(${PROJECT_NAME} PUBLIC c_std_99)
+set_property(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE True)
+
+file(GLOB GKlib_sources ${PROJECT_SOURCE_DIR}/*.c)
+file(GLOB GKlib_headers ${PROJECT_SOURCE_DIR}/*.h)
+
+target_sources(${PROJECT_NAME} PRIVATE ${GKlib_sources} ${GKlib_headers}
+                                       $<$<PLATFORM_ID:Windows>:win32/adapt.c win32/adapt.h>)
+
+target_include_directories(${PROJECT_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+                                                  $<INSTALL_INTERFACE:include>)
+
+target_link_libraries(
+  ${PROJECT_NAME}
+  PUBLIC $<$<NOT:$<C_COMPILER_ID:MSVC>>:${CMATH_LIB}>
+  PRIVATE ${PROJECT_NAME}_compile_definitions)
+
+target_compile_options(
+  ${PROJECT_NAME} PRIVATE $<$<C_COMPILER_ID:GNU>:-fno-strict-aliasing>
+                          )
+
+target_compile_options(${PROJECT_NAME} PUBLIC $<$<AND:$<BOOL:${GPROF}>,$<BOOL:${HAVE_GPROF_SUPPORT}>>:-pg>)
+
+
+if(OpenMP_C_FOUND)
+  target_link_libraries(${PROJECT_NAME} PUBLIC OpenMP::OpenMP_C)
+endif()
+# -----------------------------------------------------------------------------
 
 include_directories("test")
 add_subdirectory("test")
 
-install(TARGETS GKlib
-  ARCHIVE DESTINATION lib/${LINSTALL_PATH}
-  LIBRARY DESTINATION lib/${LINSTALL_PATH})
-install(FILES ${GKlib_includes} DESTINATION include/${HINSTALL_PATH})
+# -----------------------------------------------------------------------------
+
+configure_package_config_file(GKlibConfig.cmake.in cmake/GKlibConfig.cmake
+                              INSTALL_DESTINATION lib/cmake/GKlib)
+
+write_basic_package_version_file(
+  cmake/GKlibConfigVersion.cmake
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY SameMajorVersion)
+
+configure_file(GKlibConfig.cmake.in GKlibConfig.cmake @ONLY)
+
+# -----------------------------------------------------------------------------
+
+# install library
+install(
+  TARGETS ${PROJECT_NAME}
+  EXPORT GKlibTargets
+  RUNTIME   DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY   DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE   DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  INCLUDES  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+
+install(
+  FILES ${GKlib_headers}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+
+install(TARGETS ${PROJECT_NAME}_compile_definitions EXPORT GKlibTargets)
+
+install(EXPORT GKlibTargets FILE GKlibTargets.cmake NAMESPACE GKlib:: DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/GKlib)
+
+
+install(
+  FILES ${CMAKE_CURRENT_BINARY_DIR}/cmake/GKlibConfig.cmake
+        ${CMAKE_CURRENT_BINARY_DIR}/cmake/GKlibConfigVersion.cmake
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/GKlib)
\ No newline at end of file
diff --git a/GKlib.h b/GKlib.h
index 9278fe4..061e4cb 100644
--- a/GKlib.h
+++ b/GKlib.h
@@ -1,6 +1,6 @@
 /*
  * GKlib.h
- * 
+ *
  * George's library of most frequently used routines
  *
  * $Id: GKlib.h 14866 2013-08-03 16:40:04Z karypis $
@@ -55,7 +55,7 @@
 
 
 
-#if defined(__OPENMP__) 
+#if defined(_OPENMP)
 #include <omp.h>
 #endif
 
diff --git a/GKlibConfig.cmake.in b/GKlibConfig.cmake.in
new file mode 100644
index 0000000..8c3f1c9
--- /dev/null
+++ b/GKlibConfig.cmake.in
@@ -0,0 +1,16 @@
+if(NOT GKlib_FOUND)
+set(GKlib_FOUND True)
+
+@PACKAGE_INIT@
+
+set(GKlib_OpenMP_C_FOUND @OpenMP_C_FOUND@)
+if(GKlib_OpenMP_C_FOUND)
+  include(CMakeFindDependencyMacro)
+  find_dependency(OpenMP)
+endif()
+
+include(${CMAKE_CURRENT_LIST_DIR}/GKlibTargets.cmake)
+
+check_required_components(GKlib)
+
+endif()
\ No newline at end of file
diff --git a/GKlibSystem.cmake b/GKlibSystem.cmake
deleted file mode 100644
index 31a1cf1..0000000
--- a/GKlibSystem.cmake
+++ /dev/null
@@ -1,152 +0,0 @@
-# Helper modules.
-include(CheckFunctionExists)
-include(CheckIncludeFile)
-
-# Setup options.
-option(GDB "enable use of GDB" OFF)
-option(ASSERT "turn asserts on" OFF)
-option(ASSERT2 "additional assertions" OFF)
-option(DEBUG "add debugging support" OFF)
-option(GPROF "add gprof support" OFF)
-option(VALGRIND "add valgrind support" OFF)
-option(OPENMP "enable OpenMP support" OFF)
-option(PCRE "enable PCRE support" OFF)
-option(GKREGEX "enable GKREGEX support" OFF)
-option(GKRAND "enable GKRAND support" OFF)
-option(NO_X86 "enable NO_X86 support" OFF)
-
-
-# Add compiler flags.
-if(MSVC)
-  set(GKlib_COPTS "/Ox")
-  set(GKlib_COPTIONS "-DWIN32 -DMSC -D_CRT_SECURE_NO_DEPRECATE -DUSE_GKREGEX")
-elseif(MINGW)
-  set(GKlib_COPTS "-DUSE_GKREGEX")
-else()
-  set(GKlib_COPTIONS "-DLINUX -D_FILE_OFFSET_BITS=64")
-endif(MSVC)
-if(CYGWIN)
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -DCYGWIN")
-endif(CYGWIN)
-if(CMAKE_COMPILER_IS_GNUCC)
-# GCC opts.
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -std=c99 -fno-strict-aliasing")
-if(VALGRIND)
-  set(GKlib_COPTIONS "${GK_COPTIONS} -march=x86-64 -mtune=generic")
-else()
-# -march=native is not a valid flag on PPC:
-if(CMAKE_SYSTEM_PROCESSOR MATCHES "power|ppc|powerpc|ppc64|powerpc64" OR (APPLE AND CMAKE_OSX_ARCHITECTURES MATCHES "ppc|ppc64"))
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -mtune=native")
-else()
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -march=native")
-endif()
-endif(VALGRIND)
-  if(NOT MINGW)
-      set(GKlib_COPTIONS "${GKlib_COPTIONS} -fPIC")
-  endif(NOT MINGW)
-# GCC warnings.
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -Werror -Wall -pedantic -Wno-unused-function -Wno-unused-but-set-variable -Wno-unused-variable -Wno-unknown-pragmas -Wno-unused-label")
-elseif(${CMAKE_C_COMPILER_ID} MATCHES "Sun")
-# Sun insists on -xc99.
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -xc99")
-endif(CMAKE_COMPILER_IS_GNUCC)
-
-# Intel compiler
-if(${CMAKE_C_COMPILER_ID} MATCHES "Intel")
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -xHost -std=c99")
-endif()
-
-# Find OpenMP if it is requested.
-if(OPENMP)
-  include(FindOpenMP)
-  if(OPENMP_FOUND)
-    set(GKlib_COPTIONS "${GKlib_COPTIONS} -D__OPENMP__ ${OpenMP_C_FLAGS}")
-  else()
-    message(WARNING "OpenMP was requested but support was not found")
-  endif(OPENMP_FOUND)
-endif(OPENMP)
-
-# Set the CPU type 
-if(NO_X86)
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -DNO_X86=${NO_X86}")
-endif(NO_X86)
-
-# Add various definitions.
-if(GDB)
-  set(GKlib_COPTS "${GKlib_COPTS} -g")
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -Werror")
-else()
-  set(GKlib_COPTS "-O3")
-endif(GDB)
-
-
-if(DEBUG)
-  set(GKlib_COPTS "-g")
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -DDEBUG")
-endif(DEBUG)
-
-if(GPROF)
-  set(GKlib_COPTS "-pg")
-endif(GPROF)
-
-if(NOT ASSERT)
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -DNDEBUG")
-endif(NOT ASSERT)
-
-if(NOT ASSERT2)
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -DNDEBUG2")
-endif(NOT ASSERT2)
-
-
-# Add various options
-if(PCRE)
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -D__WITHPCRE__")
-endif(PCRE)
-
-if(GKREGEX)
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -DUSE_GKREGEX")
-endif(GKREGEX)
-
-if(GKRAND)
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -DUSE_GKRAND")
-endif(GKRAND)
-
-
-# Check for features.
-check_include_file(execinfo.h HAVE_EXECINFO_H)
-if(HAVE_EXECINFO_H)
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -DHAVE_EXECINFO_H")
-endif(HAVE_EXECINFO_H)
-
-check_function_exists(getline HAVE_GETLINE)
-if(HAVE_GETLINE)
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -DHAVE_GETLINE")
-endif(HAVE_GETLINE)
-
-
-# Custom check for TLS.
-if(MSVC)
-   set(GKlib_COPTIONS "${GKlib_COPTIONS} -D__thread=__declspec(thread)")
-
-  # This if checks if that value is cached or not.
-  if("${HAVE_THREADLOCALSTORAGE}" MATCHES "^${HAVE_THREADLOCALSTORAGE}$")
-    try_compile(HAVE_THREADLOCALSTORAGE
-      ${CMAKE_BINARY_DIR}
-      ${GKLIB_PATH}/conf/check_thread_storage.c)
-    if(HAVE_THREADLOCALSTORAGE)
-      message(STATUS "checking for thread-local storage - found")
-    else()
-      message(STATUS "checking for thread-local storage - not found")
-    endif()
-  endif()
-  if(NOT HAVE_THREADLOCALSTORAGE)
-    set(GKlib_COPTIONS "${GKlib_COPTIONS} -D__thread=")
-  endif()
-endif()
-
-# Finally set the official C flags.
-set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GKlib_COPTIONS} ${GKlib_COPTS}")
-
-# Find GKlib sources.
-file(GLOB GKlib_sources ${GKLIB_PATH}/*.c)
-file(GLOB GKlib_includes ${GKLIB_PATH}/*.h)
diff --git a/Makefile b/Makefile
deleted file mode 100644
index 6ac97b9..0000000
--- a/Makefile
+++ /dev/null
@@ -1,87 +0,0 @@
-# Configuration options.
-cc       = gcc
-prefix   = ~/local
-openmp   = not-set
-gdb      = not-set
-assert   = not-set
-assert2  = not-set
-debug    = not-set
-gprof    = not-set
-valgrind = not-set
-pcre     = not-set
-gkregex  = not-set
-gkrand   = not-set
-
-
-# Basically proxies everything to the builddir cmake.
-cputype = $(shell uname -m | sed "s/\\ /_/g")
-systype = $(shell uname -s)
-
-BUILDDIR = build/$(systype)-$(cputype)
-
-# Process configuration options.
-CONFIG_FLAGS = -DCMAKE_VERBOSE_MAKEFILE=1
-ifneq ($(gdb), not-set)
-    CONFIG_FLAGS += -DGDB=$(gdb)
-endif
-ifneq ($(assert), not-set)
-    CONFIG_FLAGS += -DASSERT=$(assert)
-endif
-ifneq ($(assert2), not-set)
-    CONFIG_FLAGS += -DASSERT2=$(assert2)
-endif
-ifneq ($(debug), not-set)
-    CONFIG_FLAGS += -DDEBUG=$(debug)
-endif
-ifneq ($(gprof), not-set)
-    CONFIG_FLAGS += -DGPROF=$(gprof)
-endif
-ifneq ($(valgrind), not-set)
-    CONFIG_FLAGS += -DVALGRIND=$(valgrind)
-endif
-ifneq ($(openmp), not-set)
-    CONFIG_FLAGS += -DOPENMP=$(openmp)
-endif
-ifneq ($(pcre), not-set)
-    CONFIG_FLAGS += -DPCRE=$(pcre)
-endif
-ifneq ($(gkregex), not-set)
-    CONFIG_FLAGS += -DGKREGEX=$(pcre)
-endif
-ifneq ($(gkrand), not-set)
-    CONFIG_FLAGS += -DGKRAND=$(pcre)
-endif
-ifneq ($(prefix), not-set)
-    CONFIG_FLAGS += -DCMAKE_INSTALL_PREFIX=$(prefix)
-endif
-ifneq ($(cc), not-set)
-    CONFIG_FLAGS += -DCMAKE_C_COMPILER=$(cc)
-endif
-ifneq ($(cputype), x86_64)
-    CONFIG_FLAGS += -DNO_X86=$(cputype)
-endif
-
-define run-config
-mkdir -p $(BUILDDIR)
-cd $(BUILDDIR) && cmake $(CURDIR) $(CONFIG_FLAGS)
-endef
-
-all clean install: $(BUILDDIR)
-	make -C $(BUILDDIR) $@
-
-uninstall:
-	 xargs rm < $(BUILDDIR)/install_manifest.txt
-
-$(BUILDDIR):
-	$(run-config)
-
-config: distclean
-	$(run-config)
-
-distclean:
-	rm -rf $(BUILDDIR)
-
-remake:
-	find . -name CMakeLists.txt -exec touch {} ';'
-
-.PHONY: config distclean all clean install uninstall remake
diff --git a/README.md b/README.md
index f94eeea..93a7d76 100644
--- a/README.md
+++ b/README.md
@@ -1,54 +1,6 @@
 # GKlib
 A library of various helper routines and frameworks used by many of the lab's software
 
-## Build requirements
- - CMake 2.8, found at http://www.cmake.org/, as well as GNU make. 
 
-Assuming that the above are available, two commands should suffice to 
-build the software:
-```
-make config 
-make
-```
-
-## Configuring the build
-It is primarily configured by passing options to make config. For example:
-```
-make config cc=icc
-```
-
-would configure it to be built using icc.
-
-Configuration options are:
-```
-cc=[compiler]     - The C compiler to use [default: gcc]
-prefix=[PATH]     - Set the installation prefix [default: ~/local]
-openmp=set        - To build a version with OpenMP support
-```
-
-
-## Building and installing
-To build and install, run the following
-```
-make
-make install
-```
-
-By default, the library file, header file, and binaries will be installed in
-```
-~/local/lib
-~/local/include
-~/local/bin
-```
-
-## Other make commands
-    make uninstall 
-         Removes all files installed by 'make install'.
-   
-    make clean 
-         Removes all object files but retains the configuration options.
-   
-    make distclean 
-         Performs clean and completely removes the build directory.
 
 
diff --git a/conf/check_thread_storage.c b/conf/check_thread_storage.c
deleted file mode 100644
index e6e1e98..0000000
--- a/conf/check_thread_storage.c
+++ /dev/null
@@ -1,5 +0,0 @@
-extern __thread int x;
-
-int main(int argc, char **argv) {
-  return 0;
-}
diff --git a/gk_proto.h b/gk_proto.h
index 6fd6bd4..aa943a5 100644
--- a/gk_proto.h
+++ b/gk_proto.h
@@ -292,7 +292,7 @@ uint32_t gk_randint32(void);
 /*-------------------------------------------------------------
  * OpenMP fake functions
  *-------------------------------------------------------------*/
-#if !defined(__OPENMP__)
+#if !defined(_OPENMP)
 void omp_set_num_threads(int num_threads);
 int omp_get_num_threads(void);
 int omp_get_max_threads(void);
@@ -303,7 +303,7 @@ void omp_set_dynamic(int num_threads);
 int omp_get_dynamic(void);
 void omp_set_nested(int nested);
 int omp_get_nested(void);
-#endif /* __OPENMP__ */
+#endif /* _OPENMP */
 
 
 /*-------------------------------------------------------------
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 8584820..04ecac1 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -9,11 +9,15 @@ add_executable(grKx grKx.c)
 add_executable(m2mnbrs m2mnbrs.c)
 add_executable(cmpnbrs cmpnbrs.c)
 add_executable(splatt2svd splatt2svd.c)
-add_executable(gkuniq gkuniq.c)
 
-foreach(prog strings gksort fis gkrw gkgraph csrcnv grKx m2mnbrs cmpnbrs splatt2svd gkuniq)
+foreach(prog strings gksort fis gkrw gkgraph csrcnv grKx m2mnbrs cmpnbrs splatt2svd)
   target_link_libraries(${prog} GKlib)
 endforeach(prog)
 
+if(NOT ${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch64|arm*")
+  add_executable(gkuniq gkuniq.c)
+  target_link_libraries(gkuniq GKlib)
+endif()
+
 # Install a subset of them
 install(TARGETS csrcnv RUNTIME DESTINATION bin)
diff --git a/timers.c b/timers.c
index bb8f296..b004e23 100644
--- a/timers.c
+++ b/timers.c
@@ -35,7 +35,7 @@ double gk_WClockSeconds(void)
 **************************************************************************/
 double gk_CPUSeconds(void)
 {
-//#ifdef __OPENMP__
+//#ifdef _OPENMP
 #ifdef __OPENMPXXXX__
   return omp_get_wtime();
 #else

