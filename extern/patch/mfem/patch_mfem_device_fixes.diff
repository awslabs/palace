diff --git a/general/device.cpp b/general/device.cpp
index fc0c307b04..5053471554 100644
--- a/general/device.cpp
+++ b/general/device.cpp
@@ -9,6 +9,7 @@
 // terms of the BSD-3 license. We welcome feedback and contributions, see file
 // CONTRIBUTING.md for details.
 
+#include "device.hpp"
 #include "forall.hpp"
 #include "occa.hpp"
 #ifdef MFEM_USE_CEED
@@ -19,7 +20,6 @@
 #endif
 
 #include <unordered_map>
-#include <string>
 #include <map>
 
 namespace mfem
@@ -147,7 +147,6 @@ Device::Device()
    }
 }
 
-
 Device::~Device()
 {
 #ifdef MFEM_USE_MPI
@@ -156,7 +155,6 @@ Device::~Device()
    if ( device_env && !destroy_mm) { return; }
    if (!device_env &&  destroy_mm && !mem_host_env)
    {
-      free(device_option);
 #ifdef MFEM_USE_CEED
       // Destroy FES -> CeedBasis, CeedElemRestriction hash table contents
       for (auto entry : internal::ceed_basis_map)
@@ -175,7 +173,6 @@ Device::~Device()
       mm.Destroy();
    }
    Get().ngpu = -1;
-   Get().mode = SEQUENTIAL;
    Get().backends = Backend::CPU;
    Get().host_mem_type = MemoryType::HOST;
    Get().host_mem_class = MemoryClass::HOST;
@@ -199,28 +196,22 @@ void Device::Configure(const std::string &device, const int device_id)
    {
       bmap[internal::backend_name[i]] = internal::backend_list[i];
    }
-   std::string::size_type beg = 0, end, option;
+   std::string device_option;
+   std::string::size_type beg = 0, end;
    while (1)
    {
       end = device.find(',', beg);
       end = (end != std::string::npos) ? end : device.size();
       const std::string bname = device.substr(beg, end - beg);
-      option = bname.find(':');
-      if (option==std::string::npos) // No option
+      const auto option = bname.find(':');
+      const std::string backend = (option != std::string::npos) ?
+                                  bname.substr(0, option) : bname;
+      const auto it = bmap.find(backend);
+      MFEM_VERIFY(it != bmap.end(), "Invalid backend name: '" << backend << '\'');
+      Get().MarkBackend(it->second);
+      if (option != std::string::npos)
       {
-         const std::string backend = bname;
-         std::map<std::string, Backend::Id>::iterator it = bmap.find(backend);
-         MFEM_VERIFY(it != bmap.end(), "invalid backend name: '" << backend << '\'');
-         Get().MarkBackend(it->second);
-      }
-      else
-      {
-         const std::string backend = bname.substr(0, option);
-         const std::string boption = bname.substr(option+1);
-         Get().device_option = strdup(boption.c_str());
-         std::map<std::string, Backend::Id>::iterator it = bmap.find(backend);
-         MFEM_VERIFY(it != bmap.end(), "invalid backend name: '" << backend << '\'');
-         Get().MarkBackend(it->second);
+         device_option += bname.substr(option);
       }
       if (end == device.size()) { break; }
       beg = end + 1;
@@ -246,10 +237,10 @@ void Device::Configure(const std::string &device, const int device_id)
 #endif
 
    // Perform setup.
-   Get().Setup(device_id);
+   Get().Setup(device_option, device_id);
 
-   // Enable the device
-   Enable();
+   // Configure the host/device MemoryType/MemoryClass.
+   Get().UpdateMemoryTypeAndClass(device_option);
 
    // Copy all data members from the global 'singleton_device' into '*this'.
    if (this != &Get()) { std::memcpy(this, &Get(), sizeof(Device)); }
@@ -325,10 +316,9 @@ void Device::Print(std::ostream &os)
    os << std::endl;
 }
 
-void Device::UpdateMemoryTypeAndClass()
+void Device::UpdateMemoryTypeAndClass(const std::string &device_option)
 {
    const bool debug = Device::Allows(Backend::DEBUG_DEVICE);
-
    const bool device = Device::Allows(Backend::DEVICE_MASK);
 
 #ifdef MFEM_USE_UMPIRE
@@ -375,7 +365,7 @@ void Device::UpdateMemoryTypeAndClass()
    }
 
    // Enable the UVM shortcut when requested
-   if (device && device_option && !strcmp(device_option, "uvm"))
+   if (device && device_option.find(":uvm") != std::string::npos)
    {
       host_mem_type = MemoryType::MANAGED;
       device_mem_type = MemoryType::MANAGED;
@@ -395,26 +385,29 @@ void Device::UpdateMemoryTypeAndClass()
    mm.Configure(host_mem_type, device_mem_type);
 }
 
-void Device::Enable()
+// static method
+int Device::GetDeviceCount()
 {
-   const bool accelerated = Get().backends & ~(Backend::CPU);
-   if (accelerated) { Get().mode = Device::ACCELERATED;}
-   Get().UpdateMemoryTypeAndClass();
-}
-
+   if (Get().ngpu >= 0) { return Get().ngpu; }
 #ifdef MFEM_USE_CUDA
-static void DeviceSetup(const int dev, int &ngpu)
-{
-   ngpu = CuGetDeviceCount();
-   MFEM_VERIFY(ngpu > 0, "No CUDA device found!");
-   MFEM_GPU_CHECK(cudaSetDevice(dev));
-}
+   return CuGetDeviceCount();
+#elif MFEM_USE_HIP
+   int ngpu;
+   MFEM_GPU_CHECK(hipGetDeviceCount(&ngpu));
+   return ngpu;
+#else
+   MFEM_ABORT("Unable to query number of available devices without"
+              " MFEM_USE_CUDA or MFEM_USE_HIP!");
+   return -1;
 #endif
+}
 
 static void CudaDeviceSetup(const int dev, int &ngpu)
 {
 #ifdef MFEM_USE_CUDA
-   DeviceSetup(dev, ngpu);
+   ngpu = CuGetDeviceCount();
+   MFEM_VERIFY(ngpu > 0, "No CUDA device found!");
+   MFEM_GPU_CHECK(cudaSetDevice(dev));
 #else
    MFEM_CONTRACT_VAR(dev);
    MFEM_CONTRACT_VAR(ngpu);
@@ -436,7 +429,7 @@ static void HipDeviceSetup(const int dev, int &ngpu)
 static void RajaDeviceSetup(const int dev, int &ngpu)
 {
 #ifdef MFEM_USE_CUDA
-   if (ngpu <= 0) { DeviceSetup(dev, ngpu); }
+   CudaDeviceSetup(dev, ngpu);
 #elif defined(MFEM_USE_HIP)
    HipDeviceSetup(dev, ngpu);
 #else
@@ -520,7 +513,7 @@ static void CeedDeviceSetup(const char* ceed_spec)
 #endif
 }
 
-void Device::Setup(const int device_id)
+void Device::Setup(const std::string &device_option, const int device_id)
 {
    MFEM_VERIFY(ngpu == -1, "the mfem::Device is already configured!");
 
@@ -546,51 +539,38 @@ void Device::Setup(const int device_id)
 #ifndef MFEM_USE_CEED
    MFEM_VERIFY(!Allows(Backend::CEED_MASK),
                "the CEED backends require MFEM built with MFEM_USE_CEED=YES");
-#else
-   int ceed_cpu  = Allows(Backend::CEED_CPU);
-   int ceed_cuda = Allows(Backend::CEED_CUDA);
-   int ceed_hip  = Allows(Backend::CEED_HIP);
-   MFEM_VERIFY(ceed_cpu + ceed_cuda + ceed_hip <= 1,
-               "Only one CEED backend can be enabled at a time!");
 #endif
    if (Allows(Backend::CUDA)) { CudaDeviceSetup(dev, ngpu); }
    if (Allows(Backend::HIP)) { HipDeviceSetup(dev, ngpu); }
    if (Allows(Backend::RAJA_CUDA) || Allows(Backend::RAJA_HIP))
    { RajaDeviceSetup(dev, ngpu); }
-   // The check for MFEM_USE_OCCA is in the function OccaDeviceSetup().
    if (Allows(Backend::OCCA_MASK)) { OccaDeviceSetup(dev); }
-   if (Allows(Backend::CEED_CPU))
-   {
-      if (!device_option)
-      {
-         CeedDeviceSetup("/cpu/self");
-      }
-      else
-      {
-         CeedDeviceSetup(device_option);
-      }
-   }
-   if (Allows(Backend::CEED_CUDA))
-   {
-      if (!device_option)
-      {
-         // NOTE: libCEED's /gpu/cuda/gen backend is non-deterministic!
-         CeedDeviceSetup("/gpu/cuda/gen");
-      }
-      else
-      {
-         CeedDeviceSetup(device_option);
-      }
-   }
-   if (Allows(Backend::CEED_HIP))
+   if (Allows(Backend::CEED_MASK))
    {
-      if (!device_option)
+      int ceed_cpu  = Allows(Backend::CEED_CPU);
+      int ceed_cuda = Allows(Backend::CEED_CUDA);
+      int ceed_hip  = Allows(Backend::CEED_HIP);
+      MFEM_VERIFY(ceed_cpu + ceed_cuda + ceed_hip == 1,
+                  "Only one CEED backend can be enabled at a time!");
+
+      // NOTE: libCEED's /gpu/cuda/gen and /gpu/hip/gen backends are non-
+      // deterministic!
+      const char *ceed_spec_search = Allows(Backend::CEED_CPU) ? ":/cpu/self" :
+                                     (Allows(Backend::CEED_CUDA) ? ":/gpu/cuda" :
+                                      (Allows(Backend::CEED_HIP) ? ":/gpu/hip" : ""));
+      const char *ceed_spec_default = Allows(Backend::CEED_CPU) ? "/cpu/self" :
+                                      (Allows(Backend::CEED_CUDA) ? "/gpu/cuda/gen" :
+                                       (Allows(Backend::CEED_HIP) ? "/gpu/hip/gen" : ""));
+      std::string::size_type beg = device_option.find(ceed_spec_search), end;
+      if (beg == std::string::npos)
       {
-         CeedDeviceSetup("/gpu/hip");
+         CeedDeviceSetup(ceed_spec_default);
       }
       else
       {
-         CeedDeviceSetup(device_option);
+         end = device_option.find(':', beg + 1);
+         end = (end != std::string::npos) ? end : device_option.size();
+         CeedDeviceSetup(device_option.substr(beg + 1, end - beg - 1).c_str());
       }
    }
    if (Allows(Backend::DEBUG_DEVICE)) { ngpu = 1; }
@@ -749,4 +729,4 @@ int Device::WarpSize()
    return WarpSize(dev);
 }
 
-} // mfem
+} // namespace mfem
diff --git a/general/device.hpp b/general/device.hpp
index 8ceee9866a..b1aa788ca2 100644
--- a/general/device.hpp
+++ b/general/device.hpp
@@ -16,6 +16,8 @@
 #include "globals.hpp"
 #include "mem_manager.hpp"
 
+#include <string>
+
 namespace mfem
 {
 
@@ -95,7 +97,6 @@ struct Backend
       CEED_MASK = CEED_CPU | CEED_CUDA | CEED_HIP,
       /// Biwise-OR of all device backends
       DEVICE_MASK = CUDA_MASK | HIP_MASK | DEBUG_DEVICE,
-
       /// Biwise-OR of all RAJA backends
       RAJA_MASK = RAJA_CPU | RAJA_OMP | RAJA_CUDA | RAJA_HIP,
       /// Biwise-OR of all OCCA backends
@@ -123,16 +124,16 @@ class Device
 {
 private:
    friend class MemoryManager;
-   enum MODES {SEQUENTIAL, ACCELERATED};
 
    static bool device_env, mem_host_env, mem_device_env, mem_types_set;
    MFEM_ENZYME_INACTIVE static MFEM_EXPORT Device device_singleton;
 
-   MODES mode = Device::SEQUENTIAL;
    int dev = 0;   ///< Device ID of the configured device.
    int ngpu = -1; ///< Number of detected devices; -1: not initialized.
+
    /// Bitwise-OR of all configured backends.
    unsigned long backends = Backend::CPU;
+
    /// Set to true during configuration, except in 'device_singleton'.
    bool destroy_mm = false;
    bool mpi_gpu_aware = false;
@@ -145,28 +146,21 @@ private:
    /// Current Device MemoryClass
    MemoryClass device_mem_class = MemoryClass::HOST;
 
-   char *device_option = NULL;
-   Device(Device const&);
-   void operator=(Device const&);
-   static Device& Get() { return device_singleton; }
-
-   /// Setup switcher based on configuration settings
-   void Setup(const int device_id = 0);
-
-   void MarkBackend(Backend::Id b) { backends |= b; }
+   // Delete copy constructor and copy assignment.
+   Device(Device const &) = delete;
+   void operator=(Device const &) = delete;
 
-   void UpdateMemoryTypeAndClass();
+   // Access the Device singleton.
+   static Device& Get() { return device_singleton; }
 
-   /// Enable the use of the configured device in the code that follows.
-   /** After this call MFEM classes will use the backend kernels whenever
-       possible, transferring data automatically to the device, if necessary.
+   /// Setup switcher based on configuration settings.
+   void Setup(const std::string &device_option, const int device_id);
 
-       If the only configured backend is the default host CPU one, the device
-       will remain disabled.
+   /// Configure host/device MemoryType/MemoryClass.
+   void UpdateMemoryTypeAndClass(const std::string &device_option);
 
-       If the device is actually enabled, this method will also update the
-       current host/device MemoryType and MemoryClass. */
-   static void Enable();
+   /// Configure the backends to include @a b.
+   void MarkBackend(Backend::Id b) { backends |= b; }
 
 public:
    /** @brief Default constructor. Unless Configure() is called later, the
@@ -183,16 +177,16 @@ public:
        a program.
        @note This object should be destroyed after all other MFEM objects that
        use the Device are destroyed. */
-   Device(const std::string &device, const int dev = 0)
-   { Configure(device, dev); }
+   Device(const std::string &device, const int device_id = 0)
+   { Configure(device, device_id); }
 
    /// Destructor.
    ~Device();
 
    /// Configure the Device backends.
    /** The string parameter @a device must be a comma-separated list of backend
-       string names (see below). The @a dev argument specifies the ID of the
-       actual devices (e.g. GPU) to use.
+       string names (see below). The @a device_id argument specifies the ID of
+       the actual devices (e.g. GPU) to use.
        * The available backends are described by the Backend class.
        * The string name of a backend is the lowercase version of the
          Backend::Id enumeration constant with '_' replaced by '-', e.g. the
@@ -220,8 +214,10 @@ public:
          and evaluation of operators and enables the 'hip' backend to avoid
          transfers between host and device.
        * The 'debug' backend should not be combined with other device backends.
-   */
-   void Configure(const std::string &device, const int dev = 0);
+
+       @note If the device is actually enabled, this method will also update the
+       current host/device MemoryType and MemoryClass. */
+   void Configure(const std::string &device, const int device_id = 0);
 
    /// Set the default host and device MemoryTypes, @a h_mt and @a d_mt.
    /** The host and device MemoryTypes are also set to be dual to each other.
@@ -244,14 +240,17 @@ public:
    static inline bool IsAvailable() { return Get().ngpu > 0; }
 
    /// Return true if any backend other than Backend::CPU is enabled.
-   static inline bool IsEnabled() { return Get().mode == ACCELERATED; }
+   static inline bool IsEnabled() { return Get().backends & ~(Backend::CPU); }
 
    /// The opposite of IsEnabled().
    static inline bool IsDisabled() { return !IsEnabled(); }
 
-   /// Get the device id of the configured device.
+   /// Get the device ID of the configured device.
    static inline int GetId() { return Get().dev; }
 
+   /// Get the number of available devices (may be called before configuration).
+   static int GetDeviceCount();
+
    /** @brief Return true if any of the backends in the backend mask, @a b_mask,
        are allowed. */
    /** This method can be used with any of the Backend::Id constants, the
@@ -285,9 +284,13 @@ public:
    /** @deprecated Use GetDeviceMemoryClass() instead. */
    static inline MemoryClass GetMemoryClass() { return Get().device_mem_class; }
 
+   /** @brief Manually set the status of GPU-aware MPI flag for use in MPI
+       communication routines which have optimized implementations for device
+       buffers. */
    static void SetGPUAwareMPI(const bool force = true)
    { Get().mpi_gpu_aware = force; }
 
+   /// Get the status of GPU-aware MPI flag.
    static bool GetGPUAwareMPI() { return Get().mpi_gpu_aware; }
 
    /** Query the device driver for what memory type a given @a ptr is allocated
@@ -320,7 +323,7 @@ public:
     and ReadWrite(), while setting the device use flag in @a mem, if @a on_dev
     is true. */
 template <typename T>
-MemoryClass GetMemoryClass(const Memory<T> &mem, bool on_dev)
+inline MemoryClass GetMemoryClass(const Memory<T> &mem, bool on_dev)
 {
    if (!on_dev)
    {
@@ -384,6 +387,6 @@ inline T *HostReadWrite(Memory<T> &mem, int size)
    return mfem::ReadWrite(mem, size, false);
 }
 
-} // mfem
+} // namespace mfem
 
 #endif // MFEM_DEVICE_HPP
