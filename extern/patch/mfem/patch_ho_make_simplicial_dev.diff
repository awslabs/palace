diff --git a/CHANGELOG b/CHANGELOG
index 1d6b69d8ac..c6faa6f669 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -10,8 +10,10 @@
 
 Version 4.8.1 (development)
 ===========================
-- Added support for variational resampling of H1 vector fields to ParMoonolith 
+- Added support for variational resampling of H1 vector fields to ParMoonolith
   integration.
+- Added support for higher order meshes in Mesh::MakeSimplicial and ParMesh::MakeSimplicial.
+
 
 Version 4.8, released on Apr 9, 2025
 ====================================
diff --git a/fem/gridfunc.cpp b/fem/gridfunc.cpp
index 5bc4ba65a3..9a07a319aa 100644
--- a/fem/gridfunc.cpp
+++ b/fem/gridfunc.cpp
@@ -1913,7 +1913,6 @@ void GridFunction::RestrictConforming()
 
 void GridFunction::GetNodalValues(Vector &nval, int vdim) const
 {
-   int i, j;
    Array<int> vertices;
    Array<real_t> values;
    Array<int> overlap(fes->GetNV());
@@ -1921,17 +1920,17 @@ void GridFunction::GetNodalValues(Vector &nval, int vdim) const
    nval = 0.0;
    overlap = 0;
    nval.HostReadWrite();
-   for (i = 0; i < fes->GetNE(); i++)
+   for (int i = 0; i < fes->GetNE(); i++)
    {
       fes->GetElementVertices(i, vertices);
       GetNodalValues(i, values, vdim);
-      for (j = 0; j < vertices.Size(); j++)
+      for (int j = 0; j < vertices.Size(); j++)
       {
          nval(vertices[j]) += values[j];
          overlap[vertices[j]]++;
       }
    }
-   for (i = 0; i < overlap.Size(); i++)
+   for (int i = 0; i < overlap.Size(); i++)
    {
       nval(i) /= overlap[i];
    }
diff --git a/general/device.cpp b/general/device.cpp
index 5053471554..c87551f2be 100644
--- a/general/device.cpp
+++ b/general/device.cpp
@@ -186,7 +186,7 @@ void Device::Configure(const std::string &device, const int device_id)
    // and avoid the 'singleton_device' to destroy the mm.
    if (device_env)
    {
-      std::memcpy(this, &Get(), sizeof(Device));
+      std::memcpy((void*)this, &Get(), sizeof(Device));
       Get().destroy_mm = false;
       return;
    }
@@ -243,7 +243,7 @@ void Device::Configure(const std::string &device, const int device_id)
    Get().UpdateMemoryTypeAndClass(device_option);
 
    // Copy all data members from the global 'singleton_device' into '*this'.
-   if (this != &Get()) { std::memcpy(this, &Get(), sizeof(Device)); }
+   if (this != &Get()) { std::memcpy((void*)this, &Get(), sizeof(Device)); }
 
    // Only '*this' will call the MemoryManager::Destroy() method.
    destroy_mm = true;
diff --git a/mesh/mesh.cpp b/mesh/mesh.cpp
index 89e0508dae..24b2811c34 100644
--- a/mesh/mesh.cpp
+++ b/mesh/mesh.cpp
@@ -32,6 +32,7 @@
 #include <cstring>
 #include <ctime>
 #include <functional>
+#include <numeric>
 #include <unordered_map>
 #include <unordered_set>
 
@@ -1553,6 +1554,7 @@ Geometry::Type Mesh::GetTypicalElementGeometry() const
    return geom;
 }
 
+
 void Mesh::GetExteriorFaceMarker(Array<int> & face_marker) const
 {
    const int num_faces = GetNumFaces();
@@ -5432,11 +5434,15 @@ void Mesh::MakeRefined_(Mesh &orig_mesh, const Array<int> &ref_factors,
 Mesh Mesh::MakeSimplicial(const Mesh &orig_mesh)
 {
    Mesh mesh;
-   mesh.MakeSimplicial_(orig_mesh, NULL);
+   auto parent_elements = mesh.MakeSimplicial_(orig_mesh, NULL);
+   if (orig_mesh.GetNodes() != nullptr)
+   {
+      mesh.MakeHigherOrderSimplicial_(orig_mesh, parent_elements);
+   }
    return mesh;
 }
 
-void Mesh::MakeSimplicial_(const Mesh &orig_mesh, int *vglobal)
+Array<int> Mesh::MakeSimplicial_(const Mesh &orig_mesh, int *vglobal)
 {
    MFEM_VERIFY(const_cast<Mesh&>(orig_mesh).CheckElementOrientation(false) == 0,
                "Mesh::MakeSimplicial requires a properly oriented input mesh");
@@ -5450,7 +5456,9 @@ void Mesh::MakeSimplicial_(const Mesh &orig_mesh, int *vglobal)
    {
       Mesh copy(orig_mesh);
       Swap(copy, true);
-      return;
+      Array<int> parent_elements(GetNE());
+      std::iota(parent_elements.begin(), parent_elements.end(), 0);
+      return parent_elements;
    }
 
    int nv = orig_mesh.GetNV();
@@ -5492,15 +5500,20 @@ void Mesh::MakeSimplicial_(const Mesh &orig_mesh, int *vglobal)
    // global vertex number). Use the supplied global numbering, if it is
    // non-NULL, otherwise use the local numbering.
    Array<int> vglobal_id;
-   if (vglobal == NULL)
+   if (vglobal == nullptr)
    {
       vglobal_id.SetSize(nv);
-      for (int i=0; i<nv; ++i) { vglobal_id[i] = i; }
+      std::iota(vglobal_id.begin(), vglobal_id.end(), 0);
       vglobal = vglobal_id.GetData();
    }
 
+   // Number of vertices per element
    constexpr int nv_tri = 3, nv_quad = 4, nv_tet = 4, nv_prism = 6, nv_hex = 8;
-   constexpr int quad_ntris = 2, prism_ntets = 3;
+   constexpr int quad_ntris = 2; // NTriangles per quad
+   constexpr int prism_ntets = 3; // NTets per prism
+   // Map verts of quad to verts of tri, in two possible configurations.
+   // quad_trimap[i][0,2,4] is the first triangle, and quad_trimap[i][1,3,5] is the second,
+   // for each configuration.
    static const int quad_trimap[2][nv_tri*quad_ntris] =
    {
       {
@@ -5585,8 +5598,9 @@ void Mesh::MakeSimplicial_(const Mesh &orig_mesh, int *vglobal)
       hex_tetmap0, hex_tetmap1, hex_tetmap2, hex_tetmap3
    };
 
-   auto find_min = [](const int*a, int n) { return std::min_element(a,a+n)-a; };
+   auto find_min = [](const int *a, int n) { return std::min_element(a,a+n)-a; };
 
+   Array<int> parent_elems;
    for (int i=0; i<ne; ++i)
    {
       const int *v = orig_mesh.elements[i]->GetVertices();
@@ -5602,6 +5616,7 @@ void Mesh::MakeSimplicial_(const Mesh &orig_mesh, int *vglobal)
          e->SetAttribute(attrib);
          e->SetVertices(v);
          AddElement(e);
+         parent_elems.Append(i);
       }
       else if (orig_geom == Geometry::SQUARE)
       {
@@ -5615,6 +5630,7 @@ void Mesh::MakeSimplicial_(const Mesh &orig_mesh, int *vglobal)
                v2[iv] = v[quad_trimap[0][itri + iv*quad_ntris]];
             }
             AddElement(e);
+            parent_elems.Append(i);
          }
       }
       else if (orig_geom == Geometry::PRISM)
@@ -5644,6 +5660,7 @@ void Mesh::MakeSimplicial_(const Mesh &orig_mesh, int *vglobal)
                v2[iv] = vg[tetmap[itet + iv*prism_ntets]];
             }
             AddElement(e);
+            parent_elems.Append(i);
          }
       }
       else if (orig_geom == Geometry::CUBE)
@@ -5707,6 +5724,7 @@ void Mesh::MakeSimplicial_(const Mesh &orig_mesh, int *vglobal)
                v2[iv] = vg[tetmap[itet + iv*ntets]];
             }
             AddElement(e);
+            parent_elems.Append(i);
          }
       }
    }
@@ -5756,8 +5774,128 @@ void Mesh::MakeSimplicial_(const Mesh &orig_mesh, int *vglobal)
 
    MFEM_ASSERT(CheckElementOrientation(false) == 0, "");
    MFEM_ASSERT(CheckBdrElementOrientation(false) == 0, "");
+
+   return parent_elems;
+}
+
+
+void Mesh::MakeHigherOrderSimplicial_(const Mesh &orig_mesh, const Array<int> &parent_elements)
+{
+   // Higher order associated to vertices are unchanged, and those for previously
+   // existing edges. DOFs associated to new elements need to be set.
+   const int sdim = orig_mesh.SpaceDimension();
+   auto *orig_fespace = orig_mesh.GetNodes()->FESpace();
+   const bool discont =
+      (dynamic_cast<const mfem::L2_FECollection *>(orig_fespace->FEColl()) != nullptr);
+   SetCurvature(orig_fespace->GetMaxElementOrder(), discont,
+      orig_mesh.SpaceDimension(), orig_fespace->GetOrdering());
+
+   // The dofs associated with vertices are unchanged, but there can be new dofs
+   // associated to edges, faces and volumes. Additionally, because we know that the set
+   // of vertices is unchanged by the splitting operation, we can use the vertices to map
+   // local coordinates of the "child" elements (the new simplices introduced), from the
+   // "parent" element (the quad, prism, hex that was split).
+
+   // For segment, triangle and tetrahedron, the dof values are copied directly. For the
+   // others, we have to construct a map from the Node locations in the new simplex to
+   // the parent non-simplex element. This could be sped up by not repeatedly access the
+   // original FE as the accesses will be coherent (i.e. all child elems are consecutive).
+
+   Array<int> edofs; // element dofs in new element
+   Array<int> parent_vertices, child_vertices; // vertices of parent and child.
+   Array<int> node_map; // node indices of parent from child.
+   Vector edofvals; // values of elements dofs in original element
+   // Storage for evaluating node function on parent element, at node locations of child element
+   DenseMatrix shape; // ndof_coarse x nnode_refined.
+   DenseMatrix point_matrix; // sdim x nnode_refined
+   IntegrationRule child_nodes_in_parent; // The parent nodes that correspond to the child nodes
+   for (int i = 0; i < parent_elements.Size(); i++)
+   {
+      const int ip = parent_elements[i];
+      const Geometry::Type orig_geom = orig_mesh.GetElementBaseGeometry(ip);
+      orig_mesh.GetNodes()->GetElementDofValues(ip, edofvals);
+      switch (orig_geom)
+      {
+         case Geometry::Type::SEGMENT : // fall through
+         case Geometry::Type::TRIANGLE : // fall through
+         case Geometry::Type::TETRAHEDRON :
+            GetNodes()->FESpace()->GetElementVDofs(i, edofs);
+            GetNodes()->SetSubVector(edofs, edofvals);
+            break;
+         case Geometry::Type::CUBE : // fall through
+         case Geometry::Type::PRISM : // fall through
+         case Geometry::Type::PYRAMID : // fall through
+         case Geometry::Type::SQUARE :
+            {
+               // Extract the vertices of parent and child, can then form the map from child
+               // reference coordinates to parent reference coordinates. Exploit the fact
+               // that for Nodes, the vertex entries come first, and their indexing matches
+               // the vertex numbering. Thus we have already have an inverse index map.
+               orig_mesh.GetElementVertices(ip, parent_vertices);
+               GetElementVertices(i, child_vertices);
+               node_map.SetSize(0);
+               for (auto cv : child_vertices)
+                  for (int ipv = 0; ipv < parent_vertices.Size(); ipv++)
+                     if (cv == parent_vertices[ipv])
+                     {
+                        node_map.Append(ipv);
+                        break;
+                     }
+               MFEM_ASSERT(node_map.Size() == Geometry::NumVerts[GetElementBaseGeometry(i)], "!");
+               // node_map now says which of the parent vertex nodes map to each of the
+               // child vertex nodes. Using this can build a basis in the parent element
+               // from child Node values, exploit the linearity to then transform all nodes.
+               child_nodes_in_parent.SetSize(0);
+               const auto *orig_FE = orig_mesh.GetNodes()->FESpace()->GetFE(ip);
+               for (auto pn : node_map)
+               {
+                  child_nodes_in_parent.Append(orig_FE->GetNodes()[pn]);
+               }
+               const auto *simplex_FE = GetNodes()->FESpace()->GetFE(i);
+               shape.SetSize(orig_FE->GetDof(), simplex_FE->GetDof()); // One set of evaluations per simplex dof.
+               Vector col;
+               for (int j = 0; j < simplex_FE->GetNodes().Size(); j++)
+               {
+                  const auto &simplex_node = simplex_FE->GetNodes()[j];
+                  IntegrationPoint simplex_node_in_orig;
+                  // Handle the 2D vs 3D case by multiplying .z by zero.
+                  simplex_node_in_orig.Set3(
+                        child_nodes_in_parent[0].x +
+                        simplex_node.x * (child_nodes_in_parent[1].x - child_nodes_in_parent[0].x)
+                     + simplex_node.y * (child_nodes_in_parent[2].x - child_nodes_in_parent[0].x)
+                     + simplex_node.z * (child_nodes_in_parent[(sdim > 2) ? 3 : 0].x - child_nodes_in_parent[0].x),
+                        child_nodes_in_parent[0].y +
+                        simplex_node.x * (child_nodes_in_parent[1].y - child_nodes_in_parent[0].y)
+                     + simplex_node.y * (child_nodes_in_parent[2].y - child_nodes_in_parent[0].y)
+                     + simplex_node.z * (child_nodes_in_parent[(sdim > 2) ? 3 : 0].y - child_nodes_in_parent[0].y),
+                        child_nodes_in_parent[0].z +
+                        simplex_node.x * (child_nodes_in_parent[1].z - child_nodes_in_parent[0].z)
+                     + simplex_node.y * (child_nodes_in_parent[2].z - child_nodes_in_parent[0].z)
+                     + simplex_node.z * (child_nodes_in_parent[(sdim > 2) ? 3 : 0].z - child_nodes_in_parent[0].z));
+                  shape.GetColumnReference(j, col);
+                  orig_FE->CalcShape(simplex_node_in_orig, col);
+               }
+               // All the non-simplex basis functions have now been evaluated at all the
+               // simplex basis function node locations. Now evaluate the summations and
+               // place back into the Nodes vector.
+               orig_mesh.GetNodes()->GetElementDofValues(ip, edofvals);
+               // Dof values are always returned as [[x_1,x_2,x_3,...], [y_1,y_2,y_3,...], [z_1,z_2,z_3,...]]
+               DenseMatrix edofvals_mat(edofvals.GetData(), orig_FE->GetDof(), sdim);
+               point_matrix.SetSize(simplex_FE->GetDof(), sdim);
+               MultAtB(shape, edofvals_mat, point_matrix);
+               GetNodes()->FESpace()->GetElementVDofs(i, edofs);
+               GetNodes()->SetSubVector(edofs, point_matrix.GetData());
+            }
+            break;
+         case Geometry::Type::POINT :  // fall through
+         case Geometry::Type::INVALID :
+         case Geometry::Type::NUM_GEOMETRIES :
+            MFEM_ABORT("Internal Error!");
+      }
+   }
 }
 
+
 Mesh Mesh::MakePeriodic(const Mesh &orig_mesh, const std::vector<int> &v2v)
 {
    Mesh periodic_mesh(orig_mesh, true); // Make a copy of the original mesh
diff --git a/mesh/mesh.hpp b/mesh/mesh.hpp
index 0d351c4e37..f4280eea54 100644
--- a/mesh/mesh.hpp
+++ b/mesh/mesh.hpp
@@ -662,8 +662,29 @@ protected:
                        Array<int> &elem_vtx, Array<int> &attr) const;
 
    // Internal helper used in MakeSimplicial (and ParMesh::MakeSimplicial).
-   void MakeSimplicial_(const Mesh &orig_mesh, int *vglobal);
 
+   /**
+    * @brief Internal helper user in MakeSimplicial (and ParMesh::MakeSimplicial). Optional
+    * return is used in assembling a higher order mesh.
+    * @details The construction of the higher order nodes must be separated out because the
+    *
+    * @param orig_mesh The mesh from to create the simplices
+    * @param vglobal An optional global ordering of vertices. Necessary for parallel splitting.
+    * @return Array<int> parent elements from the orig_mesh for each split element
+    */
+   Array<int> MakeSimplicial_(const Mesh &orig_mesh, int *vglobal);
+
+   /**
+    * @brief Helper function for constructing higher order nodes from a mesh transformed
+    *   into simplices. Only to be called as part of MakeSimplicial or
+    *   ParMesh::MakeSimplicial.
+    *
+    * @param orig_mesh The mesh that was used to transform this mesh into simplices.
+    * @param parent_elements parent_elements[i] gives the element in orig_mesh split to give
+    *   element i.
+    */
+   void MakeHigherOrderSimplicial_(const Mesh &orig_mesh,
+                                   const Array<int> &parent_elements);
 public:
 
    /// @anchor mfem_Mesh_ctors
diff --git a/mesh/pmesh.cpp b/mesh/pmesh.cpp
index 3567d56164..1f21b41c7b 100644
--- a/mesh/pmesh.cpp
+++ b/mesh/pmesh.cpp
@@ -1403,7 +1403,7 @@ ParMesh ParMesh::MakeSimplicial(ParMesh &orig_mesh)
    {
       vglobal[iv] = fes.GetGlobalTDofNumber(iv);
    }
-   mesh.MakeSimplicial_(orig_mesh, vglobal);
+   auto parent_elements = mesh.MakeSimplicial_(orig_mesh, vglobal);
 
    // count the number of entries in each row of group_s{vert,edge,face}
    mesh.group_svert.MakeI(mesh.GetNGroups()-1); // exclude the local group 0
@@ -1520,6 +1520,11 @@ ParMesh ParMesh::MakeSimplicial(ParMesh &orig_mesh)
 
    mesh.FinalizeParTopo();
 
+   if (orig_mesh.GetNodes() != nullptr)
+   {
+      mesh.MakeHigherOrderSimplicial_(orig_mesh, parent_elements);
+   }
+
    return mesh;
 }
 
diff --git a/tests/unit/mesh/test_mesh.cpp b/tests/unit/mesh/test_mesh.cpp
index bbacdc5172..e71fb6c0ac 100644
--- a/tests/unit/mesh/test_mesh.cpp
+++ b/tests/unit/mesh/test_mesh.cpp
@@ -149,8 +149,10 @@ TEST_CASE("Gecko integration in MFEM", "[Mesh]")
 TEST_CASE("MakeSimplicial", "[Mesh]")
 {
    auto mesh_fname = GENERATE("../../data/star.mesh",
+                              "../../data/inline-tri.mesh",
                               "../../data/inline-quad.mesh",
                               "../../data/inline-hex.mesh",
+                              "../../data/inline-tet.mesh",
                               "../../data/inline-wedge.mesh",
                               "../../data/beam-wedge.mesh");
 
@@ -158,14 +160,16 @@ TEST_CASE("MakeSimplicial", "[Mesh]")
    Mesh simplex_mesh = Mesh::MakeSimplicial(orig_mesh);
 
    Geometry::Type orig_geom = orig_mesh.GetTypicalElementGeometry();
-   int factor;
-   switch (orig_geom)
+   const auto factor = [orig_geom]()
    {
-      case Geometry::SQUARE: factor = 2; break;
-      case Geometry::PRISM: factor = 3; break;
-      case Geometry::CUBE: factor = 6; break;
-      default: factor = 1;
-   }
+      switch (orig_geom)
+      {
+         default: return 1; // No-op
+         case Geometry::SQUARE: return 2;
+         case Geometry::PRISM: return 3;
+         case Geometry::CUBE: return 6;
+      }
+   }();
 
    int dim = orig_mesh.Dimension();
    Geometry::Type simplex_geom
@@ -179,6 +183,73 @@ TEST_CASE("MakeSimplicial", "[Mesh]")
    // Note: assuming no hex is subdivided into 5 tets. This can happen depending
    // on the original mesh, but it doesn't happen for these test cases.
    REQUIRE(simplex_mesh.GetNE() == orig_mesh.GetNE()*factor);
+
+   auto curvature = GENERATE(1,2,3);
+   orig_mesh.SetCurvature(curvature, false, -1, GENERATE(0,1));
+   auto ho_simplex_mesh = Mesh::MakeSimplicial(orig_mesh);
+
+   CHECK(orig_mesh.GetNV() == simplex_mesh.GetNV());
+   CHECK(orig_mesh.GetNV() == ho_simplex_mesh.GetNV());
+
+   // Vertex locations should be unchanged after higher order transformation.
+   Vector vert;
+   constexpr real_t tol = 10*std::numeric_limits<real_t>::epsilon();
+   for (int i = 0; i < ho_simplex_mesh.SpaceDimension(); i++)
+   {
+      ho_simplex_mesh.GetNodes()->GetNodalValues(vert, i+1);
+      for (int j = 0; j < ho_simplex_mesh.GetNV(); j++)
+      {
+         REQUIRE(std::abs(simplex_mesh.GetVertex(j)[i] - vert(j)) < tol);
+      }
+   }
+}
+
+TEST_CASE("MakeMixedSimplicial", "[Mesh]")
+{
+   auto mesh_fname = "../../data/fichera-mixed-p2.mesh";
+
+   Mesh orig_mesh(mesh_fname, 1, 1);
+   Mesh simplex_mesh = Mesh::MakeSimplicial(orig_mesh);
+
+   int ntet = 0, ncube = 0, nprism = 0;
+   for (int i = 0; i < orig_mesh.GetNE(); i++)
+   {
+      auto geom_type = orig_mesh.GetElementGeometry(i);
+      switch (geom_type)
+      {
+         case Geometry::Type::TETRAHEDRON : ntet++; break;
+         case Geometry::Type::CUBE : ncube++; break;
+         case Geometry::Type::PRISM : nprism++; break;
+         default: break; // to calm compilers
+      }
+   }
+
+   int dim = orig_mesh.Dimension();
+   Geometry::Type simplex_geom
+      = (dim == 2) ? Geometry::TRIANGLE : Geometry::TETRAHEDRON;
+
+   Array<Geometry::Type> geoms;
+   simplex_mesh.GetGeometries(simplex_mesh.Dimension(), geoms);
+
+   REQUIRE(geoms.Size() == 1);
+   REQUIRE(geoms[0] == simplex_geom);
+   // Note: assuming no hex is subdivided into 5 tets. This can happen depending
+   // on the original mesh, but it doesn't happen for these test cases.
+   REQUIRE(simplex_mesh.GetNE() == ntet + nprism * 3 + ncube * 6);
+
+   CHECK(orig_mesh.GetNV() == simplex_mesh.GetNV());
+
+   // Vertex locations should be unchanged after higher order transformation.
+   Vector vert;
+   constexpr real_t tol = 10*std::numeric_limits<real_t>::epsilon();
+   for (int i = 0; i < simplex_mesh.SpaceDimension(); i++)
+   {
+      simplex_mesh.GetNodes()->GetNodalValues(vert, i+1);
+      for (int j = 0; j < simplex_mesh.GetNV(); j++)
+      {
+         CHECK(std::abs(orig_mesh.GetVertex(j)[i] - vert(j)) < tol);
+      }
+   }
 }
 
 TEST_CASE("MakeNurbs", "[Mesh]")
diff --git a/tests/unit/mesh/test_pmesh.cpp b/tests/unit/mesh/test_pmesh.cpp
index 937f416db9..fa2ec3f5e0 100644
--- a/tests/unit/mesh/test_pmesh.cpp
+++ b/tests/unit/mesh/test_pmesh.cpp
@@ -183,6 +183,10 @@ TEST_CASE("ParMeshMakeSimplicial", "[Parallel], [ParMesh]")
    // to solver tolerance.
 
    Mesh mesh = Mesh::MakeCartesian3D(3, 3, 3, Element::HEXAHEDRON);
+   if (GENERATE(false,true))
+   {
+      mesh.SetCurvature(2);
+   }
    ParMesh pmesh(MPI_COMM_WORLD, mesh);
    ParMesh pmesh_tet = ParMesh::MakeSimplicial(pmesh);
 
