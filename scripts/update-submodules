#!/bin/bash

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

help()
{
    echo "Usage: update-submodules [OPTIONS]

Fetch most ercent commit from dependency repositories

Options:
  -h, --help                       Show this help message and exit
  -v, --verbose                    Verbose log output
"
}

# Parse arguments
VERBOSE="false"
POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
        help
        exit 0
        ;;
        -v|--verbose)
        VERBOSE="true"
        shift
        ;;
        *)
        POSITIONAL+=("$1")  # Unknown option, save it in an array for later
        shift
        ;;
    esac
done
set -- "${POSITIONAL[@]}"  # Restore positional parameters

# Check arguments
if [[ ! -z "$@" ]]; then
    help
    exit 1
fi

SOURCE_DIR=$(dirname $(cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P ))

if ! command -v git &> /dev/null; then
    echo "Error: Command \`git\` could not be found"
    exit 1
fi

GIT_REMOTE_URLS=$(grep '\.git' $SOURCE_DIR/cmake/ExternalGitTags.cmake | awk '{print $1}' | sed 's/\"//g')

TMP_DIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'TMP_DIR')
pushd $TMP_DIR > /dev/null

git init && printf "\n"
for GIT_URL in $GIT_REMOTE_URLS; do
    echo "Repository: $GIT_URL" && printf "\n"

    git remote add origin $GIT_URL
    GIT_BRANCH=$(git ls-remote --symref origin HEAD | head -1 | awk '{print $2}' | awk -F '/' '{print $NF}')
    if $VERBOSE; then
        git fetch --depth=1 origin $GIT_BRANCH && printf "\n"
    else
        GIT_FETCH=$(git fetch --progress --depth=1 origin $GIT_BRANCH 2>&1)
    fi
    GIT_LOG=$(git log -1 origin/$GIT_BRANCH)
    git remote remove origin

    GIT_TAG=$(grep -A 4 "$GIT_URL" $SOURCE_DIR/cmake/ExternalGitTags.cmake | tail -1 | awk '{print $1}' | sed 's/\"//g')
    GIT_TAG_NEW=$(echo "$GIT_LOG" | head -1 | awk '{print $NF}')
    if [[ ! "$GIT_TAG_NEW" == "$GIT_TAG" ]]; then
        echo "** NEW PACKAGE VERSION AVAILABLE! **" && printf "\n"

        echo "Previous tag: $GIT_TAG"
        echo "New tag:      $GIT_TAG_NEW" && printf "\n"

        echo "$GIT_LOG" && printf "\n"
    else
        echo "Already up to date" && printf "\n"
    fi
done

popd > /dev/null
rm -rf $TMP_DIR
