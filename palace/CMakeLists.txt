# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

#
# CMake configuration for the main Palace application
#

# CMake 3.13 was released in Nov. 2018
cmake_minimum_required(VERSION 3.13)

# Prohibit in-source builds
if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
  message(FATAL_ERROR "In-source builds are prohibited")
endif()

# C++17 required for std::filesystem, among others
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)

# Initialize the project
project(palace LANGUAGES CXX VERSION 0.11.1)

# Define build settings and defaults
set(PALACE_WITH_OPENMP OFF CACHE BOOL "Use OpenMP")

set(PALACE_WITH_SLEPC ON CACHE BOOL "Build with SLEPc eigenvalue solver")
set(PALACE_WITH_ARPACK OFF CACHE BOOL "Build with ARPACK eigenvalue solver")

set(ANALYZE_SOURCES_CLANG_TIDY OFF CACHE BOOL "Run static analysis checks using clang-tidy")
set(ANALYZE_SOURCES_CPPCHECK OFF CACHE BOOL "Run static analysis checks using cppcheck")

# Help find third-party dependencies
set(MFEM_DIR "" CACHE STRING "Path to MFEM build or installation directory (not required if already on CMAKE_PREFIX_PATH)")
set(PETSC_DIR "" CACHE STRING "Path to PETSc build or installation directory (not required if already on CMAKE_PREFIX_PATH or PKG_CONFIG_PATH)")
set(SLEPC_DIR "" CACHE STRING "Path to SLEPc build or installation directory (not required if already on CMAKE_PREFIX_PATH or PKG_CONFIG_PATH)")
set(ARPACK_DIR "" CACHE STRING "Path to ARPACK build or installation directory (not required if already on CMAKE_PREFIX_PATH)")

# Enable Fortran if required
if(PALACE_WITH_ARPACK)
  enable_language(Fortran)
endif()

# Set a default build type if none was specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Release' as none was specified")
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose CMake build type" FORCE)
endif()

# Add extra CMake modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

# Find MPI
find_package(MPI REQUIRED)

# Find OpenMP
if(PALACE_WITH_OPENMP)
  find_package(OpenMP REQUIRED)
endif()

# Find nlohmann/json
find_package(nlohmann_json REQUIRED CONFIG)
message(STATUS "Found nlohmann/json: ${nlohmann_json_VERSION} in ${nlohmann_json_DIR}")

# Find fmt
find_package(fmt REQUIRED CONFIG)
message(STATUS "Found fmt: ${fmt_VERSION} in ${fmt_DIR}")

# Find Eigen
find_package(Eigen3 REQUIRED CONFIG)
message(STATUS "Found Eigen: ${Eigen3_VERSION} in ${Eigen3_DIR}")

# Find MFEM
if(NOT "${MFEM_DIR}" STREQUAL "")
  set(MFEM_ROOT ${MFEM_DIR})
endif()
find_package(MFEM REQUIRED CONFIG)
message(STATUS "Found MFEM: ${MFEM_VERSION} in ${MFEM_DIR}")
if(NOT MFEM_USE_MPI)
  message(FATAL_ERROR "Build requires MFEM with MPI support")
endif()
# if(MFEM_CXX_FLAGS)
#   # Pull compiler flags from MFEM for OpenMP and optimizations
#   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MFEM_CXX_FLAGS}")
# endif()

# Find PETSc and SLEPc
if(PALACE_WITH_SLEPC)
  include(PkgConfigHelpers)
  set(PETSC_TEST_DEPS MPI::MPI_CXX)
  if(PALACE_WITH_OPENMP)
    list(APPEND PETSC_TEST_DEPS OpenMP::OpenMP_CXX)
  endif()
  find_petsc_pkgconfig("${PETSC_TEST_DEPS}" PETSC_TARGET)
  if("${PETSC_TARGET}" STREQUAL "")
    message(FATAL_ERROR "PETSc could not be found, be sure to set PETSC_DIR")
  endif()
  find_slepc_pkgconfig("${PETSC_TARGET};${PETSC_TEST_DEPS}" SLEPC_TARGET)
  if("${SLEPC_TARGET}" STREQUAL "")
    message(FATAL_ERROR "SLEPc could not be found, be sure to set SLEPC_DIR")
  endif()
elseif(NOT PALACE_WITH_ARPACK)
  message(FATAL_ERROR "Build requires at least one of ARPACK or SLEPc dependencies")
endif()

# Find ARPACK
if(PALACE_WITH_ARPACK)
  if(NOT "${ARPACK_DIR}" STREQUAL "")
    set(arpackng_ROOT ${ARPACK_DIR})
  endif()
  find_package(arpackng REQUIRED CONFIG)
  message(STATUS "Found ARPACK: ${arpackng_VERSION} in ${arpackng_DIR}")
elseif(NOT PALACE_WITH_SLEPC)
  message(FATAL_ERROR "Build requires at least one of ARPACK or SLEPc dependencies")
endif()

# Add executable target
set(TARGET_NAME palace)
add_executable(${TARGET_NAME} "")

# Add source files
target_sources(${TARGET_NAME}
  PRIVATE ${CMAKE_SOURCE_DIR}/main.cpp
)
target_include_directories(${TARGET_NAME}
  PRIVATE ${CMAKE_SOURCE_DIR}
)
add_subdirectory(drivers)
add_subdirectory(fem)
add_subdirectory(linalg)
add_subdirectory(models)
add_subdirectory(utils)

# Add binary extension for build architecture
if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch64|arm")
  set(TARGET_EXTENSION "arm64")
else()
  set(TARGET_EXTENSION "x86_64")
endif()
set_target_properties(${TARGET_NAME} PROPERTIES
  OUTPUT_NAME "${TARGET_NAME}-${TARGET_EXTENSION}"
  SUFFIX ".bin"
)

# Add Git revision information (forces reconfigure when Git status changes)
include(GetGitDescription)
git_describe(GIT_COMMIT_ID)
message(STATUS "Git string: ${GIT_COMMIT_ID}")
if(NOT "${GIT_COMMIT_ID}" MATCHES "NOTFOUND")
  file(WRITE ${CMAKE_BINARY_DIR}/config/gitversion.hpp
"#pragma once
const char *GetGitCommit()
{
  static const char *commit = \"@GIT_COMMIT_ID@\";
  return commit;
}
")
  configure_file(${CMAKE_BINARY_DIR}/config/gitversion.hpp ${CMAKE_BINARY_DIR}/config @ONLY)
  target_include_directories(${TARGET_NAME}
    PRIVATE ${CMAKE_BINARY_DIR}/config
  )
  target_compile_definitions(${TARGET_NAME}
    PRIVATE PALACE_GIT_COMMIT
  )
endif()

# Check C++ compiler support for constexpr std::sqrt and std::filesystem
include(CheckCompilerFeatureSupport)
if(NOT DEFINED CONSTEXPR_SQRT_SUPPORT_CACHE)
  check_constexpr_sqrt_support(CONSTEXPR_SQRT_SUPPORT)
  set(CONSTEXPR_SQRT_SUPPORT_CACHE ${CONSTEXPR_SQRT_SUPPORT} CACHE INTERNAL "")
endif()
if(CONSTEXPR_SQRT_SUPPORT_CACHE)
  target_compile_definitions(${TARGET_NAME}
    PRIVATE PALACE_WITH_CONSTEXPR_SQRT
  )
endif()
if(NOT DEFINED STD_FS_LIBRARIES_CACHE)
  check_std_fs_support(STD_FS_SUPPORT STD_FS_LIBRARIES)
  if(NOT STD_FS_SUPPORT)
    message(FATAL_ERROR "Could not compile a C++ program using std::filesystem")
  endif()
  set(STD_FS_LIBRARIES_CACHE ${STD_FS_LIBRARIES} CACHE INTERNAL "")
endif()
if(NOT "${STD_FS_LIBRARIES_CACHE}" STREQUAL "")
  target_link_libraries(${TARGET_NAME}
    PRIVATE ${STD_FS_LIBRARIES_CACHE}
  )
endif()

# Link with third-party dependencies
if(PALACE_WITH_SLEPC)
  target_link_libraries(${TARGET_NAME}
    PRIVATE ${SLEPC_TARGET} ${PETSC_TARGET}
  )
  target_compile_definitions(${TARGET_NAME}
    PRIVATE PALACE_WITH_SLEPC
  )
endif()
if(PALACE_WITH_ARPACK)
  target_link_libraries(${TARGET_NAME}
    PRIVATE PARPACK::PARPACK ARPACK::ARPACK ${MPI_Fortran_LIBRARIES}
  )
  target_compile_definitions(${TARGET_NAME}
    PRIVATE PALACE_WITH_ARPACK
  )
endif()
target_link_libraries(${TARGET_NAME}
  PRIVATE mfem nlohmann_json::nlohmann_json fmt::fmt Eigen3::Eigen MPI::MPI_CXX
)

# Install target and helper scripts
install(TARGETS ${TARGET_NAME}
  RUNTIME DESTINATION bin
)
install(FILES
  ${CMAKE_SOURCE_DIR}/../scripts/palace ${CMAKE_SOURCE_DIR}/../scripts/validate-config
  DESTINATION bin
  PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE
              WORLD_READ WORLD_EXECUTE
)
install(DIRECTORY
  ${CMAKE_SOURCE_DIR}/../scripts/schema
  DESTINATION bin
  FILE_PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
)

# Optionally configure static analysis
include(StaticAnalysisHelpers)
if(ANALYZE_SOURCES_CLANG_TIDY)
  configure_clang_tidy(${TARGET_NAME})
else()
  message(STATUS "Static analysis with clang-tidy not requested")
endif()
if(ANALYZE_SOURCES_CPPCHECK)
  configure_cppcheck(${TARGET_NAME})
else()
  message(STATUS "Static analysis with cppcheck not requested")
endif()

# Status messages for build settings
message(STATUS "CMake build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Building for architecture: ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "Summary of extra compiler flags: ${CMAKE_CXX_FLAGS}")
message(STATUS "Installation directory: ${CMAKE_INSTALL_PREFIX}/bin")
