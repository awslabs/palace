# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

#
# Build STRUMPACK and dependencies
#

# Force build order
set(STRUMPACK_DEPENDENCIES scalapack scotch)

# Build ZFP dependency for lossy compression
set(PALACE_STRUMPACK_WITH_ZFP ON)
if(PALACE_STRUMPACK_WITH_ZFP)
  set(ZFP_DEPENDENCIES)

  set(ZFP_OPTIONS ${PALACE_SUPERBUILD_DEFAULT_ARGS})
  list(APPEND ZFP_OPTIONS
    "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}"
    "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}"
    "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}"
    "-DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}"
    "-DBUILD_ZFORP=OFF"
    "-DBUILD_UTILITIES=OFF"
    "-DBUILD_TESTING=OFF"
    "-DBUILD_EXAMPLES=OFF"
    "-DZFP_WITH_OPENMP=${PALACE_WITH_OPENMP}"
  )

  string(REPLACE ";" "; " ZFP_OPTIONS_PRINT "${ZFP_OPTIONS}")
  message(STATUS "ZFP_OPTIONS: ${ZFP_OPTIONS_PRINT}")

  include(ExternalProject)
  ExternalProject_Add(zfp
    DEPENDS           ${ZFP_DEPENDENCIES}
    GIT_REPOSITORY    ${EXTERN_ZFP_URL}
    GIT_TAG           ${EXTERN_ZFP_GIT_TAG}
    SOURCE_DIR        ${CMAKE_BINARY_DIR}/extern/zfp
    BINARY_DIR        ${CMAKE_BINARY_DIR}/extern/zfp-build
    INSTALL_DIR       ${CMAKE_INSTALL_PREFIX}
    PREFIX            ${CMAKE_BINARY_DIR}/extern/zfp-cmake
    UPDATE_COMMAND    ""
    CONFIGURE_COMMAND ${CMAKE_COMMAND} <SOURCE_DIR> "${ZFP_OPTIONS}"
    TEST_COMMAND      ""
  )
  list(APPEND STRUMPACK_DEPENDENCIES zfp)

  include(GNUInstallDirs)
  if(BUILD_SHARED_LIBS)
    set(_ZFP_LIB_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})
  else()
    set(_ZFP_LIB_SUFFIX ${CMAKE_STATIC_LIBRARY_SUFFIX})
  endif()
  set(_ZFP_LIBRARIES ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/libzfp${_ZFP_LIB_SUFFIX})
  # list(APPEND _ZFP_LIBRARIES ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/zFORp${_ZFP_LIB_SUFFIX})
endif()

# Build ButterflyPACK dependency for HODLR/HODBF compression
set(PALACE_STRUMPACK_WITH_BUTTERFLYPACK ON)
if(PALACE_STRUMPACK_WITH_BUTTERFLYPACK)
  set(BUTTERFLYPACK_DEPENDENCIES scalapack)

  set(BUTTERFLYPACK_OPTIONS ${PALACE_SUPERBUILD_DEFAULT_ARGS})
  list(APPEND BUTTERFLYPACK_OPTIONS
    "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}"
    "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}"
    "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}"
    "-DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}"
    "-DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}"
    "-DCMAKE_Fortran_FLAGS=${CMAKE_Fortran_FLAGS}"
    "-Denable_doc=OFF"
    "-Denable_openmp=${PALACE_WITH_OPENMP}"
    "-DTPL_SCALAPACK_LIBRARIES=${SCALAPACK_LIBRARIES}"
  )
  # if(PALACE_STRUMPACK_WITH_ZFP)
  #   string(REPLACE ";" "$<SEMICOLON>" _ZFP_LIBRARIES "${_ZFP_LIBRARIES}")
  #   list(APPEND BUTTERFLYPACK_OPTIONS
  #     "-DTPL_ZFP_LIBRARIES=${_ZFP_LIBRARIES}"
  #     "-DTPL_ZFP_INCLUDE=${CMAKE_INSTALL_PREFIX}/include"
  #   )
  # endif()

  # Nested Fortran functions in ButterflyPACK cause a static linkage problem Clang on MacOS
  if(NOT BUILD_SHARED_LIBS AND
     (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" AND CMAKE_C_COMPILER_ID MATCHES "Clang"))
    list(TRANSFORM BUTTERFLYPACK_OPTIONS REPLACE
      ".*BUILD_SHARED_LIBS.*" "-DBUILD_SHARED_LIBS=ON"
    )
  endif()

  # Configure BLAS/LAPACK
  if(NOT "${BLAS_LAPACK_LIBRARIES}" STREQUAL "")
    list(APPEND BUTTERFLYPACK_OPTIONS
      "-DBLAS_LIBRARIES=${BLAS_LAPACK_LIBRARIES}"
      "-DLAPACK_LIBRARIES=${BLAS_LAPACK_LIBRARIES}"
    )
  endif()

  string(REPLACE ";" "; " BUTTERFLYPACK_OPTIONS_PRINT "${BUTTERFLYPACK_OPTIONS}")
  message(STATUS "BUTTERFLYPACK_OPTIONS: ${BUTTERFLYPACK_OPTIONS_PRINT}")

  # Fix build
  set(BUTTERFLYPACK_PATCH_FILES
    "${CMAKE_SOURCE_DIR}/extern/patch/ButterflyPACK/patch_build.diff"
  )

  include(ExternalProject)
  ExternalProject_Add(butterflypack
    DEPENDS           ${BUTTERFLYPACK_DEPENDENCIES}
    GIT_REPOSITORY    ${EXTERN_BUTTERFLYPACK_URL}
    GIT_TAG           ${EXTERN_BUTTERFLYPACK_GIT_TAG}
    SOURCE_DIR        ${CMAKE_BINARY_DIR}/extern/ButterflyPACK
    BINARY_DIR        ${CMAKE_BINARY_DIR}/extern/ButterflyPACK-build
    INSTALL_DIR       ${CMAKE_INSTALL_PREFIX}
    PREFIX            ${CMAKE_BINARY_DIR}/extern/ButterflyPACK-cmake
    UPDATE_COMMAND    ""
    PATCH_COMMAND     git apply "${BUTTERFLYPACK_PATCH_FILES}"
    CONFIGURE_COMMAND ${CMAKE_COMMAND} <SOURCE_DIR> "${BUTTERFLYPACK_OPTIONS}"
    TEST_COMMAND      ""
  )
  list(APPEND STRUMPACK_DEPENDENCIES butterflypack)

  include(GNUInstallDirs)
  if(BUILD_SHARED_LIBS OR
     (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" AND CMAKE_C_COMPILER_ID MATCHES "Clang"))
    set(_BUTTERFLYPACK_LIB_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})
  else()
    set(_BUTTERFLYPACK_LIB_SUFFIX ${CMAKE_STATIC_LIBRARY_SUFFIX})
  endif()
  set(_BUTTERFLYPACK_LIBRARIES ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/libdbutterflypack${_BUTTERFLYPACK_LIB_SUFFIX})
  list(APPEND _BUTTERFLYPACK_LIBRARIES ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/libsbutterflypack${_BUTTERFLYPACK_LIB_SUFFIX})
  list(APPEND _BUTTERFLYPACK_LIBRARIES ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/libzbutterflypack${_BUTTERFLYPACK_LIB_SUFFIX})
  list(APPEND _BUTTERFLYPACK_LIBRARIES ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/libcbutterflypack${_BUTTERFLYPACK_LIB_SUFFIX})
endif()

set(STRUMPACK_OPTIONS ${PALACE_SUPERBUILD_DEFAULT_ARGS})
list(APPEND STRUMPACK_OPTIONS
  "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}"
  "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}"
  "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}"
  "-DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}"
  "-DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}"
  "-DCMAKE_Fortran_FLAGS=${CMAKE_Fortran_FLAGS}"
  "-DSTRUMPACK_USE_MPI=ON"
  "-DSTRUMPACK_USE_OPENMP=${PALACE_WITH_OPENMP}"
  "-DSTRUMPACK_USE_CUDA=OFF"
  "-DSTRUMPACK_USE_HIP=OFF"
  "-DTPL_ENABLE_PARMETIS=ON"
  "-DTPL_METIS_LIBRARIES=${METIS_LIBRARIES}"
  "-DTPL_METIS_INCLUDE_DIRS=${CMAKE_INSTALL_PREFIX}/include"
  "-DTPL_PARMETIS_LIBRARIES=${PARMETIS_LIBRARIES}"
  "-DTPL_PARMETIS_INCLUDE_DIRS=${CMAKE_INSTALL_PREFIX}/include"
  "-DTPL_ENABLE_SCOTCH=ON"
  "-DTPL_SCOTCH_LIBRARIES=${METIS_LIBRARIES}"
  "-DTPL_SCOTCH_INCLUDE_DIRS=${CMAKE_INSTALL_PREFIX}/include"
  "-DTPL_ENABLE_PTSCOTCH=ON"
  "-DTPL_PTSCOTCH_LIBRARIES=${PARMETIS_LIBRARIES}"
  "-DTPL_PTSCOTCH_INCLUDE_DIRS=${CMAKE_INSTALL_PREFIX}/include"
  "-DTPL_ENABLE_SLATE=OFF"
  "-DTPL_ENABLE_MAGMA=OFF"
  "-DTPL_ENABLE_COMBBLAS=OFF"
  "-DTPL_ENABLE_PAPI=OFF"
  "-DTPL_SCALAPACK_LIBRARIES=${SCALAPACK_LIBRARIES}"
)
if(PALACE_STRUMPACK_WITH_BUTTERFLYPACK)
  list(APPEND STRUMPACK_OPTIONS
    "-DTPL_ENABLE_BPACK=ON"
    "-DTPL_BUTTERFLYPACK_PREFIX=${CMAKE_INSTALL_PREFIX}"
  )
else()
  list(APPEND STRUMPACK_OPTIONS
    "-DTPL_ENABLE_BPACK=OFF"
  )
endif()
if(PALACE_STRUMPACK_WITH_ZFP)
  list(APPEND STRUMPACK_OPTIONS
    "-DTPL_ENABLE_ZFP=ON"
    "-DTPL_ZFP_PREFIX=${CMAKE_INSTALL_PREFIX}"
  )
else()
  list(APPEND STRUMPACK_OPTIONS
    "-DTPL_ENABLE_ZFP=OFF"
  )
endif()

# Configure BLAS/LAPACK
if(NOT "${BLAS_LAPACK_LIBRARIES}" STREQUAL "")
  list(APPEND STRUMPACK_OPTIONS
    "-DLAPACK_LIBRARIES=${BLAS_LAPACK_LIBRARIES}"
    "-DBLAS_LIBRARIES=${BLAS_LAPACK_LIBRARIES}"
  )
endif()

string(REPLACE ";" "; " STRUMPACK_OPTIONS_PRINT "${STRUMPACK_OPTIONS}")
message(STATUS "STRUMPACK_OPTIONS: ${STRUMPACK_OPTIONS_PRINT}")

# Fix build
set(STRUMPACK_PATCH_FILES
  "${CMAKE_SOURCE_DIR}/extern/patch/STRUMPACK/patch_build.diff"
  "${CMAKE_SOURCE_DIR}/extern/patch/STRUMPACK/patch_parmetis.diff"
)

include(ExternalProject)
ExternalProject_Add(strumpack
  DEPENDS           ${STRUMPACK_DEPENDENCIES}
  GIT_REPOSITORY    ${EXTERN_STRUMPACK_URL}
  GIT_TAG           ${EXTERN_STRUMPACK_GIT_TAG}
  SOURCE_DIR        ${CMAKE_BINARY_DIR}/extern/STRUMPACK
  BINARY_DIR        ${CMAKE_BINARY_DIR}/extern/STRUMPACK-build
  INSTALL_DIR       ${CMAKE_INSTALL_PREFIX}
  PREFIX            ${CMAKE_BINARY_DIR}/extern/STRUMPACK-cmake
  UPDATE_COMMAND    ""
  PATCH_COMMAND     git apply "${STRUMPACK_PATCH_FILES}"
  CONFIGURE_COMMAND ${CMAKE_COMMAND} <SOURCE_DIR> "${STRUMPACK_OPTIONS}"
  TEST_COMMAND      ""
)

set(_STRUMPACK_EXTRA_LIBRARIES)
if(PALACE_STRUMPACK_WITH_BUTTERFLYPACK)
  list(APPEND _STRUMPACK_EXTRA_LIBRARIES ${_BUTTERFLYPACK_LIBRARIES})
endif()
if(PALACE_STRUMPACK_WITH_ZFP)
  list(APPEND _STRUMPACK_EXTRA_LIBRARIES ${_ZFP_LIBRARIES})
endif()
if(NOT "${_STRUMPACK_EXTRA_LIBRARIES}" STREQUAL "")
  string(REPLACE ";" "$<SEMICOLON>" _STRUMPACK_EXTRA_LIBRARIES "${_STRUMPACK_EXTRA_LIBRARIES}")
  set(STRUMPACK_EXTRA_LIBRARIES ${_STRUMPACK_EXTRA_LIBRARIES} CACHE STRING "List of extra library files for STRUMPACK")
endif()
