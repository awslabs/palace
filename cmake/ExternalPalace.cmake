# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

#
# Build Palace
#

# Force build order
set(PALACE_DEPENDENCIES mfem)
if(PALACE_BUILD_EXTERNAL_DEPS)
  list(APPEND PALACE_DEPENDENCIES json fmt eigen)
  if(PALACE_WITH_SLEPC)
    list(APPEND PALACE_DEPENDENCIES slepc)
  endif()
  if(PALACE_WITH_ARPACK)
    list(APPEND PALACE_DEPENDENCIES arpack-ng)
  endif()
endif()

if(NOT "${CMAKE_PREFIX_PATH}" STREQUAL "")
  string(REPLACE ";" "$<SEMICOLON>" PALACE_CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
  set(PALACE_CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX}$<SEMICOLON>${PALACE_CMAKE_PREFIX_PATH})
else()
  set(PALACE_CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX})
endif()

set(PALACE_OPTIONS ${PALACE_SUPERBUILD_DEFAULT_ARGS})
list(APPEND PALACE_OPTIONS
  "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}"
  "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}"
  "-DPALACE_WITH_OPENMP=${PALACE_WITH_OPENMP}"
  "-DPALACE_WITH_SLEPC=${PALACE_WITH_SLEPC}"
  "-DPALACE_WITH_ARPACK=${PALACE_WITH_ARPACK}"
  "-DANALYZE_SOURCES_CLANG_TIDY=${ANALYZE_SOURCES_CLANG_TIDY}"
  "-DANALYZE_SOURCES_CPPCHECK=${ANALYZE_SOURCES_CPPCHECK}"
  "-DCMAKE_PREFIX_PATH=${PALACE_CMAKE_PREFIX_PATH}"
)
if(PALACE_WITH_ARPACK)
  list(APPEND PALACE_OPTIONS
    "-DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}"
    "-DCMAKE_Fortran_FLAGS=${CMAKE_Fortran_FLAGS}"
  )
endif()

string(REPLACE ";" "; " PALACE_OPTIONS_PRINT "${PALACE_OPTIONS}")
message(STATUS "PALACE_OPTIONS: ${PALACE_OPTIONS_PRINT}")

include(ExternalProject)
ExternalProject_Add(palace
  DEPENDS           ${PALACE_DEPENDENCIES}
  SOURCE_DIR        ${CMAKE_SOURCE_DIR}/palace
  BINARY_DIR        ${CMAKE_BINARY_DIR}/palace-build
  INSTALL_DIR       ${CMAKE_INSTALL_PREFIX}
  PREFIX            ${CMAKE_BINARY_DIR}/palace-cmake
  BUILD_ALWAYS      TRUE
  DOWNLOAD_COMMAND  ""
  CONFIGURE_COMMAND cmake <SOURCE_DIR> "${PALACE_OPTIONS}"
  TEST_COMMAND      ""
)
