# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

#
# Build HYPRE
#

# Force build order
set(HYPRE_DEPENDENCIES)
if(PALACE_WITH_UMPIRE)
  list(APPEND HYPRE_DEPENDENCIES umpire)
endif()

# Silence CUDA/HIP include warnings with -pedantic
set(HYPRE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_${BUILD_TYPE_UPPER}}")
set(HYPRE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${BUILD_TYPE_UPPER}}")
if(HYPRE_C_FLAGS MATCHES "-pedantic" AND (PALACE_WITH_CUDA OR PALACE_WITH_HIP))
  string(REGEX REPLACE "-pedantic" "" HYPRE_C_FLAGS "${HYPRE_C_FLAGS}")
  string(REGEX REPLACE "-pedantic" "" HYPRE_CXX_FLAGS "${HYPRE_CXX_FLAGS}")
endif()

set(HYPRE_OPTIONS
  -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
  -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
  -DCMAKE_C_FLAGS=${HYPRE_C_FLAGS}
  -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
  -DHYPRE_ENABLE_FORTRAN=OFF
  -DHYPRE_ENABLE_MPI=ON
)
if(BUILD_SHARED_LIBS)
  list(APPEND HYPRE_OPTIONS -DHYPRE_SHARED=ON)
else()
  list(APPEND HYPRE_OPTIONS -DHYPRE_SHARED=OFF)
endif()
if(PALACE_WITH_64BIT_INT)
  list(APPEND HYPRE_OPTIONS
    -DHYPRE_ENABLE_MIXEDINT=ON
    -DHYPRE_ENABLE_BIGINT=OFF
  )
else()
  list(APPEND HYPRE_OPTIONS
    -DHYPRE_ENABLE_MIXEDINT=OFF
    -DHYPRE_ENABLE_BIGINT=OFF
  )
endif()
if(PALACE_WITH_OPENMP)
  list(APPEND HYPRE_OPTIONS -DHYPRE_ENABLE_OPENMP=ON)
endif()

# Configure Umpire support
if(PALACE_WITH_UMPIRE)
  list(APPEND HYPRE_OPTIONS
    -DHYPRE_ENABLE_UMPIRE=ON
    -Dumpire_DIR=${CMAKE_INSTALL_PREFIX}/lib/cmake/umpire
  )
endif()

# Configure BLAS/LAPACK
if(NOT "${BLAS_LAPACK_LIBRARIES}" STREQUAL "")
  list(APPEND HYPRE_OPTIONS
    -DHYPRE_ENABLE_HYPRE_BLAS=OFF
    -DHYPRE_ENABLE_HYPRE_LAPACK=OFF
    -DTPL_BLAS_LIBRARIES=${BLAS_LAPACK_LIBRARIES}
    -DTPL_LAPACK_LIBRARIES=${BLAS_LAPACK_LIBRARIES}
  )
endif()

# Configure GPU support
if(PALACE_WITH_CUDA OR PALACE_WITH_HIP)
  list(APPEND HYPRE_OPTIONS -DHYPRE_ENABLE_UNIFIED_MEMORY=OFF)
  if(PALACE_WITH_GPU_AWARE_MPI)
    list(APPEND HYPRE_OPTIONS -DHYPRE_ENABLE_GPU_AWARE_MPI=ON)
  else()
    list(APPEND HYPRE_OPTIONS -DHYPRE_ENABLE_GPU_AWARE_MPI=OFF)
  endif()
endif()
if(PALACE_WITH_CUDA)
  list(APPEND HYPRE_OPTIONS
    -DHYPRE_ENABLE_CUDA=ON
    -DHYPRE_ENABLE_CURAND=ON
    -DHYPRE_ENABLE_CUSPARSE=ON
    # https://github.com/hypre-space/hypre/issues/1404
    -DCUDAToolkit_ROOT=${CUDAToolkit_LIBRARY_ROOT}
  )
  if(NOT "${CMAKE_CUDA_ARCHITECTURES}" STREQUAL "")
    list(APPEND HYPRE_OPTIONS -DCMAKE_CUDA_ARCHITECTURES=${CMAKE_CUDA_ARCHITECTURES})
  endif()
endif()
if(PALACE_WITH_HIP)
  list(APPEND HYPRE_OPTIONS
    -DHYPRE_ENABLE_HIP=ON
    -DHYPRE_ENABLE_ROCRAND=ON
    -DHYPRE_ENABLE_ROCSPARSE=ON
  )
  if(NOT "${CMAKE_HIP_ARCHITECTURES}" STREQUAL "")
    list(APPEND HYPRE_OPTIONS -DCMAKE_HIP_ARCHITECTURES=${CMAKE_HIP_ARCHITECTURES})
  endif()
endif()

string(REPLACE ";" "; " HYPRE_OPTIONS_PRINT "${HYPRE_OPTIONS}")
message(STATUS "HYPRE_OPTIONS: ${HYPRE_OPTIONS_PRINT}")

include(ExternalProject)
ExternalProject_Add(hypre
  DEPENDS           ${HYPRE_DEPENDENCIES}
  GIT_REPOSITORY    ${EXTERN_HYPRE_URL}
  GIT_TAG           ${EXTERN_HYPRE_GIT_TAG}
  SOURCE_DIR        ${CMAKE_BINARY_DIR}/extern/hypre
  INSTALL_DIR       ${CMAKE_INSTALL_PREFIX}
  PREFIX            ${CMAKE_BINARY_DIR}/extern/hypre-cmake
  SOURCE_SUBDIR     src
  UPDATE_COMMAND    ""
  CMAKE_ARGS        ${HYPRE_OPTIONS}
  TEST_COMMAND      ""
)
